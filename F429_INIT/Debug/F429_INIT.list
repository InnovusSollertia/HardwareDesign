
F429_INIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d074  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800d224  0800d224  0001d224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2a8  0800d2a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2a8  0800d2a8  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2b0  0800d2b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2b0  0800d2b0  0001d2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2b4  0800d2b4  0001d2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00008f90  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009010  20009010  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002962d  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005cef  00000000  00000000  00049720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022b8  00000000  00000000  0004f410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ae5  00000000  00000000  000516c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b23b  00000000  00000000  000531ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c029  00000000  00000000  0007e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f53b9  00000000  00000000  000aa411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000096fc  00000000  00000000  0019f7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001a8ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d20c 	.word	0x0800d20c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d20c 	.word	0x0800d20c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <vApplicationGetIdleTaskMemory+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <vApplicationGetIdleTaskMemory+0x30>)
 8000536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000009c 	.word	0x2000009c
 8000550:	200000f4 	.word	0x200000f4

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f001 f859 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f82b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 fa99 	bl	8000a98 <MX_GPIO_Init>
  MX_CRC_Init();
 8000566:	f000 f891 	bl	800068c <MX_CRC_Init>
  MX_DMA2D_Init();
 800056a:	f000 f8a3 	bl	80006b4 <MX_DMA2D_Init>
  MX_FMC_Init();
 800056e:	f000 fa43 	bl	80009f8 <MX_FMC_Init>
  MX_I2C3_Init();
 8000572:	f000 f8d1 	bl	8000718 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000576:	f000 f90f 	bl	8000798 <MX_LTDC_Init>
  MX_SPI5_Init();
 800057a:	f000 f98d 	bl	8000898 <MX_SPI5_Init>
  MX_TIM1_Init();
 800057e:	f000 f9c1 	bl	8000904 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000582:	f000 fa0f 	bl	80009a4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <main+0x5c>)
 8000588:	1d3c      	adds	r4, r7, #4
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f009 ff60 	bl	800a462 <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <main+0x60>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a8:	f009 ff54 	bl	800a454 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x58>
 80005ae:	bf00      	nop
 80005b0:	0800d230 	.word	0x0800d230
 80005b4:	20000554 	.word	0x20000554

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00c fd82 	bl	800d0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000630:	2348      	movs	r3, #72	; 0x48
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fb3d 	bl	8004cc0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 fb50 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2102      	movs	r1, #2
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fd9f 	bl	80051b0 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 fb3a 	bl	8000cf0 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_CRC_Init+0x20>)
 8000692:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <MX_CRC_Init+0x24>)
 8000694:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_CRC_Init+0x20>)
 8000698:	f001 f902 	bl	80018a0 <HAL_CRC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006a2:	f000 fb25 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200002f4 	.word	0x200002f4
 80006b0:	40023000 	.word	0x40023000

080006b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <MX_DMA2D_Init+0x60>)
 80006bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006ea:	f001 f8f5 	bl	80018d8 <HAL_DMA2D_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006f4:	f000 fafc 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f8:	2101      	movs	r1, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006fc:	f001 fa46 	bl	8001b8c <HAL_DMA2D_ConfigLayer>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000706:	f000 faf3 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200002fc 	.word	0x200002fc
 8000714:	4002b000 	.word	0x4002b000

08000718 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C3_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C3_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C3_Init+0x74>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_I2C3_Init+0x74>)
 8000756:	f003 fd8b 	bl	8004270 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fac6 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C3_Init+0x74>)
 8000768:	f003 fec6 	bl	80044f8 <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fabd 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C3_Init+0x74>)
 800077a:	f003 fef9 	bl	8004570 <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fab4 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000033c 	.word	0x2000033c
 8000790:	40005c00 	.word	0x40005c00
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2234      	movs	r2, #52	; 0x34
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f00c fc93 	bl	800d0d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007ac:	4a39      	ldr	r2, [pc, #228]	; (8000894 <MX_LTDC_Init+0xfc>)
 80007ae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007c8:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007ca:	2209      	movs	r2, #9
 80007cc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007d6:	221d      	movs	r2, #29
 80007d8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007dc:	2203      	movs	r2, #3
 80007de:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007e2:	f240 120d 	movw	r2, #269	; 0x10d
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 1243 	movw	r2, #323	; 0x143
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1217 	movw	r2, #279	; 0x117
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 1247 	movw	r2, #327	; 0x147
 80007fe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_LTDC_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_LTDC_Init+0xf8>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <MX_LTDC_Init+0xf8>)
 800081a:	f003 fee9 	bl	80045f0 <HAL_LTDC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 fa64 	bl	8000cf0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800082c:	23f0      	movs	r3, #240	; 0xf0
 800082e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000834:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000838:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800083a:	2302      	movs	r3, #2
 800083c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800083e:	23ff      	movs	r3, #255	; 0xff
 8000840:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000846:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800084a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800084c:	2307      	movs	r3, #7
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000850:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000856:	23f0      	movs	r3, #240	; 0xf0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800085a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_LTDC_Init+0xf8>)
 800087a:	f004 f84b 	bl	8004914 <HAL_LTDC_ConfigLayer>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000884:	f000 fa34 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	; 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000390 	.word	0x20000390
 8000894:	40016800 	.word	0x40016800

08000898 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI5_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MX_SPI5_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_SPI5_Init+0x64>)
 80008a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SPI5_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_SPI5_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI5_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_SPI5_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI5_Init+0x64>)
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI5_Init+0x64>)
 80008cc:	2218      	movs	r2, #24
 80008ce:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_SPI5_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI5_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_SPI5_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI5_Init+0x64>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_SPI5_Init+0x64>)
 80008ea:	f005 f8a7 	bl	8005a3c <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 f9fc 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000438 	.word	0x20000438
 8000900:	40015000 	.word	0x40015000

08000904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_TIM1_Init+0x98>)
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <MX_TIM1_Init+0x9c>)
 8000924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_TIM1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_TIM1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM1_Init+0x98>)
 8000934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_TIM1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_TIM1_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_TIM1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800094c:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_TIM1_Init+0x98>)
 800094e:	f005 f8fe 	bl	8005b4e <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f9ca 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_TIM1_Init+0x98>)
 800096a:	f005 fa9f 	bl	8005eac <HAL_TIM_ConfigClockSource>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000974:	f000 f9bc 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_TIM1_Init+0x98>)
 8000986:	f005 fcc7 	bl	8006318 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 f9ae 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000490 	.word	0x20000490
 80009a0:	40010000 	.word	0x40010000

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART1_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009dc:	f005 fd2c 	bl	8006438 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 f983 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200004d8 	.word	0x200004d8
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <MX_FMC_Init+0x9c>)
 8000a14:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a36:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a3a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a48:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_FMC_Init+0x98>)
 8000a7a:	f004 ffab 	bl	80059d4 <HAL_SDRAM_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a84:	f000 f934 	bl	8000cf0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000520 	.word	0x20000520
 8000a94:	a0000140 	.word	0xa0000140

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	; 0x38
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	4b7b      	ldr	r3, [pc, #492]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a7a      	ldr	r2, [pc, #488]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b78      	ldr	r3, [pc, #480]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	623b      	str	r3, [r7, #32]
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	4b74      	ldr	r3, [pc, #464]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a73      	ldr	r2, [pc, #460]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b71      	ldr	r3, [pc, #452]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0320 	and.w	r3, r3, #32
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	4b6d      	ldr	r3, [pc, #436]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a6c      	ldr	r2, [pc, #432]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b6a      	ldr	r3, [pc, #424]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	4b66      	ldr	r3, [pc, #408]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a65      	ldr	r2, [pc, #404]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b63      	ldr	r3, [pc, #396]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b5f      	ldr	r3, [pc, #380]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a5e      	ldr	r2, [pc, #376]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a57      	ldr	r2, [pc, #348]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b51      	ldr	r3, [pc, #324]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a49      	ldr	r2, [pc, #292]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <MX_GPIO_Init+0x208>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2116      	movs	r1, #22
 8000b92:	4844      	ldr	r0, [pc, #272]	; (8000ca4 <MX_GPIO_Init+0x20c>)
 8000b94:	f001 fa38 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	4842      	ldr	r0, [pc, #264]	; (8000ca8 <MX_GPIO_Init+0x210>)
 8000b9e:	f001 fa33 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ba8:	4840      	ldr	r0, [pc, #256]	; (8000cac <MX_GPIO_Init+0x214>)
 8000baa:	f001 fa2d 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bb4:	483e      	ldr	r0, [pc, #248]	; (8000cb0 <MX_GPIO_Init+0x218>)
 8000bb6:	f001 fa27 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bba:	2316      	movs	r3, #22
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4834      	ldr	r0, [pc, #208]	; (8000ca4 <MX_GPIO_Init+0x20c>)
 8000bd2:	f001 f86d 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bd6:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bdc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	482e      	ldr	r0, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0x210>)
 8000bee:	f001 f85f 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0x210>)
 8000c0a:	f001 f851 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c0e:	2320      	movs	r3, #32
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x20c>)
 8000c24:	f001 f844 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0x21c>)
 8000c3c:	f001 f838 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_GPIO_Init+0x214>)
 8000c56:	f001 f82b 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <MX_GPIO_Init+0x214>)
 8000c74:	f001 f81c 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_GPIO_Init+0x218>)
 8000c92:	f001 f80d 	bl	8001cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	; 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	40021800 	.word	0x40021800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cc0:	f00b fe40 	bl	800c944 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f009 fc18 	bl	800a4fa <osDelay>
 8000cca:	e7fb      	b.n	8000cc4 <StartDefaultTask+0xc>

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 fcb9 	bl	8001654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_MspInit+0x54>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <HAL_MspInit+0x54>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_MspInit+0x54>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_MspInit+0x54>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_MspInit+0x54>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_MspInit+0x54>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	f06f 0001 	mvn.w	r0, #1
 8000d42:	f000 fd83 	bl	800184c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_CRC_MspInit+0x3c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10d      	bne.n	8000d82 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_CRC_MspInit+0x40>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <HAL_CRC_MspInit+0x40>)
 8000d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_CRC_MspInit+0x40>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023000 	.word	0x40023000
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_DMA2D_MspInit+0x48>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d115      	bne.n	8000dd6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_DMA2D_MspInit+0x4c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <HAL_DMA2D_MspInit+0x4c>)
 8000db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_DMA2D_MspInit+0x4c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	205a      	movs	r0, #90	; 0x5a
 8000dcc:	f000 fd3e 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dd0:	205a      	movs	r0, #90	; 0x5a
 8000dd2:	f000 fd57 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	4002b000 	.word	0x4002b000
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a29      	ldr	r2, [pc, #164]	; (8000eac <HAL_I2C_MspInit+0xc4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d14b      	bne.n	8000ea2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e54:	2304      	movs	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <HAL_I2C_MspInit+0xcc>)
 8000e60:	f000 ff26 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e76:	2304      	movs	r3, #4
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <HAL_I2C_MspInit+0xd0>)
 8000e82:	f000 ff15 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_I2C_MspInit+0xc8>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40005c00 	.word	0x40005c00
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09a      	sub	sp, #104	; 0x68
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	2230      	movs	r2, #48	; 0x30
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00c f8f7 	bl	800d0d0 <memset>
  if(hltdc->Instance==LTDC)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a85      	ldr	r2, [pc, #532]	; (80010fc <HAL_LTDC_MspInit+0x240>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	f040 8102 	bne.w	80010f2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000ef2:	2332      	movs	r3, #50	; 0x32
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000efa:	2300      	movs	r3, #0
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fba6 	bl	8005654 <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f0e:	f7ff feef 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	4b7a      	ldr	r3, [pc, #488]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a79      	ldr	r2, [pc, #484]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b77      	ldr	r3, [pc, #476]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	4b73      	ldr	r3, [pc, #460]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a72      	ldr	r2, [pc, #456]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b70      	ldr	r3, [pc, #448]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a6b      	ldr	r2, [pc, #428]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b69      	ldr	r3, [pc, #420]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b65      	ldr	r3, [pc, #404]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a64      	ldr	r2, [pc, #400]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b62      	ldr	r3, [pc, #392]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a5d      	ldr	r2, [pc, #372]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b57      	ldr	r3, [pc, #348]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a56      	ldr	r2, [pc, #344]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b54      	ldr	r3, [pc, #336]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fe8:	230e      	movs	r3, #14
 8000fea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4844      	ldr	r0, [pc, #272]	; (8001104 <HAL_LTDC_MspInit+0x248>)
 8000ff4:	f000 fe5c 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ff8:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ffc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800100a:	230e      	movs	r3, #14
 800100c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001012:	4619      	mov	r1, r3
 8001014:	483c      	ldr	r0, [pc, #240]	; (8001108 <HAL_LTDC_MspInit+0x24c>)
 8001016:	f000 fe4b 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800101a:	2303      	movs	r3, #3
 800101c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800102a:	2309      	movs	r3, #9
 800102c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001032:	4619      	mov	r1, r3
 8001034:	4835      	ldr	r0, [pc, #212]	; (800110c <HAL_LTDC_MspInit+0x250>)
 8001036:	f000 fe3b 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800103a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800103e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800104c:	230e      	movs	r3, #14
 800104e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001054:	4619      	mov	r1, r3
 8001056:	482d      	ldr	r0, [pc, #180]	; (800110c <HAL_LTDC_MspInit+0x250>)
 8001058:	f000 fe2a 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800105c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001060:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106e:	230e      	movs	r3, #14
 8001070:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001076:	4619      	mov	r1, r3
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <HAL_LTDC_MspInit+0x254>)
 800107a:	f000 fe19 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800107e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001090:	230e      	movs	r3, #14
 8001092:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001098:	4619      	mov	r1, r3
 800109a:	481e      	ldr	r0, [pc, #120]	; (8001114 <HAL_LTDC_MspInit+0x258>)
 800109c:	f000 fe08 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010a0:	2348      	movs	r3, #72	; 0x48
 80010a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b0:	230e      	movs	r3, #14
 80010b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b8:	4619      	mov	r1, r3
 80010ba:	4817      	ldr	r0, [pc, #92]	; (8001118 <HAL_LTDC_MspInit+0x25c>)
 80010bc:	f000 fdf8 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010d2:	2309      	movs	r3, #9
 80010d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_LTDC_MspInit+0x254>)
 80010de:	f000 fde7 	bl	8001cb0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2105      	movs	r1, #5
 80010e6:	2058      	movs	r0, #88	; 0x58
 80010e8:	f000 fbb0 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010ec:	2058      	movs	r0, #88	; 0x58
 80010ee:	f000 fbc9 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3768      	adds	r7, #104	; 0x68
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40016800 	.word	0x40016800
 8001100:	40023800 	.word	0x40023800
 8001104:	40021400 	.word	0x40021400
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40021800 	.word	0x40021800
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001176:	f44f 7360 	mov.w	r3, #896	; 0x380
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001188:	2305      	movs	r3, #5
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001194:	f000 fd8c 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40015000 	.word	0x40015000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40021400 	.word	0x40021400

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_TIM_Base_MspInit+0x3c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10d      	bne.n	80011da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x40>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x40>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_TIM_Base_MspInit+0x40>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a19      	ldr	r2, [pc, #100]	; (8001274 <HAL_UART_MspInit+0x84>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d12c      	bne.n	800126c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_UART_MspInit+0x88>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_UART_MspInit+0x88>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_UART_MspInit+0x88>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_UART_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_UART_MspInit+0x88>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_UART_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800124a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800125c:	2307      	movs	r3, #7
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_UART_MspInit+0x8c>)
 8001268:	f000 fd22 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40011000 	.word	0x40011000
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_FMC_MspInit+0x104>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d16f      	bne.n	800137c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_FMC_MspInit+0x104>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_FMC_MspInit+0x108>)
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	4a37      	ldr	r2, [pc, #220]	; (8001388 <HAL_FMC_MspInit+0x108>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6393      	str	r3, [r2, #56]	; 0x38
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_FMC_MspInit+0x108>)
 80012b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80012be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012c2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d0:	230c      	movs	r3, #12
 80012d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	482c      	ldr	r0, [pc, #176]	; (800138c <HAL_FMC_MspInit+0x10c>)
 80012da:	f000 fce9 	bl	8001cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012de:	2301      	movs	r3, #1
 80012e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ee:	230c      	movs	r3, #12
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4826      	ldr	r0, [pc, #152]	; (8001390 <HAL_FMC_MspInit+0x110>)
 80012f8:	f000 fcda 	bl	8001cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001300:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <HAL_FMC_MspInit+0x114>)
 8001318:	f000 fcca 	bl	8001cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800131c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001320:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132e:	230c      	movs	r3, #12
 8001330:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4818      	ldr	r0, [pc, #96]	; (8001398 <HAL_FMC_MspInit+0x118>)
 8001338:	f000 fcba 	bl	8001cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800133c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001340:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <HAL_FMC_MspInit+0x11c>)
 8001358:	f000 fcaa 	bl	8001cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800135c:	2360      	movs	r3, #96	; 0x60
 800135e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136c:	230c      	movs	r3, #12
 800136e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <HAL_FMC_MspInit+0x120>)
 8001376:	f000 fc9b 	bl	8001cb0 <HAL_GPIO_Init>
 800137a:	e000      	b.n	800137e <HAL_FMC_MspInit+0xfe>
    return;
 800137c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000558 	.word	0x20000558
 8001388:	40023800 	.word	0x40023800
 800138c:	40021400 	.word	0x40021400
 8001390:	40020800 	.word	0x40020800
 8001394:	40021800 	.word	0x40021800
 8001398:	40021000 	.word	0x40021000
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013ac:	f7ff ff68 	bl	8001280 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_InitTick+0xe4>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <HAL_InitTick+0xe4>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_InitTick+0xe4>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e4:	f107 0210 	add.w	r2, r7, #16
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 f8fe 	bl	80055f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f004 f8cf 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8001402:	6378      	str	r0, [r7, #52]	; 0x34
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001406:	f004 f8cb 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 800140a:	4603      	mov	r3, r0
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_InitTick+0xe8>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	3b01      	subs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_InitTick+0xec>)
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_InitTick+0xf0>)
 8001422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_InitTick+0xec>)
 8001426:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_InitTick+0xec>)
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_InitTick+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_InitTick+0xec>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_InitTick+0xec>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <HAL_InitTick+0xec>)
 8001446:	f004 fb82 	bl	8005b4e <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11b      	bne.n	8001490 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <HAL_InitTick+0xec>)
 800145a:	f004 fbc7 	bl	8005bec <HAL_TIM_Base_Start_IT>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800146c:	2036      	movs	r0, #54	; 0x36
 800146e:	f000 fa09 	bl	8001884 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d808      	bhi.n	800148a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	2036      	movs	r0, #54	; 0x36
 800147e:	f000 f9e5 	bl	800184c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_InitTick+0xf4>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e002      	b.n	8001490 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001494:	4618      	mov	r0, r3
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	2000055c 	.word	0x2000055c
 80014a8:	40001000 	.word	0x40001000
 80014ac:	20000004 	.word	0x20000004

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM6_DAC_IRQHandler+0x10>)
 80014e2:	f004 fbf3 	bl	8005ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000055c 	.word	0x2000055c

080014f0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <OTG_HS_IRQHandler+0x10>)
 80014f6:	f001 f881 	bl	80025fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20008ae8 	.word	0x20008ae8

08001504 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <LTDC_IRQHandler+0x10>)
 800150a:	f003 f941 	bl	8004790 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000390 	.word	0x20000390

08001518 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA2D_IRQHandler+0x10>)
 800151e:	f000 fa24 	bl	800196a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002fc 	.word	0x200002fc

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f00b fdd0 	bl	800d100 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20030000 	.word	0x20030000
 800158c:	00000400 	.word	0x00000400
 8001590:	200005a4 	.word	0x200005a4
 8001594:	20009010 	.word	0x20009010

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c0:	f7ff ffea 	bl	8001598 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f00b fd8f 	bl	800d10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7fe ffb1 	bl	8000554 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001600:	0800d2b8 	.word	0x0800d2b8
  ldr r2, =_sbss
 8001604:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001608:	20009010 	.word	0x20009010

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f8fc 	bl	8001836 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff feba 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fb5a 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	200005a8 	.word	0x200005a8

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200005a8 	.word	0x200005a8

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000008 	.word	0x20000008

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff4c 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185e:	f7ff ff61 	bl	8001724 <__NVIC_GetPriorityGrouping>
 8001862:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7ff ffb1 	bl	80017d0 <NVIC_EncodePriority>
 800186e:	4602      	mov	r2, r0
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff80 	bl	800177c <__NVIC_SetPriority>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff54 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fa46 	bl	8000d54 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e03b      	b.n	8001962 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fa4a 	bl	8000d98 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	f023 0107 	bic.w	r1, r3, #7
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001942:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68d1      	ldr	r1, [r2, #12]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	430b      	orrs	r3, r1
 8001950:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d026      	beq.n	80019da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d021      	beq.n	80019da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2204      	movs	r2, #4
 80019be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d026      	beq.n	8001a32 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d021      	beq.n	8001a32 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2220      	movs	r2, #32
 8001a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d026      	beq.n	8001a8a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d021      	beq.n	8001a8a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a54:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	f043 0204 	orr.w	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00e      	beq.n	8001abc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f853 	bl	8001b62 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d024      	beq.n	8001b10 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01f      	beq.n	8001b10 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ade:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01f      	beq.n	8001b5a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01a      	beq.n	8001b5a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f80e 	bl	8001b76 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_DMA2D_ConfigLayer+0x20>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e079      	b.n	8001ca0 <HAL_DMA2D_ConfigLayer+0x114>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	3318      	adds	r3, #24
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_DMA2D_ConfigLayer+0x120>)
 8001bd8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d003      	beq.n	8001bea <HAL_DMA2D_ConfigLayer+0x5e>
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	d107      	bne.n	8001bfa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e005      	b.n	8001c06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	061b      	lsls	r3, r3, #24
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d120      	bne.n	8001c4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	ea02 0103 	and.w	r1, r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d003      	beq.n	8001c3e <HAL_DMA2D_ConfigLayer+0xb2>
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	d127      	bne.n	8001c8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c4c:	e01f      	b.n	8001c8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	ea02 0103 	and.w	r1, r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b0a      	cmp	r3, #10
 8001c76:	d003      	beq.n	8001c80 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d106      	bne.n	8001c8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c8c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	ff03000f 	.word	0xff03000f

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e177      	b.n	8001fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8166 	bne.w	8001fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80c0 	beq.w	8001fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e52:	4a61      	ldr	r2, [pc, #388]	; (8001fd8 <HAL_GPIO_Init+0x328>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d037      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d031      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a56      	ldr	r2, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a55      	ldr	r2, [pc, #340]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d025      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a54      	ldr	r2, [pc, #336]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a53      	ldr	r2, [pc, #332]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a50      	ldr	r2, [pc, #320]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x21a>
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	e012      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eca:	230a      	movs	r3, #10
 8001ecc:	e010      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e00e      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x328>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a29      	ldr	r2, [pc, #164]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_GPIO_Init+0x354>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f ae84 	bls.w	8001ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40021c00 	.word	0x40021c00
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40022400 	.word	0x40022400
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
 8002014:	4613      	mov	r3, r2
 8002016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002024:	e003      	b.n	800202e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	041a      	lsls	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	619a      	str	r2, [r3, #24]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af02      	add	r7, sp, #8
 8002040:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e059      	b.n	8002100 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f00a fcc0 	bl	800c9ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800207a:	d102      	bne.n	8002082 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fdd5 	bl	8006c36 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7c1a      	ldrb	r2, [r3, #16]
 8002094:	f88d 2000 	strb.w	r2, [sp]
 8002098:	3304      	adds	r3, #4
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	f004 fd56 	bl	8006b4c <USB_CoreInit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e026      	b.n	8002100 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fdcd 	bl	8006c58 <USB_SetCurrentMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e017      	b.n	8002100 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7c1a      	ldrb	r2, [r3, #16]
 80020d8:	f88d 2000 	strb.w	r2, [sp]
 80020dc:	3304      	adds	r3, #4
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	f004 ff70 	bl	8006fc4 <USB_HostInit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e004      	b.n	8002100 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b08b      	sub	sp, #44	; 0x2c
 800210c:	af04      	add	r7, sp, #16
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	70fb      	strb	r3, [r7, #3]
 800211a:	460b      	mov	r3, r1
 800211c:	70bb      	strb	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002122:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002124:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_HCD_HC_Init+0x2c>
 8002130:	2302      	movs	r3, #2
 8002132:	e09d      	b.n	8002270 <HAL_HCD_HC_Init+0x168>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3319      	adds	r3, #25
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3314      	adds	r3, #20
 8002160:	787a      	ldrb	r2, [r7, #1]
 8002162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3315      	adds	r3, #21
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3326      	adds	r3, #38	; 0x26
 8002188:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800218c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	78bb      	ldrb	r3, [r7, #2]
 8002192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3316      	adds	r3, #22
 80021a6:	4602      	mov	r2, r0
 80021a8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fbc8 	bl	8002944 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80021b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0a      	bge.n	80021d2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3317      	adds	r3, #23
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e009      	b.n	80021e6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3317      	adds	r3, #23
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f005 f84e 	bl	800728c <USB_GetHostSpeed>
 80021f0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80021f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10b      	bne.n	8002212 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80021fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_HCD_HC_Init+0x10a>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2bbc      	cmp	r3, #188	; 0xbc
 800220c:	d901      	bls.n	8002212 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800220e:	23bc      	movs	r3, #188	; 0xbc
 8002210:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3318      	adds	r3, #24
 8002222:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	b298      	uxth	r0, r3
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3328      	adds	r3, #40	; 0x28
 800223c:	4602      	mov	r2, r0
 800223e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	b29b      	uxth	r3, r3
 8002248:	787c      	ldrb	r4, [r7, #1]
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	78f9      	ldrb	r1, [r7, #3]
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4623      	mov	r3, r4
 800225e:	f005 f83d 	bl	80072dc <USB_HC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_HCD_HC_Halt+0x1e>
 8002292:	2302      	movs	r3, #2
 8002294:	e00f      	b.n	80022b6 <HAL_HCD_HC_Halt+0x3e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f005 fbcf 	bl	8007a4a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	70fb      	strb	r3, [r7, #3]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70bb      	strb	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3317      	adds	r3, #23
 80022ea:	78ba      	ldrb	r2, [r7, #2]
 80022ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3326      	adds	r3, #38	; 0x26
 80022fe:	787a      	ldrb	r2, [r7, #1]
 8002300:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002302:	7c3b      	ldrb	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d114      	bne.n	8002332 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	332a      	adds	r3, #42	; 0x2a
 8002318:	2203      	movs	r2, #3
 800231a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3319      	adds	r3, #25
 800232c:	7f3a      	ldrb	r2, [r7, #28]
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e009      	b.n	8002346 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	332a      	adds	r3, #42	; 0x2a
 8002342:	2202      	movs	r2, #2
 8002344:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002346:	787b      	ldrb	r3, [r7, #1]
 8002348:	2b03      	cmp	r3, #3
 800234a:	f200 8102 	bhi.w	8002552 <HAL_HCD_HC_SubmitRequest+0x292>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002365 	.word	0x08002365
 8002358:	0800253d 	.word	0x0800253d
 800235c:	08002429 	.word	0x08002429
 8002360:	080024b3 	.word	0x080024b3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002364:	7c3b      	ldrb	r3, [r7, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 80f5 	bne.w	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12d      	bne.n	80023ce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002372:	8b3b      	ldrh	r3, [r7, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	333d      	adds	r3, #61	; 0x3d
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	333d      	adds	r3, #61	; 0x3d
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	332a      	adds	r3, #42	; 0x2a
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80023b6:	e0ce      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	332a      	adds	r3, #42	; 0x2a
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      break;
 80023cc:	e0c3      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	331a      	adds	r3, #26
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 80b8 	bne.w	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	333c      	adds	r3, #60	; 0x3c
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	332a      	adds	r3, #42	; 0x2a
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
      break;
 8002410:	e0a1      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	332a      	adds	r3, #42	; 0x2a
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
      break;
 8002426:	e096      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d120      	bne.n	8002470 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	333d      	adds	r3, #61	; 0x3d
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	332a      	adds	r3, #42	; 0x2a
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002458:	e07e      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	332a      	adds	r3, #42	; 0x2a
 800246a:	2202      	movs	r2, #2
 800246c:	701a      	strb	r2, [r3, #0]
      break;
 800246e:	e073      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	333c      	adds	r3, #60	; 0x3c
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	332a      	adds	r3, #42	; 0x2a
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
      break;
 800249a:	e05d      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	332a      	adds	r3, #42	; 0x2a
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
      break;
 80024b0:	e052      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024b2:	78bb      	ldrb	r3, [r7, #2]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d120      	bne.n	80024fa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	333d      	adds	r3, #61	; 0x3d
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	332a      	adds	r3, #42	; 0x2a
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024e2:	e039      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	332a      	adds	r3, #42	; 0x2a
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
      break;
 80024f8:	e02e      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	333c      	adds	r3, #60	; 0x3c
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	332a      	adds	r3, #42	; 0x2a
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
      break;
 8002524:	e018      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	332a      	adds	r3, #42	; 0x2a
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
      break;
 800253a:	e00d      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	332a      	adds	r3, #42	; 0x2a
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
      break;
 8002550:	e002      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002556:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	332c      	adds	r3, #44	; 0x2c
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	8b39      	ldrh	r1, [r7, #24]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4403      	add	r3, r0
 800257c:	3334      	adds	r3, #52	; 0x34
 800257e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334c      	adds	r3, #76	; 0x4c
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3338      	adds	r3, #56	; 0x38
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3315      	adds	r3, #21
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	334d      	adds	r3, #77	; 0x4d
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	3310      	adds	r3, #16
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	1d19      	adds	r1, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f004 ffa2 	bl	8007534 <USB_HC_StartXfer>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop

080025fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fc96 	bl	8006f44 <USB_GetMode>
 8002618:	4603      	mov	r3, r0
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 80fb 	bne.w	8002816 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f004 fc59 	bl	8006edc <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80f1 	beq.w	8002814 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 fc50 	bl	8006edc <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002646:	d104      	bne.n	8002652 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fc40 	bl	8006edc <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002666:	d104      	bne.n	8002672 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fc30 	bl	8006edc <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002686:	d104      	bne.n	8002692 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fc20 	bl	8006edc <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d103      	bne.n	80026ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2202      	movs	r2, #2
 80026ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fc12 	bl	8006edc <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c2:	d120      	bne.n	8002706 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d113      	bne.n	8002706 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026de:	2110      	movs	r1, #16
 80026e0:	6938      	ldr	r0, [r7, #16]
 80026e2:	f004 fb05 	bl	8006cf0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026e6:	6938      	ldr	r0, [r7, #16]
 80026e8:	f004 fb34 	bl	8006d54 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7a5b      	ldrb	r3, [r3, #9]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d105      	bne.n	8002700 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fd26 	bl	800714c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f00a f9ed 	bl	800cae0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fbe6 	bl	8006edc <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002716:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271a:	d102      	bne.n	8002722 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f001 fd33 	bl	8004188 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fbd8 	bl	8006edc <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d106      	bne.n	8002744 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f00a f9b6 	bl	800caa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2208      	movs	r2, #8
 8002742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fbc7 	bl	8006edc <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002758:	d139      	bne.n	80027ce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f005 f962 	bl	8007a28 <USB_HC_ReadInterrupt>
 8002764:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e025      	b.n	80027b8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d018      	beq.n	80027b2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002796:	d106      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f905 	bl	80029ae <HCD_HC_IN_IRQHandler>
 80027a4:	e005      	b.n	80027b2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 ff67 	bl	8003680 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	461a      	mov	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d3d3      	bcc.n	800276c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fb82 	bl	8006edc <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d101      	bne.n	80027e6 <HAL_HCD_IRQHandler+0x1ea>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_HCD_IRQHandler+0x1ec>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d014      	beq.n	8002816 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0210 	bic.w	r2, r2, #16
 80027fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 fbe4 	bl	8003fca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0210 	orr.w	r2, r2, #16
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	e000      	b.n	8002816 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002814:	bf00      	nop
    }
  }
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_HCD_Start+0x16>
 800282e:	2302      	movs	r3, #2
 8002830:	e013      	b.n	800285a <HAL_HCD_Start+0x3e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fcea 	bl	800721a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f9e2 	bl	8006c14 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_HCD_Stop+0x16>
 8002874:	2302      	movs	r3, #2
 8002876:	e00d      	b.n	8002894 <HAL_HCD_Stop+0x32>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f005 fa3d 	bl	8007d04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 fc8c 	bl	80071c6 <USB_ResetPort>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334c      	adds	r3, #76	; 0x4c
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3338      	adds	r3, #56	; 0x38
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fcce 	bl	80072ba <USB_GetCurrentFrame>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fca9 	bl	800728c <USB_GetHostSpeed>
 800293a:	4603      	mov	r3, r0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	331a      	adds	r3, #26
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	331b      	adds	r3, #27
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3325      	adds	r3, #37	; 0x25
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3324      	adds	r3, #36	; 0x24
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fa98 	bl	8006f02 <USB_ReadChInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d11a      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2304      	movs	r3, #4
 80029ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	334d      	adds	r3, #77	; 0x4d
 80029fe:	2207      	movs	r2, #7
 8002a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f81d 	bl	8007a4a <USB_HC_Halt>
 8002a10:	e09e      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fa71 	bl	8006f02 <USB_ReadChInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2a:	d11b      	bne.n	8002a64 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	334d      	adds	r3, #77	; 0x4d
 8002a50:	2208      	movs	r2, #8
 8002a52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f004 fff4 	bl	8007a4a <USB_HC_Halt>
 8002a62:	e075      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 fa48 	bl	8006f02 <USB_ReadChInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d11a      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	334d      	adds	r3, #77	; 0x4d
 8002a9e:	2206      	movs	r2, #6
 8002aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 ffcd 	bl	8007a4a <USB_HC_Halt>
 8002ab0:	e04e      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fa21 	bl	8006f02 <USB_ReadChInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d11b      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	334d      	adds	r3, #77	; 0x4d
 8002af0:	2209      	movs	r2, #9
 8002af2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 ffa4 	bl	8007a4a <USB_HC_Halt>
 8002b02:	e025      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 f9f8 	bl	8006f02 <USB_ReadChInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d119      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	334d      	adds	r3, #77	; 0x4d
 8002b3e:	2207      	movs	r2, #7
 8002b40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 ff7d 	bl	8007a4a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 f9d2 	bl	8006f02 <USB_ReadChInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b68:	d112      	bne.n	8002b90 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 ff69 	bl	8007a4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8a:	6093      	str	r3, [r2, #8]
 8002b8c:	f000 bd75 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f9b2 	bl	8006f02 <USB_ReadChInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 8128 	bne.w	8002dfa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2320      	movs	r3, #32
 8002bba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	331b      	adds	r3, #27
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d119      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	331b      	adds	r3, #27
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	0151      	lsls	r1, r2, #5
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	440a      	add	r2, r1
 8002bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01b      	beq.n	8002c46 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3330      	adds	r3, #48	; 0x30
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	1ac9      	subs	r1, r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4403      	add	r3, r0
 8002c42:	3338      	adds	r3, #56	; 0x38
 8002c44:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334d      	adds	r3, #77	; 0x4d
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3344      	adds	r3, #68	; 0x44
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3326      	adds	r3, #38	; 0x26
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3326      	adds	r3, #38	; 0x26
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d110      	bne.n	8002cce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fec8 	bl	8007a4a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2310      	movs	r3, #16
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	e03d      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3326      	adds	r3, #38	; 0x26
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d00a      	beq.n	8002cfa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3326      	adds	r3, #38	; 0x26
 8002cf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d127      	bne.n	8002d4a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	0151      	lsls	r1, r2, #5
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	440a      	add	r2, r1
 8002d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d18:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334c      	adds	r3, #76	; 0x4c
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	334c      	adds	r3, #76	; 0x4c
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f009 fed9 	bl	800cafc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	799b      	ldrb	r3, [r3, #6]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d13b      	bne.n	8002dca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3338      	adds	r3, #56	; 0x38
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4403      	add	r3, r0
 8002d72:	3328      	adds	r3, #40	; 0x28
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	440b      	add	r3, r1
 8002d78:	1e59      	subs	r1, r3, #1
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3328      	adds	r3, #40	; 0x28
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8470 	beq.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	333c      	adds	r3, #60	; 0x3c
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2d8      	uxtb	r0, r3
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	333c      	adds	r3, #60	; 0x3c
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	f000 bc58 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	333c      	adds	r3, #60	; 0x3c
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	333c      	adds	r3, #60	; 0x3c
 8002df2:	4602      	mov	r2, r0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	f000 bc40 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f87d 	bl	8006f02 <USB_ReadChInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d131      	bne.n	8002e76 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2320      	movs	r3, #32
 8002e22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	331a      	adds	r3, #26
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	f040 841f 	bne.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	331b      	adds	r3, #27
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334d      	adds	r3, #77	; 0x4d
 8002e60:	2203      	movs	r2, #3
 8002e62:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f004 fdec 	bl	8007a4a <USB_HC_Halt>
 8002e72:	f000 bc02 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f83f 	bl	8006f02 <USB_ReadChInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	f040 8305 	bne.w	800349a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	334d      	adds	r3, #77	; 0x4d
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d114      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334d      	adds	r3, #77	; 0x4d
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334c      	adds	r3, #76	; 0x4c
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e2cc      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	334d      	adds	r3, #77	; 0x4d
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d114      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	; 0x4d
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	334c      	adds	r3, #76	; 0x4c
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e2ac      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	334d      	adds	r3, #77	; 0x4d
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d00b      	beq.n	8002f50 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334d      	adds	r3, #77	; 0x4d
 8002f48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	f040 80a6 	bne.w	800309c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	; 0x4d
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3344      	adds	r3, #68	; 0x44
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4403      	add	r3, r0
 8002f84:	3344      	adds	r3, #68	; 0x44
 8002f86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3344      	adds	r3, #68	; 0x44
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d943      	bls.n	8003026 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3344      	adds	r3, #68	; 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331a      	adds	r3, #26
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d123      	bne.n	8003010 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	331b      	adds	r3, #27
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	331c      	adds	r3, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	0151      	lsls	r1, r2, #5
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	440a      	add	r2, r1
 8003006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800300a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	; 0x4c
 8003020:	2204      	movs	r2, #4
 8003022:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003024:	e229      	b.n	800347a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	334c      	adds	r3, #76	; 0x4c
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3326      	adds	r3, #38	; 0x26
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3326      	adds	r3, #38	; 0x26
 8003060:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003062:	2b02      	cmp	r3, #2
 8003064:	f040 8209 	bne.w	800347a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800307e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003086:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800309a:	e1ee      	b.n	800347a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334d      	adds	r3, #77	; 0x4d
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	f040 80c8 	bne.w	8003244 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	334d      	adds	r3, #77	; 0x4d
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	331b      	adds	r3, #27
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 81ce 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3326      	adds	r3, #38	; 0x26
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d16b      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3348      	adds	r3, #72	; 0x48
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c59      	adds	r1, r3, #1
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4403      	add	r3, r0
 8003116:	3348      	adds	r3, #72	; 0x48
 8003118:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3348      	adds	r3, #72	; 0x48
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d943      	bls.n	80031b8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3348      	adds	r3, #72	; 0x48
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	331b      	adds	r3, #27
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3344      	adds	r3, #68	; 0x44
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d809      	bhi.n	8003182 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	331c      	adds	r3, #28
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	440a      	add	r2, r1
 8003198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800319c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334c      	adds	r3, #76	; 0x4c
 80031b2:	2204      	movs	r2, #4
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e014      	b.n	80031e2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	334c      	adds	r3, #76	; 0x4c
 80031c8:	2202      	movs	r2, #2
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e009      	b.n	80031e2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334c      	adds	r3, #76	; 0x4c
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3326      	adds	r3, #38	; 0x26
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3326      	adds	r3, #38	; 0x26
 8003208:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800320a:	2b02      	cmp	r3, #2
 800320c:	f040 8136 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003226:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800322e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e11b      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	; 0x4d
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b03      	cmp	r3, #3
 8003258:	f040 8081 	bne.w	800335e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	334d      	adds	r3, #77	; 0x4d
 800326c:	2202      	movs	r2, #2
 800326e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	331b      	adds	r3, #27
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80fa 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334c      	adds	r3, #76	; 0x4c
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	0151      	lsls	r1, r2, #5
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	440a      	add	r2, r1
 80032d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032da:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	0151      	lsls	r1, r2, #5
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	440a      	add	r2, r1
 80032f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f6:	f023 0320 	bic.w	r3, r3, #32
 80032fa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3326      	adds	r3, #38	; 0x26
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3326      	adds	r3, #38	; 0x26
 8003322:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003324:	2b02      	cmp	r3, #2
 8003326:	f040 80a9 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003340:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003348:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e08e      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334d      	adds	r3, #77	; 0x4d
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d143      	bne.n	80033fc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334d      	adds	r3, #77	; 0x4d
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	; 0x4c
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3326      	adds	r3, #38	; 0x26
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3326      	adds	r3, #38	; 0x26
 80033c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d159      	bne.n	800347c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e03f      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	; 0x4d
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d126      	bne.n	8003460 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	; 0x4d
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3344      	adds	r3, #68	; 0x44
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	3344      	adds	r3, #68	; 0x44
 8003448:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334c      	adds	r3, #76	; 0x4c
 800345a:	2204      	movs	r2, #4
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e00d      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	; 0x4d
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	f000 8100 	beq.w	8003678 <HCD_HC_IN_IRQHandler+0xcca>
 8003478:	e000      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	; 0x4c
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f009 fb32 	bl	800cafc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003498:	e0ef      	b.n	800367a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 fd2d 	bl	8006f02 <USB_ReadChInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d12f      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	461a      	mov	r2, r3
 80034c0:	2340      	movs	r3, #64	; 0x40
 80034c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	; 0x4d
 80034d4:	2205      	movs	r2, #5
 80034d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	331a      	adds	r3, #26
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3344      	adds	r3, #68	; 0x44
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f004 fa9d 	bl	8007a4a <USB_HC_Halt>
 8003510:	e0b3      	b.n	800367a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fcf1 	bl	8006f02 <USB_ReadChInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b10      	cmp	r3, #16
 8003528:	f040 80a7 	bne.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3326      	adds	r3, #38	; 0x26
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d11b      	bne.n	800357a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	; 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	334d      	adds	r3, #77	; 0x4d
 8003566:	2204      	movs	r2, #4
 8003568:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fa69 	bl	8007a4a <USB_HC_Halt>
 8003578:	e03f      	b.n	80035fa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3326      	adds	r3, #38	; 0x26
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3326      	adds	r3, #38	; 0x26
 80035a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d129      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	; 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	799b      	ldrb	r3, [r3, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HCD_HC_IN_IRQHandler+0xc2a>
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	331b      	adds	r3, #27
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d110      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334d      	adds	r3, #77	; 0x4d
 80035e8:	2204      	movs	r2, #4
 80035ea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f004 fa28 	bl	8007a4a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	331b      	adds	r3, #27
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d129      	bne.n	8003664 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	331b      	adds	r3, #27
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	440a      	add	r2, r1
 800363a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	440a      	add	r2, r1
 800365a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	2310      	movs	r3, #16
 8003674:	6093      	str	r3, [r2, #8]
 8003676:	e000      	b.n	800367a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003678:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fc2f 	bl	8006f02 <USB_ReadChInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d11b      	bne.n	80036e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	461a      	mov	r2, r3
 80036bc:	2304      	movs	r3, #4
 80036be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	; 0x4d
 80036d0:	2207      	movs	r2, #7
 80036d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f9b4 	bl	8007a4a <USB_HC_Halt>
 80036e2:	f000 bc6f 	b.w	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 fc07 	bl	8006f02 <USB_ReadChInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	f040 8082 	bne.w	8003804 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2320      	movs	r3, #32
 8003710:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3319      	adds	r3, #25
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d124      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3319      	adds	r3, #25
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334c      	adds	r3, #76	; 0x4c
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	; 0x4d
 8003760:	2203      	movs	r2, #3
 8003762:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f96c 	bl	8007a4a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	331a      	adds	r3, #26
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 841d 	bne.w	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	331b      	adds	r3, #27
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f040 8411 	bne.w	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3326      	adds	r3, #38	; 0x26
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d009      	beq.n	80037cc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	331b      	adds	r3, #27
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334d      	adds	r3, #77	; 0x4d
 80037dc:	2203      	movs	r2, #3
 80037de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 f92e 	bl	8007a4a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3344      	adds	r3, #68	; 0x44
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e3df      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fb78 	bl	8006f02 <USB_ReadChInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381c:	d111      	bne.n	8003842 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003830:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f004 f905 	bl	8007a4a <USB_HC_Halt>
 8003840:	e3c0      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f003 fb59 	bl	8006f02 <USB_ReadChInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d168      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	; 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f003 fb43 	bl	8006f02 <USB_ReadChInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d112      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3319      	adds	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	2340      	movs	r3, #64	; 0x40
 80038aa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	331b      	adds	r3, #27
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d019      	beq.n	80038f6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	331b      	adds	r3, #27
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	461a      	mov	r2, r3
 8003904:	2301      	movs	r3, #1
 8003906:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334d      	adds	r3, #77	; 0x4d
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f004 f890 	bl	8007a4a <USB_HC_Halt>
 800392a:	e34b      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fae4 	bl	8006f02 <USB_ReadChInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d139      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334d      	adds	r3, #77	; 0x4d
 8003954:	2205      	movs	r2, #5
 8003956:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	331a      	adds	r3, #26
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3319      	adds	r3, #25
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3344      	adds	r3, #68	; 0x44
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 f853 	bl	8007a4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	461a      	mov	r2, r3
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	6093      	str	r3, [r2, #8]
 80039b6:	e305      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fa9e 	bl	8006f02 <USB_ReadChInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d11a      	bne.n	8003a06 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	461a      	mov	r2, r3
 80039de:	2308      	movs	r3, #8
 80039e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334d      	adds	r3, #77	; 0x4d
 80039f2:	2206      	movs	r2, #6
 80039f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 f823 	bl	8007a4a <USB_HC_Halt>
 8003a04:	e2de      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fa77 	bl	8006f02 <USB_ReadChInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d144      	bne.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3344      	adds	r3, #68	; 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334d      	adds	r3, #77	; 0x4d
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3319      	adds	r3, #25
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d114      	bne.n	8003a86 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3319      	adds	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 ffdb 	bl	8007a4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	6093      	str	r3, [r2, #8]
 8003aa6:	e28d      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 fa26 	bl	8006f02 <USB_ReadChInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d169      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	799b      	ldrb	r3, [r3, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d111      	bne.n	8003aec <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	334d      	adds	r3, #77	; 0x4d
 8003ad8:	2207      	movs	r2, #7
 8003ada:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 ffb0 	bl	8007a4a <USB_HC_Halt>
 8003aea:	e049      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3344      	adds	r3, #68	; 0x44
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4403      	add	r3, r0
 8003b0c:	3344      	adds	r3, #68	; 0x44
 8003b0e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3344      	adds	r3, #68	; 0x44
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d922      	bls.n	8003b6c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3344      	adds	r3, #68	; 0x44
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	334c      	adds	r3, #76	; 0x4c
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	334c      	adds	r3, #76	; 0x4c
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f008 ffc9 	bl	800cafc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b6a:	e009      	b.n	8003b80 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	334c      	adds	r3, #76	; 0x4c
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	6093      	str	r3, [r2, #8]
 8003b92:	e217      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f003 f9b0 	bl	8006f02 <USB_ReadChInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bac:	d11b      	bne.n	8003be6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	334d      	adds	r3, #77	; 0x4d
 8003bbe:	2209      	movs	r2, #9
 8003bc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 ff3d 	bl	8007a4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be2:	6093      	str	r3, [r2, #8]
 8003be4:	e1ee      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 f987 	bl	8006f02 <USB_ReadChInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	f040 81df 	bne.w	8003fbe <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2302      	movs	r3, #2
 8003c10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	334d      	adds	r3, #77	; 0x4d
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 8093 	bne.w	8003d50 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	334d      	adds	r3, #77	; 0x4d
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	334c      	adds	r3, #76	; 0x4c
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3326      	adds	r3, #38	; 0x26
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d00b      	beq.n	8003c80 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	3326      	adds	r3, #38	; 0x26
 8003c78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	f040 8190 	bne.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	799b      	ldrb	r3, [r3, #6]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d115      	bne.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	333d      	adds	r3, #61	; 0x3d
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	f083 0301 	eor.w	r3, r3, #1
 8003ca0:	b2d8      	uxtb	r0, r3
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	333d      	adds	r3, #61	; 0x3d
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	799b      	ldrb	r3, [r3, #6]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 8171 	bne.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	3334      	adds	r3, #52	; 0x34
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8165 	beq.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3334      	adds	r3, #52	; 0x34
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4403      	add	r3, r0
 8003cf6:	3328      	adds	r3, #40	; 0x28
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	440b      	add	r3, r1
 8003cfc:	1e59      	subs	r1, r3, #1
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4403      	add	r3, r0
 8003d0c:	3328      	adds	r3, #40	; 0x28
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d14:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 813f 	beq.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	333d      	adds	r3, #61	; 0x3d
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	f083 0301 	eor.w	r3, r3, #1
 8003d3a:	b2d8      	uxtb	r0, r3
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	333d      	adds	r3, #61	; 0x3d
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e127      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334d      	adds	r3, #77	; 0x4d
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d120      	bne.n	8003da8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	334d      	adds	r3, #77	; 0x4d
 8003d76:	2202      	movs	r2, #2
 8003d78:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	331b      	adds	r3, #27
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 8107 	bne.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	334c      	adds	r3, #76	; 0x4c
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e0fb      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	334d      	adds	r3, #77	; 0x4d
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d13a      	bne.n	8003e34 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	334d      	adds	r3, #77	; 0x4d
 8003dce:	2202      	movs	r2, #2
 8003dd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	334c      	adds	r3, #76	; 0x4c
 8003de2:	2202      	movs	r2, #2
 8003de4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	331b      	adds	r3, #27
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	f040 80d1 	bne.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	331b      	adds	r3, #27
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e30:	6053      	str	r3, [r2, #4]
 8003e32:	e0b5      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334d      	adds	r3, #77	; 0x4d
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	d114      	bne.n	8003e74 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	334d      	adds	r3, #77	; 0x4d
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	334c      	adds	r3, #76	; 0x4c
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e095      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	334d      	adds	r3, #77	; 0x4d
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d114      	bne.n	8003eb4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334d      	adds	r3, #77	; 0x4d
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	334c      	adds	r3, #76	; 0x4c
 8003eae:	2205      	movs	r2, #5
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e075      	b.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003eb4:	78fa      	ldrb	r2, [r7, #3]
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	334d      	adds	r3, #77	; 0x4d
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d00a      	beq.n	8003ee0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	334d      	adds	r3, #77	; 0x4d
 8003eda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	d170      	bne.n	8003fc2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	334d      	adds	r3, #77	; 0x4d
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3344      	adds	r3, #68	; 0x44
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4403      	add	r3, r0
 8003f14:	3344      	adds	r3, #68	; 0x44
 8003f16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	3344      	adds	r3, #68	; 0x44
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d914      	bls.n	8003f58 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3344      	adds	r3, #68	; 0x44
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334c      	adds	r3, #76	; 0x4c
 8003f52:	2204      	movs	r2, #4
 8003f54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f56:	e022      	b.n	8003f9e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334c      	adds	r3, #76	; 0x4c
 8003f68:	2202      	movs	r2, #2
 8003f6a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f82:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f8a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f9e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	334c      	adds	r3, #76	; 0x4c
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f008 fda0 	bl	800cafc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fbc:	e002      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003fc2:	bf00      	nop
  }
}
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b08a      	sub	sp, #40	; 0x28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	0c5b      	lsrs	r3, r3, #17
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d004      	beq.n	8004010 <HCD_RXQLVL_IRQHandler+0x46>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b05      	cmp	r3, #5
 800400a:	f000 80b6 	beq.w	800417a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800400e:	e0b7      	b.n	8004180 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80b3 	beq.w	800417e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	332c      	adds	r3, #44	; 0x2c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80a7 	beq.w	800417e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3338      	adds	r3, #56	; 0x38
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	18d1      	adds	r1, r2, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4403      	add	r3, r0
 8004054:	3334      	adds	r3, #52	; 0x34
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4299      	cmp	r1, r3
 800405a:	f200 8083 	bhi.w	8004164 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	332c      	adds	r3, #44	; 0x2c
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	b292      	uxth	r2, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f002 fed7 	bl	8006e2c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	332c      	adds	r3, #44	; 0x2c
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	18d1      	adds	r1, r2, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4403      	add	r3, r0
 80040a2:	332c      	adds	r3, #44	; 0x2c
 80040a4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3338      	adds	r3, #56	; 0x38
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	18d1      	adds	r1, r2, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4403      	add	r3, r0
 80040ca:	3338      	adds	r3, #56	; 0x38
 80040cc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	0cdb      	lsrs	r3, r3, #19
 80040de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3328      	adds	r3, #40	; 0x28
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d13f      	bne.n	800417e <HCD_RXQLVL_IRQHandler+0x1b4>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d03c      	beq.n	800417e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800411a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004122:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	333c      	adds	r3, #60	; 0x3c
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f083 0301 	eor.w	r3, r3, #1
 800414c:	b2d8      	uxtb	r0, r3
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	333c      	adds	r3, #60	; 0x3c
 800415e:	4602      	mov	r2, r0
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e00c      	b.n	800417e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	334c      	adds	r3, #76	; 0x4c
 8004174:	2204      	movs	r2, #4
 8004176:	701a      	strb	r2, [r3, #0]
      break;
 8004178:	e001      	b.n	800417e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800417e:	bf00      	nop
  }
}
 8004180:	bf00      	nop
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d10b      	bne.n	80041d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f008 fc7a 	bl	800cac4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d132      	bne.n	8004248 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d126      	bne.n	8004242 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7a5b      	ldrb	r3, [r3, #9]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d113      	bne.n	8004224 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004206:	d106      	bne.n	8004216 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f002 ff9c 	bl	800714c <USB_InitFSLSPClkSel>
 8004214:	e011      	b.n	800423a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f002 ff95 	bl	800714c <USB_InitFSLSPClkSel>
 8004222:	e00a      	b.n	800423a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	79db      	ldrb	r3, [r3, #7]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004232:	461a      	mov	r2, r3
 8004234:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004238:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f008 fc70 	bl	800cb20 <HAL_HCD_PortEnabled_Callback>
 8004240:	e002      	b.n	8004248 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f008 fc7a 	bl	800cb3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b20      	cmp	r3, #32
 8004250:	d103      	bne.n	800425a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f043 0320 	orr.w	r3, r3, #32
 8004258:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6013      	str	r3, [r2, #0]
}
 8004266:	bf00      	nop
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e12b      	b.n	80044da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fda6 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d4:	f001 f964 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 80042d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a81      	ldr	r2, [pc, #516]	; (80044e4 <HAL_I2C_Init+0x274>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d807      	bhi.n	80042f4 <HAL_I2C_Init+0x84>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_I2C_Init+0x278>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e006      	b.n	8004302 <HAL_I2C_Init+0x92>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a7d      	ldr	r2, [pc, #500]	; (80044ec <HAL_I2C_Init+0x27c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bf94      	ite	ls
 80042fc:	2301      	movls	r3, #1
 80042fe:	2300      	movhi	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0e7      	b.n	80044da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a78      	ldr	r2, [pc, #480]	; (80044f0 <HAL_I2C_Init+0x280>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0c9b      	lsrs	r3, r3, #18
 8004314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_I2C_Init+0x274>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d802      	bhi.n	8004344 <HAL_I2C_Init+0xd4>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
 8004342:	e009      	b.n	8004358 <HAL_I2C_Init+0xe8>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	4a69      	ldr	r2, [pc, #420]	; (80044f4 <HAL_I2C_Init+0x284>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	3301      	adds	r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	430b      	orrs	r3, r1
 800435e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800436a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	495c      	ldr	r1, [pc, #368]	; (80044e4 <HAL_I2C_Init+0x274>)
 8004374:	428b      	cmp	r3, r1
 8004376:	d819      	bhi.n	80043ac <HAL_I2C_Init+0x13c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e59      	subs	r1, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	fbb1 f3f3 	udiv	r3, r1, r3
 8004386:	1c59      	adds	r1, r3, #1
 8004388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800438c:	400b      	ands	r3, r1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_I2C_Init+0x138>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e59      	subs	r1, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a6:	e051      	b.n	800444c <HAL_I2C_Init+0x1dc>
 80043a8:	2304      	movs	r3, #4
 80043aa:	e04f      	b.n	800444c <HAL_I2C_Init+0x1dc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d111      	bne.n	80043d8 <HAL_I2C_Init+0x168>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e58      	subs	r0, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e012      	b.n	80043fe <HAL_I2C_Init+0x18e>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e58      	subs	r0, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	0099      	lsls	r1, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Init+0x196>
 8004402:	2301      	movs	r3, #1
 8004404:	e022      	b.n	800444c <HAL_I2C_Init+0x1dc>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10e      	bne.n	800442c <HAL_I2C_Init+0x1bc>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1e58      	subs	r0, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	460b      	mov	r3, r1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	440b      	add	r3, r1
 800441c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004420:	3301      	adds	r3, #1
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442a:	e00f      	b.n	800444c <HAL_I2C_Init+0x1dc>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	0099      	lsls	r1, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	6809      	ldr	r1, [r1, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800447a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6911      	ldr	r1, [r2, #16]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	430b      	orrs	r3, r1
 800448e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	000186a0 	.word	0x000186a0
 80044e8:	001e847f 	.word	0x001e847f
 80044ec:	003d08ff 	.word	0x003d08ff
 80044f0:	431bde83 	.word	0x431bde83
 80044f4:	10624dd3 	.word	0x10624dd3

080044f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b20      	cmp	r3, #32
 800450c:	d129      	bne.n	8004562 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2224      	movs	r2, #36	; 0x24
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0210 	bic.w	r2, r2, #16
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b20      	cmp	r3, #32
 8004588:	d12a      	bne.n	80045e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2224      	movs	r2, #36	; 0x24
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045aa:	89fb      	ldrh	r3, [r7, #14]
 80045ac:	f023 030f 	bic.w	r3, r3, #15
 80045b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	89fb      	ldrh	r3, [r7, #14]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	89fa      	ldrh	r2, [r7, #14]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0bf      	b.n	8004782 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fc50 	bl	8000ebc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004632:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004648:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b4a      	ldr	r3, [pc, #296]	; (800478c <HAL_LTDC_Init+0x19c>)
 8004664:	400b      	ands	r3, r1
 8004666:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68d9      	ldr	r1, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b3e      	ldr	r3, [pc, #248]	; (800478c <HAL_LTDC_Init+0x19c>)
 8004692:	400b      	ands	r3, r1
 8004694:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6919      	ldr	r1, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b33      	ldr	r3, [pc, #204]	; (800478c <HAL_LTDC_Init+0x19c>)
 80046c0:	400b      	ands	r3, r1
 80046c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6959      	ldr	r1, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <HAL_LTDC_Init+0x19c>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6959      	ldr	r1, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0206 	orr.w	r2, r2, #6
 800475e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	f000f800 	.word	0xf000f800

08004790 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d023      	beq.n	80047fa <HAL_LTDC_IRQHandler+0x6a>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01e      	beq.n	80047fa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2204      	movs	r2, #4
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2204      	movs	r2, #4
 80047e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f86f 	bl	80048d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d023      	beq.n	800484c <HAL_LTDC_IRQHandler+0xbc>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01e      	beq.n	800484c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0202 	bic.w	r2, r2, #2
 800481c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800482c:	f043 0202 	orr.w	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2204      	movs	r2, #4
 800483a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f846 	bl	80048d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01b      	beq.n	800488e <HAL_LTDC_IRQHandler+0xfe>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d016      	beq.n	800488e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f82f 	bl	80048ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_LTDC_IRQHandler+0x140>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0208 	bic.w	r2, r2, #8
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2208      	movs	r2, #8
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f818 	bl	8004900 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004914:	b5b0      	push	{r4, r5, r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_LTDC_ConfigLayer+0x1a>
 800492a:	2302      	movs	r3, #2
 800492c:	e02c      	b.n	8004988 <HAL_LTDC_ConfigLayer+0x74>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2134      	movs	r1, #52	; 0x34
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800495c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f811 	bl	8004990 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bdb0      	pop	{r4, r5, r7, pc}

08004990 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	4413      	add	r3, r2
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4413      	add	r3, r2
 80049be:	3384      	adds	r3, #132	; 0x84
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	4611      	mov	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	01d2      	lsls	r2, r2, #7
 80049cc:	440a      	add	r2, r1
 80049ce:	3284      	adds	r2, #132	; 0x84
 80049d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049e6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049e8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	440b      	add	r3, r1
 80049f6:	3384      	adds	r3, #132	; 0x84
 80049f8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a0e:	4413      	add	r3, r2
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	01db      	lsls	r3, r3, #7
 8004a1e:	4413      	add	r3, r2
 8004a20:	3384      	adds	r3, #132	; 0x84
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	01d2      	lsls	r2, r2, #7
 8004a2e:	440a      	add	r2, r1
 8004a30:	3284      	adds	r2, #132	; 0x84
 8004a32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a46:	4413      	add	r3, r2
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	440b      	add	r3, r1
 8004a56:	3384      	adds	r3, #132	; 0x84
 8004a58:	4619      	mov	r1, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	01db      	lsls	r3, r3, #7
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3384      	adds	r3, #132	; 0x84
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	4611      	mov	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	01d2      	lsls	r2, r2, #7
 8004a7a:	440a      	add	r2, r1
 8004a7c:	3284      	adds	r2, #132	; 0x84
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
 8004a82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	; 0x84
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3384      	adds	r3, #132	; 0x84
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3384      	adds	r3, #132	; 0x84
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	440b      	add	r3, r1
 8004af6:	3384      	adds	r3, #132	; 0x84
 8004af8:	4619      	mov	r1, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3384      	adds	r3, #132	; 0x84
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4611      	mov	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	01d2      	lsls	r2, r2, #7
 8004b1a:	440a      	add	r2, r1
 8004b1c:	3284      	adds	r2, #132	; 0x84
 8004b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	4413      	add	r3, r2
 8004b30:	3384      	adds	r3, #132	; 0x84
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	4413      	add	r3, r2
 8004b46:	3384      	adds	r3, #132	; 0x84
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	01d2      	lsls	r2, r2, #7
 8004b54:	440a      	add	r2, r1
 8004b56:	3284      	adds	r2, #132	; 0x84
 8004b58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b5c:	f023 0307 	bic.w	r3, r3, #7
 8004b60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	6809      	ldr	r1, [r1, #0]
 8004b6e:	4608      	mov	r0, r1
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	01c9      	lsls	r1, r1, #7
 8004b74:	4401      	add	r1, r0
 8004b76:	3184      	adds	r1, #132	; 0x84
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	01db      	lsls	r3, r3, #7
 8004b86:	4413      	add	r3, r2
 8004b88:	3384      	adds	r3, #132	; 0x84
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	01db      	lsls	r3, r3, #7
 8004b96:	4413      	add	r3, r2
 8004b98:	3384      	adds	r3, #132	; 0x84
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	3384      	adds	r3, #132	; 0x84
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e01b      	b.n	8004bfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	e014      	b.n	8004bfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00b      	beq.n	8004bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d007      	beq.n	8004bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d003      	beq.n	8004bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bee:	2b07      	cmp	r3, #7
 8004bf0:	d102      	bne.n	8004bf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e001      	b.n	8004bfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	01db      	lsls	r3, r3, #7
 8004c06:	4413      	add	r3, r2
 8004c08:	3384      	adds	r3, #132	; 0x84
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	4611      	mov	r1, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	01d2      	lsls	r2, r2, #7
 8004c16:	440a      	add	r2, r1
 8004c18:	3284      	adds	r2, #132	; 0x84
 8004c1a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1acb      	subs	r3, r1, r3
 8004c36:	69f9      	ldr	r1, [r7, #28]
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	6809      	ldr	r1, [r1, #0]
 8004c42:	4608      	mov	r0, r1
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	01c9      	lsls	r1, r1, #7
 8004c48:	4401      	add	r1, r0
 8004c4a:	3184      	adds	r1, #132	; 0x84
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	01db      	lsls	r3, r3, #7
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3384      	adds	r3, #132	; 0x84
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	4611      	mov	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	01d2      	lsls	r2, r2, #7
 8004c6a:	440a      	add	r2, r1
 8004c6c:	3284      	adds	r2, #132	; 0x84
 8004c6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	01db      	lsls	r3, r3, #7
 8004c82:	4413      	add	r3, r2
 8004c84:	3384      	adds	r3, #132	; 0x84
 8004c86:	461a      	mov	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4413      	add	r3, r2
 8004c9a:	3384      	adds	r3, #132	; 0x84
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	01d2      	lsls	r2, r2, #7
 8004ca8:	440a      	add	r2, r1
 8004caa:	3284      	adds	r2, #132	; 0x84
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e267      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d075      	beq.n	8004dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cde:	4b88      	ldr	r3, [pc, #544]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d00c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cea:	4b85      	ldr	r3, [pc, #532]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d112      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cf6:	4b82      	ldr	r3, [pc, #520]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d02:	d10b      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	4b7e      	ldr	r3, [pc, #504]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05b      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x108>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d157      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e242      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d106      	bne.n	8004d34 <HAL_RCC_OscConfig+0x74>
 8004d26:	4b76      	ldr	r3, [pc, #472]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a75      	ldr	r2, [pc, #468]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e01d      	b.n	8004d70 <HAL_RCC_OscConfig+0xb0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x98>
 8004d3e:	4b70      	ldr	r3, [pc, #448]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a6f      	ldr	r2, [pc, #444]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b6d      	ldr	r3, [pc, #436]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6c      	ldr	r2, [pc, #432]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0xb0>
 8004d58:	4b69      	ldr	r3, [pc, #420]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a68      	ldr	r2, [pc, #416]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b66      	ldr	r3, [pc, #408]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a65      	ldr	r2, [pc, #404]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fc fc80 	bl	800167c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fc fc7c 	bl	800167c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e207      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d92:	4b5b      	ldr	r3, [pc, #364]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0xc0>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fc fc6c 	bl	800167c <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fc fc68 	bl	800167c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	; 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e1f3      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dba:	4b51      	ldr	r3, [pc, #324]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0xe8>
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d063      	beq.n	8004e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d11c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dee:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d116      	bne.n	8004e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfa:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_RCC_OscConfig+0x152>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e1c7      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4937      	ldr	r1, [pc, #220]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e26:	e03a      	b.n	8004e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e30:	4b34      	ldr	r3, [pc, #208]	; (8004f04 <HAL_RCC_OscConfig+0x244>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fc21 	bl	800167c <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fc fc1d 	bl	800167c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e1a8      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4925      	ldr	r1, [pc, #148]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
 8004e70:	e015      	b.n	8004e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <HAL_RCC_OscConfig+0x244>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fc fc00 	bl	800167c <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fc fbfc 	bl	800167c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e187      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e92:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d036      	beq.n	8004f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <HAL_RCC_OscConfig+0x248>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc fbe0 	bl	800167c <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fc fbdc 	bl	800167c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e167      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x200>
 8004ede:	e01b      	b.n	8004f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_OscConfig+0x248>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fc fbc9 	bl	800167c <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	e00e      	b.n	8004f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eee:	f7fc fbc5 	bl	800167c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d907      	bls.n	8004f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e150      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
 8004f00:	40023800 	.word	0x40023800
 8004f04:	42470000 	.word	0x42470000
 8004f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	4b88      	ldr	r3, [pc, #544]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ea      	bne.n	8004eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8097 	beq.w	8005054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2a:	4b81      	ldr	r3, [pc, #516]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10f      	bne.n	8004f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	4b7d      	ldr	r3, [pc, #500]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a7c      	ldr	r2, [pc, #496]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b7a      	ldr	r3, [pc, #488]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b77      	ldr	r3, [pc, #476]	; (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f62:	4b74      	ldr	r3, [pc, #464]	; (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a73      	ldr	r2, [pc, #460]	; (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fc fb85 	bl	800167c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fc fb81 	bl	800167c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e10c      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b6a      	ldr	r3, [pc, #424]	; (8005134 <HAL_RCC_OscConfig+0x474>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x2ea>
 8004f9c:	4b64      	ldr	r3, [pc, #400]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	4a63      	ldr	r2, [pc, #396]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa8:	e01c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x324>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x30c>
 8004fb2:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	4a5e      	ldr	r2, [pc, #376]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbe:	4b5c      	ldr	r3, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x324>
 8004fcc:	4b58      	ldr	r3, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	4a57      	ldr	r2, [pc, #348]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd8:	4b55      	ldr	r3, [pc, #340]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a54      	ldr	r2, [pc, #336]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8004fde:	f023 0304 	bic.w	r3, r3, #4
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d015      	beq.n	8005018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fc fb46 	bl	800167c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fc fb42 	bl	800167c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0cb      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500a:	4b49      	ldr	r3, [pc, #292]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ee      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x334>
 8005016:	e014      	b.n	8005042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005018:	f7fc fb30 	bl	800167c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fc fb2c 	bl	800167c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0b5      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005036:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1ee      	bne.n	8005020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005048:	4b39      	ldr	r3, [pc, #228]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	4a38      	ldr	r2, [pc, #224]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80a1 	beq.w	80051a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800505e:	4b34      	ldr	r3, [pc, #208]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b08      	cmp	r3, #8
 8005068:	d05c      	beq.n	8005124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d141      	bne.n	80050f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b31      	ldr	r3, [pc, #196]	; (8005138 <HAL_RCC_OscConfig+0x478>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fc fb00 	bl	800167c <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fc fafc 	bl	800167c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e087      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	3b01      	subs	r3, #1
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	491b      	ldr	r1, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_RCC_OscConfig+0x478>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fc fad5 	bl	800167c <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fc fad1 	bl	800167c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e05c      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e8:	4b11      	ldr	r3, [pc, #68]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x416>
 80050f4:	e054      	b.n	80051a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_RCC_OscConfig+0x478>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fc fabe 	bl	800167c <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005104:	f7fc faba 	bl	800167c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e045      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCC_OscConfig+0x470>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x444>
 8005122:	e03d      	b.n	80051a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d107      	bne.n	800513c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e038      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000
 8005138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <HAL_RCC_OscConfig+0x4ec>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d028      	beq.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d121      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d11a      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005174:	4293      	cmp	r3, r2
 8005176:	d111      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	3b01      	subs	r3, #1
 8005186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d107      	bne.n	800519c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800

080051b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0cc      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051c4:	4b68      	ldr	r3, [pc, #416]	; (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d90c      	bls.n	80051ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b65      	ldr	r3, [pc, #404]	; (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b63      	ldr	r3, [pc, #396]	; (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0b8      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d020      	beq.n	800523a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a58      	ldr	r2, [pc, #352]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800520e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800521c:	4b53      	ldr	r3, [pc, #332]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a52      	ldr	r2, [pc, #328]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005228:	4b50      	ldr	r3, [pc, #320]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	494d      	ldr	r1, [pc, #308]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d044      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d119      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e07f      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d003      	beq.n	800526e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800526a:	2b03      	cmp	r3, #3
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	4b3f      	ldr	r3, [pc, #252]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e06f      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527e:	4b3b      	ldr	r3, [pc, #236]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e067      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800528e:	4b37      	ldr	r3, [pc, #220]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f023 0203 	bic.w	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4934      	ldr	r1, [pc, #208]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052a0:	f7fc f9ec 	bl	800167c <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	e00a      	b.n	80052be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a8:	f7fc f9e8 	bl	800167c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e04f      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052be:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 020c 	and.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d1eb      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052d0:	4b25      	ldr	r3, [pc, #148]	; (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d20c      	bcs.n	80052f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b22      	ldr	r3, [pc, #136]	; (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e032      	b.n	800535e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4916      	ldr	r1, [pc, #88]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	490e      	ldr	r1, [pc, #56]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005336:	f000 f821 	bl	800537c <HAL_RCC_GetSysClockFreq>
 800533a:	4602      	mov	r2, r0
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	490a      	ldr	r1, [pc, #40]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	5ccb      	ldrb	r3, [r1, r3]
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	4a09      	ldr	r2, [pc, #36]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_ClockConfig+0x1c8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc f82e 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40023c00 	.word	0x40023c00
 800536c:	40023800 	.word	0x40023800
 8005370:	0800d290 	.word	0x0800d290
 8005374:	20000000 	.word	0x20000000
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800537c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005380:	b094      	sub	sp, #80	; 0x50
 8005382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
 8005388:	2300      	movs	r3, #0
 800538a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800538c:	2300      	movs	r3, #0
 800538e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005394:	4b79      	ldr	r3, [pc, #484]	; (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	2b08      	cmp	r3, #8
 800539e:	d00d      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x40>
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	f200 80e1 	bhi.w	8005568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x34>
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ae:	e0db      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4b73      	ldr	r3, [pc, #460]	; (8005580 <HAL_RCC_GetSysClockFreq+0x204>)
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80053b4:	e0db      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053b6:	4b73      	ldr	r3, [pc, #460]	; (8005584 <HAL_RCC_GetSysClockFreq+0x208>)
 80053b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053ba:	e0d8      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053bc:	4b6f      	ldr	r3, [pc, #444]	; (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053c6:	4b6d      	ldr	r3, [pc, #436]	; (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d063      	beq.n	800549a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d2:	4b6a      	ldr	r3, [pc, #424]	; (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	2200      	movs	r2, #0
 80053da:	63bb      	str	r3, [r7, #56]	; 0x38
 80053dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
 80053e6:	2300      	movs	r3, #0
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	0159      	lsls	r1, r3, #5
 80053fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005400:	0150      	lsls	r0, r2, #5
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4621      	mov	r1, r4
 8005408:	1a51      	subs	r1, r2, r1
 800540a:	6139      	str	r1, [r7, #16]
 800540c:	4629      	mov	r1, r5
 800540e:	eb63 0301 	sbc.w	r3, r3, r1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005420:	4659      	mov	r1, fp
 8005422:	018b      	lsls	r3, r1, #6
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800542a:	4651      	mov	r1, sl
 800542c:	018a      	lsls	r2, r1, #6
 800542e:	4651      	mov	r1, sl
 8005430:	ebb2 0801 	subs.w	r8, r2, r1
 8005434:	4659      	mov	r1, fp
 8005436:	eb63 0901 	sbc.w	r9, r3, r1
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800544a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800544e:	4690      	mov	r8, r2
 8005450:	4699      	mov	r9, r3
 8005452:	4623      	mov	r3, r4
 8005454:	eb18 0303 	adds.w	r3, r8, r3
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	462b      	mov	r3, r5
 800545c:	eb49 0303 	adc.w	r3, r9, r3
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800546e:	4629      	mov	r1, r5
 8005470:	024b      	lsls	r3, r1, #9
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005478:	4621      	mov	r1, r4
 800547a:	024a      	lsls	r2, r1, #9
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005482:	2200      	movs	r2, #0
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800548c:	f7fa feb0 	bl	80001f0 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005498:	e058      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549a:	4b38      	ldr	r3, [pc, #224]	; (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	2200      	movs	r2, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	4611      	mov	r1, r2
 80054a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	2300      	movs	r3, #0
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	f04f 0000 	mov.w	r0, #0
 80054bc:	f04f 0100 	mov.w	r1, #0
 80054c0:	0159      	lsls	r1, r3, #5
 80054c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c6:	0150      	lsls	r0, r2, #5
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4641      	mov	r1, r8
 80054ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80054d2:	4649      	mov	r1, r9
 80054d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054ec:	ebb2 040a 	subs.w	r4, r2, sl
 80054f0:	eb63 050b 	sbc.w	r5, r3, fp
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	00eb      	lsls	r3, r5, #3
 80054fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005502:	00e2      	lsls	r2, r4, #3
 8005504:	4614      	mov	r4, r2
 8005506:	461d      	mov	r5, r3
 8005508:	4643      	mov	r3, r8
 800550a:	18e3      	adds	r3, r4, r3
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	464b      	mov	r3, r9
 8005510:	eb45 0303 	adc.w	r3, r5, r3
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005522:	4629      	mov	r1, r5
 8005524:	028b      	lsls	r3, r1, #10
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800552c:	4621      	mov	r1, r4
 800552e:	028a      	lsls	r2, r1, #10
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005536:	2200      	movs	r2, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	61fa      	str	r2, [r7, #28]
 800553c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005540:	f7fa fe56 	bl	80001f0 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCC_GetSysClockFreq+0x200>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	3301      	adds	r3, #1
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800555c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800555e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005566:	e002      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCC_GetSysClockFreq+0x204>)
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800556c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800556e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005570:	4618      	mov	r0, r3
 8005572:	3750      	adds	r7, #80	; 0x50
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800
 8005580:	00f42400 	.word	0x00f42400
 8005584:	007a1200 	.word	0x007a1200

08005588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <HAL_RCC_GetHCLKFreq+0x14>)
 800558e:	681b      	ldr	r3, [r3, #0]
}
 8005590:	4618      	mov	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000000 	.word	0x20000000

080055a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055a4:	f7ff fff0 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0a9b      	lsrs	r3, r3, #10
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4903      	ldr	r1, [pc, #12]	; (80055c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40023800 	.word	0x40023800
 80055c4:	0800d2a0 	.word	0x0800d2a0

080055c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055cc:	f7ff ffdc 	bl	8005588 <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	0b5b      	lsrs	r3, r3, #13
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4903      	ldr	r1, [pc, #12]	; (80055ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40023800 	.word	0x40023800
 80055ec:	0800d2a0 	.word	0x0800d2a0

080055f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	220f      	movs	r2, #15
 80055fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005600:	4b12      	ldr	r3, [pc, #72]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0203 	and.w	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <HAL_RCC_GetClockConfig+0x60>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	601a      	str	r2, [r3, #0]
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	40023c00 	.word	0x40023c00

08005654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005684:	2b00      	cmp	r3, #0
 8005686:	d075      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005688:	4b91      	ldr	r3, [pc, #580]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800568e:	f7fb fff5 	bl	800167c <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005696:	f7fb fff1 	bl	800167c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e189      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a8:	4b8a      	ldr	r3, [pc, #552]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	019a      	lsls	r2, r3, #6
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	4981      	ldr	r1, [pc, #516]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01f      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056e0:	4b7c      	ldr	r3, [pc, #496]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e6:	0f1b      	lsrs	r3, r3, #28
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	019a      	lsls	r2, r3, #6
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	431a      	orrs	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	071b      	lsls	r3, r3, #28
 8005700:	4974      	ldr	r1, [pc, #464]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005708:	4b72      	ldr	r3, [pc, #456]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570e:	f023 021f 	bic.w	r2, r3, #31
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	3b01      	subs	r3, #1
 8005718:	496e      	ldr	r1, [pc, #440]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	019a      	lsls	r2, r3, #6
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	071b      	lsls	r3, r3, #28
 8005740:	4964      	ldr	r1, [pc, #400]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005748:	4b61      	ldr	r3, [pc, #388]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800574e:	f7fb ff95 	bl	800167c <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005756:	f7fb ff91 	bl	800167c <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e129      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005768:	4b5a      	ldr	r3, [pc, #360]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005788:	2b00      	cmp	r3, #0
 800578a:	d079      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800578c:	4b52      	ldr	r3, [pc, #328]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005792:	f7fb ff73 	bl	800167c <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800579a:	f7fb ff6f 	bl	800167c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e107      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ac:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b8:	d0ef      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d020      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057c6:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	0f1b      	lsrs	r3, r3, #28
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	019a      	lsls	r2, r3, #6
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	431a      	orrs	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	071b      	lsls	r3, r3, #28
 80057e6:	493b      	ldr	r1, [pc, #236]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057ee:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	4934      	ldr	r1, [pc, #208]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01e      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005814:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	0e1b      	lsrs	r3, r3, #24
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	019a      	lsls	r2, r3, #6
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	071b      	lsls	r3, r3, #28
 8005834:	4927      	ldr	r1, [pc, #156]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800583c:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	4922      	ldr	r1, [pc, #136]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005852:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005858:	f7fb ff10 	bl	800167c <HAL_GetTick>
 800585c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005860:	f7fb ff0c 	bl	800167c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e0a4      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005872:	4b18      	ldr	r3, [pc, #96]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800587a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587e:	d1ef      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 808b 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	4a0f      	ldr	r2, [pc, #60]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
 800589e:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a0b      	ldr	r2, [pc, #44]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058b6:	f7fb fee1 	bl	800167c <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058bc:	e010      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fb fedd 	bl	800167c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d909      	bls.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e075      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80058d0:	42470068 	.word	0x42470068
 80058d4:	40023800 	.word	0x40023800
 80058d8:	42470070 	.word	0x42470070
 80058dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058e0:	4b38      	ldr	r3, [pc, #224]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0e8      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ec:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	429a      	cmp	r2, r3
 8005908:	d028      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800590a:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800591a:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005920:	4a29      	ldr	r2, [pc, #164]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d114      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005932:	f7fb fea3 	bl	800167c <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005938:	e00a      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7fb fe9f 	bl	800167c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e035      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ee      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005968:	d10d      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800596a:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800597a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597e:	4912      	ldr	r1, [pc, #72]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]
 8005984:	e005      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800598c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005990:	6093      	str	r3, [r2, #8]
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599e:	490a      	ldr	r1, [pc, #40]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40007000 	.word	0x40007000
 80059c8:	40023800 	.word	0x40023800
 80059cc:	42470e40 	.word	0x42470e40
 80059d0:	424711e0 	.word	0x424711e0

080059d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e025      	b.n	8005a34 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fb fcd1 	bl	80013a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f000 ffd3 	bl	80069c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	461a      	mov	r2, r3
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	f001 f828 	bl	8006a7a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07b      	b.n	8005b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5e:	d009      	beq.n	8005a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]
 8005a66:	e005      	b.n	8005a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fb fb44 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	ea42 0103 	orr.w	r1, r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f003 0104 	and.w	r1, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	f003 0210 	and.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e041      	b.n	8005be4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb fb19 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f000 fa7d 	bl	800608c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e04e      	b.n	8005ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d01d      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d111      	bne.n	8005c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d010      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	e007      	b.n	8005ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40001800 	.word	0x40001800

08005ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0202 	mvn.w	r2, #2
 8005d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f999 	bl	800604e <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f98b 	bl	800603a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f99c 	bl	8006062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d020      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0204 	mvn.w	r2, #4
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f973 	bl	800604e <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f965 	bl	800603a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f976 	bl	8006062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d020      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0208 	mvn.w	r2, #8
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f94d 	bl	800604e <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f93f 	bl	800603a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f950 	bl	8006062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d020      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01b      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0210 	mvn.w	r2, #16
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2208      	movs	r2, #8
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f927 	bl	800604e <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f919 	bl	800603a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f92a 	bl	8006062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0201 	mvn.w	r2, #1
 8005e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fa ff4a 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fae4 	bl	8006424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00c      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8fb 	bl	8006076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0220 	mvn.w	r2, #32
 8005e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fab6 	bl	8006410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e0b4      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x186>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d03e      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0xd4>
 8005f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f06:	f200 8087 	bhi.w	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	f000 8086 	beq.w	800601e <HAL_TIM_ConfigClockSource+0x172>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d87f      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b70      	cmp	r3, #112	; 0x70
 8005f1a:	d01a      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0xa6>
 8005f1c:	2b70      	cmp	r3, #112	; 0x70
 8005f1e:	d87b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b60      	cmp	r3, #96	; 0x60
 8005f22:	d050      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f24:	2b60      	cmp	r3, #96	; 0x60
 8005f26:	d877      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b50      	cmp	r3, #80	; 0x50
 8005f2a:	d03c      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f2c:	2b50      	cmp	r3, #80	; 0x50
 8005f2e:	d873      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d058      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d86f      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b30      	cmp	r3, #48	; 0x30
 8005f3a:	d064      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f3c:	2b30      	cmp	r3, #48	; 0x30
 8005f3e:	d86b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d060      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d867      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d05c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d05a      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x15a>
 8005f50:	e062      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f62:	f000 f9b9 	bl	80062d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	609a      	str	r2, [r3, #8]
      break;
 8005f7e:	e04f      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f90:	f000 f9a2 	bl	80062d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fa2:	609a      	str	r2, [r3, #8]
      break;
 8005fa4:	e03c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f000 f916 	bl	80061e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2150      	movs	r1, #80	; 0x50
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f96f 	bl	80062a2 <TIM_ITRx_SetConfig>
      break;
 8005fc4:	e02c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f000 f935 	bl	8006242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2160      	movs	r1, #96	; 0x60
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f95f 	bl	80062a2 <TIM_ITRx_SetConfig>
      break;
 8005fe4:	e01c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f000 f8f6 	bl	80061e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2140      	movs	r1, #64	; 0x40
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f94f 	bl	80062a2 <TIM_ITRx_SetConfig>
      break;
 8006004:	e00c      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f000 f946 	bl	80062a2 <TIM_ITRx_SetConfig>
      break;
 8006016:	e003      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
      break;
 800601c:	e000      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800601e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a46      	ldr	r2, [pc, #280]	; (80061b8 <TIM_Base_SetConfig+0x12c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060aa:	d00f      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a43      	ldr	r2, [pc, #268]	; (80061bc <TIM_Base_SetConfig+0x130>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00b      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a42      	ldr	r2, [pc, #264]	; (80061c0 <TIM_Base_SetConfig+0x134>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a41      	ldr	r2, [pc, #260]	; (80061c4 <TIM_Base_SetConfig+0x138>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_Base_SetConfig+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a40      	ldr	r2, [pc, #256]	; (80061c8 <TIM_Base_SetConfig+0x13c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <TIM_Base_SetConfig+0x12c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d02b      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d027      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a32      	ldr	r2, [pc, #200]	; (80061bc <TIM_Base_SetConfig+0x130>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d023      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a31      	ldr	r2, [pc, #196]	; (80061c0 <TIM_Base_SetConfig+0x134>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01f      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <TIM_Base_SetConfig+0x138>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01b      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <TIM_Base_SetConfig+0x13c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d017      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2e      	ldr	r2, [pc, #184]	; (80061cc <TIM_Base_SetConfig+0x140>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2d      	ldr	r2, [pc, #180]	; (80061d0 <TIM_Base_SetConfig+0x144>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <TIM_Base_SetConfig+0x148>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2b      	ldr	r2, [pc, #172]	; (80061d8 <TIM_Base_SetConfig+0x14c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2a      	ldr	r2, [pc, #168]	; (80061dc <TIM_Base_SetConfig+0x150>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a29      	ldr	r2, [pc, #164]	; (80061e0 <TIM_Base_SetConfig+0x154>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d108      	bne.n	8006150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <TIM_Base_SetConfig+0x12c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_Base_SetConfig+0xf8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <TIM_Base_SetConfig+0x13c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d103      	bne.n	800618c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d105      	bne.n	80061aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f023 0201 	bic.w	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	611a      	str	r2, [r3, #16]
  }
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40010400 	.word	0x40010400
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800
 80061d8:	40001800 	.word	0x40001800
 80061dc:	40001c00 	.word	0x40001c00
 80061e0:	40002000 	.word	0x40002000

080061e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f023 0201 	bic.w	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800620e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 030a 	bic.w	r3, r3, #10
 8006220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006242:	b480      	push	{r7}
 8006244:	b087      	sub	sp, #28
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0210 	bic.w	r2, r3, #16
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800626c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	031b      	lsls	r3, r3, #12
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800627e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	f043 0307 	orr.w	r3, r3, #7
 80062c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	609a      	str	r2, [r3, #8]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	021a      	lsls	r2, r3, #8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4313      	orrs	r3, r2
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	609a      	str	r2, [r3, #8]
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e05a      	b.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d022      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d01d      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d018      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a17      	ldr	r2, [pc, #92]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10c      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40000c00 	.word	0x40000c00
 8006404:	40010400 	.word	0x40010400
 8006408:	40014000 	.word	0x40014000
 800640c:	40001800 	.word	0x40001800

08006410 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e042      	b.n	80064d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fa fec6 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2224      	movs	r2, #36	; 0x24
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f82b 	bl	80064d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064dc:	b0c0      	sub	sp, #256	; 0x100
 80064de:	af00      	add	r7, sp, #0
 80064e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	ea40 0301 	orr.w	r3, r0, r1
 8006500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	431a      	orrs	r2, r3
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	431a      	orrs	r2, r3
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006530:	f021 010c 	bic.w	r1, r1, #12
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800653e:	430b      	orrs	r3, r1
 8006540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006552:	6999      	ldr	r1, [r3, #24]
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	ea40 0301 	orr.w	r3, r0, r1
 800655e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b8f      	ldr	r3, [pc, #572]	; (80067a4 <UART_SetConfig+0x2cc>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d005      	beq.n	8006578 <UART_SetConfig+0xa0>
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b8d      	ldr	r3, [pc, #564]	; (80067a8 <UART_SetConfig+0x2d0>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d104      	bne.n	8006582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006578:	f7ff f826 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 800657c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006580:	e003      	b.n	800658a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006582:	f7ff f80d 	bl	80055a0 <HAL_RCC_GetPCLK1Freq>
 8006586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006594:	f040 810c 	bne.w	80067b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065aa:	4622      	mov	r2, r4
 80065ac:	462b      	mov	r3, r5
 80065ae:	1891      	adds	r1, r2, r2
 80065b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065b2:	415b      	adcs	r3, r3
 80065b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ba:	4621      	mov	r1, r4
 80065bc:	eb12 0801 	adds.w	r8, r2, r1
 80065c0:	4629      	mov	r1, r5
 80065c2:	eb43 0901 	adc.w	r9, r3, r1
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065da:	4690      	mov	r8, r2
 80065dc:	4699      	mov	r9, r3
 80065de:	4623      	mov	r3, r4
 80065e0:	eb18 0303 	adds.w	r3, r8, r3
 80065e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e8:	462b      	mov	r3, r5
 80065ea:	eb49 0303 	adc.w	r3, r9, r3
 80065ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006606:	460b      	mov	r3, r1
 8006608:	18db      	adds	r3, r3, r3
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
 800660c:	4613      	mov	r3, r2
 800660e:	eb42 0303 	adc.w	r3, r2, r3
 8006612:	657b      	str	r3, [r7, #84]	; 0x54
 8006614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800661c:	f7f9 fde8 	bl	80001f0 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4b61      	ldr	r3, [pc, #388]	; (80067ac <UART_SetConfig+0x2d4>)
 8006626:	fba3 2302 	umull	r2, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	011c      	lsls	r4, r3, #4
 800662e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800663c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	1891      	adds	r1, r2, r2
 8006646:	64b9      	str	r1, [r7, #72]	; 0x48
 8006648:	415b      	adcs	r3, r3
 800664a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800664c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006650:	4641      	mov	r1, r8
 8006652:	eb12 0a01 	adds.w	sl, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0b01 	adc.w	fp, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800666c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006670:	4692      	mov	sl, r2
 8006672:	469b      	mov	fp, r3
 8006674:	4643      	mov	r3, r8
 8006676:	eb1a 0303 	adds.w	r3, sl, r3
 800667a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667e:	464b      	mov	r3, r9
 8006680:	eb4b 0303 	adc.w	r3, fp, r3
 8006684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800669c:	460b      	mov	r3, r1
 800669e:	18db      	adds	r3, r3, r3
 80066a0:	643b      	str	r3, [r7, #64]	; 0x40
 80066a2:	4613      	mov	r3, r2
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
 80066aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066b2:	f7f9 fd9d 	bl	80001f0 <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <UART_SetConfig+0x2d4>)
 80066be:	fba3 2301 	umull	r2, r3, r3, r1
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2264      	movs	r2, #100	; 0x64
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	1acb      	subs	r3, r1, r3
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066d2:	4b36      	ldr	r3, [pc, #216]	; (80067ac <UART_SetConfig+0x2d4>)
 80066d4:	fba3 2302 	umull	r2, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066e0:	441c      	add	r4, r3
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	1891      	adds	r1, r2, r2
 80066fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80066fc:	415b      	adcs	r3, r3
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006704:	4641      	mov	r1, r8
 8006706:	1851      	adds	r1, r2, r1
 8006708:	6339      	str	r1, [r7, #48]	; 0x30
 800670a:	4649      	mov	r1, r9
 800670c:	414b      	adcs	r3, r1
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800671c:	4659      	mov	r1, fp
 800671e:	00cb      	lsls	r3, r1, #3
 8006720:	4651      	mov	r1, sl
 8006722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006726:	4651      	mov	r1, sl
 8006728:	00ca      	lsls	r2, r1, #3
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	4603      	mov	r3, r0
 8006730:	4642      	mov	r2, r8
 8006732:	189b      	adds	r3, r3, r2
 8006734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006738:	464b      	mov	r3, r9
 800673a:	460a      	mov	r2, r1
 800673c:	eb42 0303 	adc.w	r3, r2, r3
 8006740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006758:	460b      	mov	r3, r1
 800675a:	18db      	adds	r3, r3, r3
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
 800675e:	4613      	mov	r3, r2
 8006760:	eb42 0303 	adc.w	r3, r2, r3
 8006764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800676a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800676e:	f7f9 fd3f 	bl	80001f0 <__aeabi_uldivmod>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <UART_SetConfig+0x2d4>)
 8006778:	fba3 1302 	umull	r1, r3, r3, r2
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	2164      	movs	r1, #100	; 0x64
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	3332      	adds	r3, #50	; 0x32
 800678a:	4a08      	ldr	r2, [pc, #32]	; (80067ac <UART_SetConfig+0x2d4>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f003 0207 	and.w	r2, r3, #7
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4422      	add	r2, r4
 800679e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067a0:	e106      	b.n	80069b0 <UART_SetConfig+0x4d8>
 80067a2:	bf00      	nop
 80067a4:	40011000 	.word	0x40011000
 80067a8:	40011400 	.word	0x40011400
 80067ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067c2:	4642      	mov	r2, r8
 80067c4:	464b      	mov	r3, r9
 80067c6:	1891      	adds	r1, r2, r2
 80067c8:	6239      	str	r1, [r7, #32]
 80067ca:	415b      	adcs	r3, r3
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
 80067ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067d2:	4641      	mov	r1, r8
 80067d4:	1854      	adds	r4, r2, r1
 80067d6:	4649      	mov	r1, r9
 80067d8:	eb43 0501 	adc.w	r5, r3, r1
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	00eb      	lsls	r3, r5, #3
 80067e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ea:	00e2      	lsls	r2, r4, #3
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	4643      	mov	r3, r8
 80067f2:	18e3      	adds	r3, r4, r3
 80067f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067f8:	464b      	mov	r3, r9
 80067fa:	eb45 0303 	adc.w	r3, r5, r3
 80067fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800680e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800681e:	4629      	mov	r1, r5
 8006820:	008b      	lsls	r3, r1, #2
 8006822:	4621      	mov	r1, r4
 8006824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006828:	4621      	mov	r1, r4
 800682a:	008a      	lsls	r2, r1, #2
 800682c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006830:	f7f9 fcde 	bl	80001f0 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4b60      	ldr	r3, [pc, #384]	; (80069bc <UART_SetConfig+0x4e4>)
 800683a:	fba3 2302 	umull	r2, r3, r3, r2
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	011c      	lsls	r4, r3, #4
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800684c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006854:	4642      	mov	r2, r8
 8006856:	464b      	mov	r3, r9
 8006858:	1891      	adds	r1, r2, r2
 800685a:	61b9      	str	r1, [r7, #24]
 800685c:	415b      	adcs	r3, r3
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006864:	4641      	mov	r1, r8
 8006866:	1851      	adds	r1, r2, r1
 8006868:	6139      	str	r1, [r7, #16]
 800686a:	4649      	mov	r1, r9
 800686c:	414b      	adcs	r3, r1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800687c:	4659      	mov	r1, fp
 800687e:	00cb      	lsls	r3, r1, #3
 8006880:	4651      	mov	r1, sl
 8006882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006886:	4651      	mov	r1, sl
 8006888:	00ca      	lsls	r2, r1, #3
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	4603      	mov	r3, r0
 8006890:	4642      	mov	r2, r8
 8006892:	189b      	adds	r3, r3, r2
 8006894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006898:	464b      	mov	r3, r9
 800689a:	460a      	mov	r2, r1
 800689c:	eb42 0303 	adc.w	r3, r2, r3
 80068a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068bc:	4649      	mov	r1, r9
 80068be:	008b      	lsls	r3, r1, #2
 80068c0:	4641      	mov	r1, r8
 80068c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c6:	4641      	mov	r1, r8
 80068c8:	008a      	lsls	r2, r1, #2
 80068ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068ce:	f7f9 fc8f 	bl	80001f0 <__aeabi_uldivmod>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	4b38      	ldr	r3, [pc, #224]	; (80069bc <UART_SetConfig+0x4e4>)
 80068da:	fba3 2301 	umull	r2, r3, r3, r1
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2264      	movs	r2, #100	; 0x64
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	1acb      	subs	r3, r1, r3
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	3332      	adds	r3, #50	; 0x32
 80068ec:	4a33      	ldr	r2, [pc, #204]	; (80069bc <UART_SetConfig+0x4e4>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f8:	441c      	add	r4, r3
 80068fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068fe:	2200      	movs	r2, #0
 8006900:	673b      	str	r3, [r7, #112]	; 0x70
 8006902:	677a      	str	r2, [r7, #116]	; 0x74
 8006904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006908:	4642      	mov	r2, r8
 800690a:	464b      	mov	r3, r9
 800690c:	1891      	adds	r1, r2, r2
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	415b      	adcs	r3, r3
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006918:	4641      	mov	r1, r8
 800691a:	1851      	adds	r1, r2, r1
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	4649      	mov	r1, r9
 8006920:	414b      	adcs	r3, r1
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006930:	4659      	mov	r1, fp
 8006932:	00cb      	lsls	r3, r1, #3
 8006934:	4651      	mov	r1, sl
 8006936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693a:	4651      	mov	r1, sl
 800693c:	00ca      	lsls	r2, r1, #3
 800693e:	4610      	mov	r0, r2
 8006940:	4619      	mov	r1, r3
 8006942:	4603      	mov	r3, r0
 8006944:	4642      	mov	r2, r8
 8006946:	189b      	adds	r3, r3, r2
 8006948:	66bb      	str	r3, [r7, #104]	; 0x68
 800694a:	464b      	mov	r3, r9
 800694c:	460a      	mov	r2, r1
 800694e:	eb42 0303 	adc.w	r3, r2, r3
 8006952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	663b      	str	r3, [r7, #96]	; 0x60
 800695e:	667a      	str	r2, [r7, #100]	; 0x64
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800696c:	4649      	mov	r1, r9
 800696e:	008b      	lsls	r3, r1, #2
 8006970:	4641      	mov	r1, r8
 8006972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006976:	4641      	mov	r1, r8
 8006978:	008a      	lsls	r2, r1, #2
 800697a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800697e:	f7f9 fc37 	bl	80001f0 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <UART_SetConfig+0x4e4>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	; 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	3332      	adds	r3, #50	; 0x32
 800699a:	4a08      	ldr	r2, [pc, #32]	; (80069bc <UART_SetConfig+0x4e4>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 020f 	and.w	r2, r3, #15
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4422      	add	r2, r4
 80069ae:	609a      	str	r2, [r3, #8]
}
 80069b0:	bf00      	nop
 80069b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069b6:	46bd      	mov	sp, r7
 80069b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069bc:	51eb851f 	.word	0x51eb851f

080069c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d123      	bne.n	8006a1a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80069da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	6851      	ldr	r1, [r2, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	6892      	ldr	r2, [r2, #8]
 80069e6:	4311      	orrs	r1, r2
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	68d2      	ldr	r2, [r2, #12]
 80069ec:	4311      	orrs	r1, r2
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	6912      	ldr	r2, [r2, #16]
 80069f2:	4311      	orrs	r1, r2
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	6952      	ldr	r2, [r2, #20]
 80069f8:	4311      	orrs	r1, r2
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	6992      	ldr	r2, [r2, #24]
 80069fe:	4311      	orrs	r1, r2
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	69d2      	ldr	r2, [r2, #28]
 8006a04:	4311      	orrs	r1, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	6a12      	ldr	r2, [r2, #32]
 8006a0a:	4311      	orrs	r1, r2
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a10:	430a      	orrs	r2, r1
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e028      	b.n	8006a6c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	69d9      	ldr	r1, [r3, #28]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	4319      	orrs	r1, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	430b      	orrs	r3, r1
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	6851      	ldr	r1, [r2, #4]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	6892      	ldr	r2, [r2, #8]
 8006a4c:	4311      	orrs	r1, r2
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	68d2      	ldr	r2, [r2, #12]
 8006a52:	4311      	orrs	r1, r2
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	6912      	ldr	r2, [r2, #16]
 8006a58:	4311      	orrs	r1, r2
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	6952      	ldr	r2, [r2, #20]
 8006a5e:	4311      	orrs	r1, r2
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	6992      	ldr	r2, [r2, #24]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d128      	bne.n	8006ade <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	1e59      	subs	r1, r3, #1
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	4319      	orrs	r1, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	4319      	orrs	r1, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	031b      	lsls	r3, r3, #12
 8006ab6:	4319      	orrs	r1, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	4319      	orrs	r1, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	051b      	lsls	r3, r3, #20
 8006aca:	4319      	orrs	r1, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	e02f      	b.n	8006b3e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	68d2      	ldr	r2, [r2, #12]
 8006aee:	3a01      	subs	r2, #1
 8006af0:	0311      	lsls	r1, r2, #12
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	6952      	ldr	r2, [r2, #20]
 8006af6:	3a01      	subs	r2, #1
 8006af8:	0512      	lsls	r2, r2, #20
 8006afa:	430a      	orrs	r2, r1
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	1e59      	subs	r1, r3, #1
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	4319      	orrs	r1, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	4319      	orrs	r1, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	4319      	orrs	r1, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	430b      	orrs	r3, r1
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	f107 001c 	add.w	r0, r7, #28
 8006b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d123      	bne.n	8006bae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d105      	bne.n	8006ba2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f9dc 	bl	8006f60 <USB_CoreReset>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]
 8006bac:	e01b      	b.n	8006be6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9d0 	bl	8006f60 <USB_CoreReset>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd8:	e005      	b.n	8006be6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006be6:	7fbb      	ldrb	r3, [r7, #30]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10b      	bne.n	8006c04 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f043 0206 	orr.w	r2, r3, #6
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c10:	b004      	add	sp, #16
 8006c12:	4770      	bx	lr

08006c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f043 0201 	orr.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d115      	bne.n	8006ca6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c86:	200a      	movs	r0, #10
 8006c88:	f7fa fd04 	bl	8001694 <HAL_Delay>
      ms += 10U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	330a      	adds	r3, #10
 8006c90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f956 	bl	8006f44 <USB_GetMode>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d01e      	beq.n	8006cdc <USB_SetCurrentMode+0x84>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2bc7      	cmp	r3, #199	; 0xc7
 8006ca2:	d9f0      	bls.n	8006c86 <USB_SetCurrentMode+0x2e>
 8006ca4:	e01a      	b.n	8006cdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d115      	bne.n	8006cd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cb8:	200a      	movs	r0, #10
 8006cba:	f7fa fceb 	bl	8001694 <HAL_Delay>
      ms += 10U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	330a      	adds	r3, #10
 8006cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f93d 	bl	8006f44 <USB_GetMode>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <USB_SetCurrentMode+0x84>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2bc7      	cmp	r3, #199	; 0xc7
 8006cd4:	d9f0      	bls.n	8006cb8 <USB_SetCurrentMode+0x60>
 8006cd6:	e001      	b.n	8006cdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e005      	b.n	8006ce8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2bc8      	cmp	r3, #200	; 0xc8
 8006ce0:	d101      	bne.n	8006ce6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d0a:	d901      	bls.n	8006d10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e01b      	b.n	8006d48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	daf2      	bge.n	8006cfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	019b      	lsls	r3, r3, #6
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d34:	d901      	bls.n	8006d3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e006      	b.n	8006d48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d0f0      	beq.n	8006d28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d6c:	d901      	bls.n	8006d72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e018      	b.n	8006da4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	daf2      	bge.n	8006d60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2210      	movs	r2, #16
 8006d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3301      	adds	r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d90:	d901      	bls.n	8006d96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e006      	b.n	8006da4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d0f0      	beq.n	8006d84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	71fb      	strb	r3, [r7, #7]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d123      	bne.n	8006e1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dd6:	88bb      	ldrh	r3, [r7, #4]
 8006dd8:	3303      	adds	r3, #3
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	e018      	b.n	8006e16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	031a      	lsls	r2, r3, #12
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	461a      	mov	r2, r3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	3301      	adds	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3301      	adds	r3, #1
 8006e08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	3301      	adds	r3, #1
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d3e2      	bcc.n	8006de4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3724      	adds	r7, #36	; 0x24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b08b      	sub	sp, #44	; 0x2c
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4613      	mov	r3, r2
 8006e38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	089b      	lsrs	r3, r3, #2
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	e014      	b.n	8006e82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	3301      	adds	r3, #1
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	3301      	adds	r3, #1
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	3301      	adds	r3, #1
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	623b      	str	r3, [r7, #32]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d3e6      	bcc.n	8006e58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e8a:	8bfb      	ldrh	r3, [r7, #30]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01e      	beq.n	8006ece <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f107 0310 	add.w	r3, r7, #16
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	701a      	strb	r2, [r3, #0]
      i++;
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ec2:	8bfb      	ldrh	r3, [r7, #30]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ec8:	8bfb      	ldrh	r3, [r7, #30]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1ea      	bne.n	8006ea4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	372c      	adds	r7, #44	; 0x2c
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	4013      	ands	r3, r2
 8006f34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f36:	68bb      	ldr	r3, [r7, #8]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	f003 0301 	and.w	r3, r3, #1
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f78:	d901      	bls.n	8006f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e01b      	b.n	8006fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	daf2      	bge.n	8006f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f043 0201 	orr.w	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006fa2:	d901      	bls.n	8006fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e006      	b.n	8006fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d0f0      	beq.n	8006f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d119      	bne.n	800704e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800701a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10a      	bne.n	8007038 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007030:	f043 0304 	orr.w	r3, r3, #4
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	e014      	b.n	8007062 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007046:	f023 0304 	bic.w	r3, r3, #4
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e009      	b.n	8007062 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800705c:	f023 0304 	bic.w	r3, r3, #4
 8007060:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007062:	2110      	movs	r1, #16
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fe43 	bl	8006cf0 <USB_FlushTxFifo>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fe6d 	bl	8006d54 <USB_FlushRxFifo>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007084:	2300      	movs	r3, #0
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	e015      	b.n	80070b6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007096:	461a      	mov	r2, r3
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	461a      	mov	r2, r3
 80070ac:	2300      	movs	r3, #0
 80070ae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3301      	adds	r3, #1
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80070ba:	461a      	mov	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4293      	cmp	r3, r2
 80070c0:	d3e3      	bcc.n	800708a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295
 80070ce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a18      	ldr	r2, [pc, #96]	; (8007134 <USB_HostInit+0x170>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d10b      	bne.n	80070f0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a15      	ldr	r2, [pc, #84]	; (8007138 <USB_HostInit+0x174>)
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a14      	ldr	r2, [pc, #80]	; (800713c <USB_HostInit+0x178>)
 80070ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80070ee:	e009      	b.n	8007104 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2280      	movs	r2, #128	; 0x80
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a11      	ldr	r2, [pc, #68]	; (8007140 <USB_HostInit+0x17c>)
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a11      	ldr	r2, [pc, #68]	; (8007144 <USB_HostInit+0x180>)
 8007100:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007104:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007108:	2b00      	cmp	r3, #0
 800710a:	d105      	bne.n	8007118 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f043 0210 	orr.w	r2, r3, #16
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <USB_HostInit+0x184>)
 800711e:	4313      	orrs	r3, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007130:	b004      	add	sp, #16
 8007132:	4770      	bx	lr
 8007134:	40040000 	.word	0x40040000
 8007138:	01000200 	.word	0x01000200
 800713c:	00e00300 	.word	0x00e00300
 8007140:	00600080 	.word	0x00600080
 8007144:	004000e0 	.word	0x004000e0
 8007148:	a3200008 	.word	0xa3200008

0800714c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	68f9      	ldr	r1, [r7, #12]
 8007180:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007184:	4313      	orrs	r3, r2
 8007186:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d107      	bne.n	800719e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007194:	461a      	mov	r2, r3
 8007196:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800719a:	6053      	str	r3, [r2, #4]
 800719c:	e00c      	b.n	80071b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d107      	bne.n	80071b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071aa:	461a      	mov	r2, r3
 80071ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80071b0:	6053      	str	r3, [r2, #4]
 80071b2:	e001      	b.n	80071b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80071e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071f6:	2064      	movs	r0, #100	; 0x64
 80071f8:	f7fa fa4c 	bl	8001694 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007208:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800720a:	200a      	movs	r0, #10
 800720c:	f7fa fa42 	bl	8001694 <HAL_Delay>

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800723e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <USB_DriveVbus+0x44>
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d106      	bne.n	800725e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007258:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800725c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007268:	d109      	bne.n	800727e <USB_DriveVbus+0x64>
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800727c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	0c5b      	lsrs	r3, r3, #17
 80072aa:	f003 0303 	and.w	r3, r3, #3
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	b29b      	uxth	r3, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	461a      	mov	r2, r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	70fb      	strb	r3, [r7, #3]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70bb      	strb	r3, [r7, #2]
 80072f2:	4613      	mov	r3, r2
 80072f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	f04f 33ff 	mov.w	r3, #4294967295
 8007310:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007312:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007316:	2b03      	cmp	r3, #3
 8007318:	d87c      	bhi.n	8007414 <USB_HC_Init+0x138>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <USB_HC_Init+0x44>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	080073d7 	.word	0x080073d7
 8007328:	08007331 	.word	0x08007331
 800732c:	08007399 	.word	0x08007399
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733c:	461a      	mov	r2, r3
 800733e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007342:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007344:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007348:	2b00      	cmp	r3, #0
 800734a:	da10      	bge.n	800736e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	440a      	add	r2, r1
 8007362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800736c:	e055      	b.n	800741a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a6f      	ldr	r2, [pc, #444]	; (8007530 <USB_HC_Init+0x254>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d151      	bne.n	800741a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4413      	add	r3, r2
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	440a      	add	r2, r1
 800738c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007390:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007394:	60d3      	str	r3, [r2, #12]
      break;
 8007396:	e040      	b.n	800741a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a4:	461a      	mov	r2, r3
 80073a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80073aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da34      	bge.n	800741e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80073d4:	e023      	b.n	800741e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073d6:	78fb      	ldrb	r3, [r7, #3]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e2:	461a      	mov	r2, r3
 80073e4:	f240 2325 	movw	r3, #549	; 0x225
 80073e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da17      	bge.n	8007422 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	440a      	add	r2, r1
 8007408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800740c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007410:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007412:	e006      	b.n	8007422 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	77fb      	strb	r3, [r7, #31]
      break;
 8007418:	e004      	b.n	8007424 <USB_HC_Init+0x148>
      break;
 800741a:	bf00      	nop
 800741c:	e002      	b.n	8007424 <USB_HC_Init+0x148>
      break;
 800741e:	bf00      	nop
 8007420:	e000      	b.n	8007424 <USB_HC_Init+0x148>
      break;
 8007422:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4413      	add	r3, r2
 800742c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007430:	461a      	mov	r2, r3
 8007432:	2300      	movs	r3, #0
 8007434:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	440a      	add	r2, r1
 800744c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007450:	f043 0302 	orr.w	r3, r3, #2
 8007454:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	2101      	movs	r1, #1
 8007466:	fa01 f303 	lsl.w	r3, r1, r3
 800746a:	6939      	ldr	r1, [r7, #16]
 800746c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007470:	4313      	orrs	r3, r2
 8007472:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007480:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007484:	2b00      	cmp	r3, #0
 8007486:	da03      	bge.n	8007490 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	e001      	b.n	8007494 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fef9 	bl	800728c <USB_GetHostSpeed>
 800749a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800749c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d106      	bne.n	80074b2 <USB_HC_Init+0x1d6>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d003      	beq.n	80074b2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	e001      	b.n	80074b6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074b6:	787b      	ldrb	r3, [r7, #1]
 80074b8:	059b      	lsls	r3, r3, #22
 80074ba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074be:	78bb      	ldrb	r3, [r7, #2]
 80074c0:	02db      	lsls	r3, r3, #11
 80074c2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074cc:	049b      	lsls	r3, r3, #18
 80074ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80074d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80074d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074da:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	431a      	orrs	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074f4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d003      	beq.n	8007506 <USB_HC_Init+0x22a>
 80074fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007502:	2b01      	cmp	r3, #1
 8007504:	d10f      	bne.n	8007526 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	440a      	add	r2, r1
 800751c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007520:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007524:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007526:	7ffb      	ldrb	r3, [r7, #31]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40040000 	.word	0x40040000

08007534 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08c      	sub	sp, #48	; 0x30
 8007538:	af02      	add	r7, sp, #8
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800754c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007550:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4a5d      	ldr	r2, [pc, #372]	; (80076cc <USB_HC_StartXfer+0x198>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d12f      	bne.n	80075ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d11c      	bne.n	800759a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	7c9b      	ldrb	r3, [r3, #18]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <USB_HC_StartXfer+0x3c>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	7c9b      	ldrb	r3, [r3, #18]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d124      	bne.n	80075ba <USB_HC_StartXfer+0x86>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	799b      	ldrb	r3, [r3, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d120      	bne.n	80075ba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	4413      	add	r3, r2
 8007580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	6a3a      	ldr	r2, [r7, #32]
 800758c:	440a      	add	r2, r1
 800758e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007596:	60d3      	str	r3, [r2, #12]
 8007598:	e00f      	b.n	80075ba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	791b      	ldrb	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <USB_HC_StartXfer+0x86>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	795b      	ldrb	r3, [r3, #5]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d107      	bne.n	80075ba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	4619      	mov	r1, r3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fb6b 	bl	8007c8c <USB_DoPing>
        return HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e232      	b.n	8007a20 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	799b      	ldrb	r3, [r3, #6]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d158      	bne.n	8007674 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80075c2:	2301      	movs	r3, #1
 80075c4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	8a92      	ldrh	r2, [r2, #20]
 80075d4:	fb03 f202 	mul.w	r2, r3, r2
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	61da      	str	r2, [r3, #28]
 80075dc:	e07c      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	7c9b      	ldrb	r3, [r3, #18]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d130      	bne.n	8007648 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	2bbc      	cmp	r3, #188	; 0xbc
 80075ec:	d918      	bls.n	8007620 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	8a9b      	ldrh	r3, [r3, #20]
 80075f2:	461a      	mov	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d003      	beq.n	8007610 <USB_HC_StartXfer+0xdc>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d103      	bne.n	8007618 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2202      	movs	r2, #2
 8007614:	60da      	str	r2, [r3, #12]
 8007616:	e05f      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2201      	movs	r2, #1
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e05b      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d007      	beq.n	8007640 <USB_HC_StartXfer+0x10c>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d003      	beq.n	8007640 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2204      	movs	r2, #4
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e04b      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2203      	movs	r2, #3
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	e047      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d10d      	bne.n	800766a <USB_HC_StartXfer+0x136>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	8a92      	ldrh	r2, [r2, #20]
 8007656:	4293      	cmp	r3, r2
 8007658:	d907      	bls.n	800766a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800765a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	8a92      	ldrh	r2, [r2, #20]
 8007660:	fb03 f202 	mul.w	r2, r3, r2
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	61da      	str	r2, [r3, #28]
 8007668:	e036      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	61da      	str	r2, [r3, #28]
 8007672:	e031      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d018      	beq.n	80076ae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	8a92      	ldrh	r2, [r2, #20]
 8007684:	4413      	add	r3, r2
 8007686:	3b01      	subs	r3, #1
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	8a92      	ldrh	r2, [r2, #20]
 800768c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007690:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8007692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007694:	8b7b      	ldrh	r3, [r7, #26]
 8007696:	429a      	cmp	r2, r3
 8007698:	d90b      	bls.n	80076b2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800769a:	8b7b      	ldrh	r3, [r7, #26]
 800769c:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800769e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	8a92      	ldrh	r2, [r2, #20]
 80076a4:	fb03 f202 	mul.w	r2, r3, r2
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61da      	str	r2, [r3, #28]
 80076ac:	e001      	b.n	80076b2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80076ae:	2301      	movs	r3, #1
 80076b0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	78db      	ldrb	r3, [r3, #3]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	8a92      	ldrh	r2, [r2, #20]
 80076c0:	fb03 f202 	mul.w	r2, r3, r2
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61da      	str	r2, [r3, #28]
 80076c8:	e006      	b.n	80076d8 <USB_HC_StartXfer+0x1a4>
 80076ca:	bf00      	nop
 80076cc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6a1a      	ldr	r2, [r3, #32]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076e2:	04d9      	lsls	r1, r3, #19
 80076e4:	4ba3      	ldr	r3, [pc, #652]	; (8007974 <USB_HC_StartXfer+0x440>)
 80076e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7d9b      	ldrb	r3, [r3, #22]
 80076ee:	075b      	lsls	r3, r3, #29
 80076f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f4:	69f9      	ldr	r1, [r7, #28]
 80076f6:	0148      	lsls	r0, r1, #5
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	4401      	add	r1, r0
 80076fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007700:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007702:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6999      	ldr	r1, [r3, #24]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	460a      	mov	r2, r1
 800771c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	4413      	add	r3, r2
 800773e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	440a      	add	r2, r1
 800774c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007754:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	7e7b      	ldrb	r3, [r7, #25]
 8007766:	075b      	lsls	r3, r3, #29
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	0148      	lsls	r0, r1, #5
 800776c:	6a39      	ldr	r1, [r7, #32]
 800776e:	4401      	add	r1, r0
 8007770:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007774:	4313      	orrs	r3, r2
 8007776:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	799b      	ldrb	r3, [r3, #6]
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 80c3 	bne.w	8007908 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	7c5b      	ldrb	r3, [r3, #17]
 8007786:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800778c:	4313      	orrs	r3, r2
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	6a3a      	ldr	r2, [r7, #32]
 8007794:	440a      	add	r2, r1
 8007796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800779a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800779e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	6a3a      	ldr	r2, [r7, #32]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	79db      	ldrb	r3, [r3, #7]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d123      	bne.n	8007810 <USB_HC_StartXfer+0x2dc>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	78db      	ldrb	r3, [r3, #3]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11f      	bne.n	8007810 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	0151      	lsls	r1, r2, #5
 80077e2:	6a3a      	ldr	r2, [r7, #32]
 80077e4:	440a      	add	r2, r1
 80077e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	6a3a      	ldr	r2, [r7, #32]
 8007804:	440a      	add	r2, r1
 8007806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800780a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7c9b      	ldrb	r3, [r3, #18]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d003      	beq.n	8007820 <USB_HC_StartXfer+0x2ec>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	7c9b      	ldrb	r3, [r3, #18]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d117      	bne.n	8007850 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007824:	2b01      	cmp	r3, #1
 8007826:	d113      	bne.n	8007850 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10f      	bne.n	8007850 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	440a      	add	r2, r1
 8007846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800784a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	7c9b      	ldrb	r3, [r3, #18]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d162      	bne.n	800791e <USB_HC_StartXfer+0x3ea>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	78db      	ldrb	r3, [r3, #3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d15e      	bne.n	800791e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	3b01      	subs	r3, #1
 8007866:	2b03      	cmp	r3, #3
 8007868:	d858      	bhi.n	800791c <USB_HC_StartXfer+0x3e8>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <USB_HC_StartXfer+0x33c>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007881 	.word	0x08007881
 8007874:	080078a3 	.word	0x080078a3
 8007878:	080078c5 	.word	0x080078c5
 800787c:	080078e7 	.word	0x080078e7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	6a3a      	ldr	r2, [r7, #32]
 8007894:	440a      	add	r2, r1
 8007896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789e:	6053      	str	r3, [r2, #4]
          break;
 80078a0:	e03d      	b.n	800791e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	0151      	lsls	r1, r2, #5
 80078b4:	6a3a      	ldr	r2, [r7, #32]
 80078b6:	440a      	add	r2, r1
 80078b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078bc:	f043 030e 	orr.w	r3, r3, #14
 80078c0:	6053      	str	r3, [r2, #4]
          break;
 80078c2:	e02c      	b.n	800791e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078e2:	6053      	str	r3, [r2, #4]
          break;
 80078e4:	e01b      	b.n	800791e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	6a3a      	ldr	r2, [r7, #32]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007904:	6053      	str	r3, [r2, #4]
          break;
 8007906:	e00a      	b.n	800791e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6053      	str	r3, [r2, #4]
 800791a:	e000      	b.n	800791e <USB_HC_StartXfer+0x3ea>
          break;
 800791c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007934:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	e003      	b.n	8007950 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800794e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007956:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	461a      	mov	r2, r3
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e055      	b.n	8007a20 <USB_HC_StartXfer+0x4ec>
 8007974:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d14e      	bne.n	8007a1e <USB_HC_StartXfer+0x4ea>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d04a      	beq.n	8007a1e <USB_HC_StartXfer+0x4ea>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	79db      	ldrb	r3, [r3, #7]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d146      	bne.n	8007a1e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	7c9b      	ldrb	r3, [r3, #18]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d831      	bhi.n	80079fc <USB_HC_StartXfer+0x4c8>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <USB_HC_StartXfer+0x46c>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079d5 	.word	0x080079d5
 80079a8:	080079b1 	.word	0x080079b1
 80079ac:	080079d5 	.word	0x080079d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	3303      	adds	r3, #3
 80079b6:	089b      	lsrs	r3, r3, #2
 80079b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079ba:	8afa      	ldrh	r2, [r7, #22]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d91c      	bls.n	8007a00 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f043 0220 	orr.w	r2, r3, #32
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80079d2:	e015      	b.n	8007a00 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	3303      	adds	r3, #3
 80079da:	089b      	lsrs	r3, r3, #2
 80079dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079de:	8afa      	ldrh	r2, [r7, #22]
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d90a      	bls.n	8007a04 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80079fa:	e003      	b.n	8007a04 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80079fc:	bf00      	nop
 80079fe:	e002      	b.n	8007a06 <USB_HC_StartXfer+0x4d2>
        break;
 8007a00:	bf00      	nop
 8007a02:	e000      	b.n	8007a06 <USB_HC_StartXfer+0x4d2>
        break;
 8007a04:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6999      	ldr	r1, [r3, #24]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	785a      	ldrb	r2, [r3, #1]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2000      	movs	r0, #0
 8007a16:	9000      	str	r0, [sp, #0]
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff f9c9 	bl	8006db0 <USB_WritePacket>
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3728      	adds	r7, #40	; 0x28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	b29b      	uxth	r3, r3
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b089      	sub	sp, #36	; 0x24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	0c9b      	lsrs	r3, r3, #18
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	0fdb      	lsrs	r3, r3, #31
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	0fdb      	lsrs	r3, r3, #31
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	d10d      	bne.n	8007acc <USB_HC_Halt+0x82>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <USB_HC_Halt+0x82>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d002      	beq.n	8007ac8 <USB_HC_Halt+0x7e>
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d101      	bne.n	8007acc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e0d8      	b.n	8007c7e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <USB_HC_Halt+0x8e>
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d173      	bne.n	8007bc0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007af6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d14a      	bne.n	8007b9a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d133      	bne.n	8007b78 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b2e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b4e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5c:	d82e      	bhi.n	8007bbc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b74:	d0ec      	beq.n	8007b50 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b76:	e081      	b.n	8007c7c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b96:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b98:	e070      	b.n	8007c7c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bb8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bba:	e05f      	b.n	8007c7c <USB_HC_Halt+0x232>
            break;
 8007bbc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bbe:	e05d      	b.n	8007c7c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bde:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d133      	bne.n	8007c58 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3c:	d81d      	bhi.n	8007c7a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c54:	d0ec      	beq.n	8007c30 <USB_HC_Halt+0x1e6>
 8007c56:	e011      	b.n	8007c7c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	e000      	b.n	8007c7c <USB_HC_Halt+0x232>
          break;
 8007c7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3724      	adds	r7, #36	; 0x24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	04da      	lsls	r2, r3, #19
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <USB_DoPing+0x74>)
 8007caa:	4013      	ands	r3, r2
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cea:	461a      	mov	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	1ff80000 	.word	0x1ff80000

08007d04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fe ff8c 	bl	8006c36 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d1e:	2110      	movs	r1, #16
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe ffe5 	bl	8006cf0 <USB_FlushTxFifo>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff f80f 	bl	8006d54 <USB_FlushRxFifo>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d40:	2300      	movs	r3, #0
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e01f      	b.n	8007d86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3301      	adds	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b0f      	cmp	r3, #15
 8007d8a:	d9dc      	bls.n	8007d46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e034      	b.n	8007dfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007da8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007db0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007db8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd8:	d80c      	bhi.n	8007df4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007df0:	d0ec      	beq.n	8007dcc <USB_StopHost+0xc8>
 8007df2:	e000      	b.n	8007df6 <USB_StopHost+0xf2>
        break;
 8007df4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	61bb      	str	r3, [r7, #24]
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	2b0f      	cmp	r3, #15
 8007e00:	d9c7      	bls.n	8007d92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f04f 32ff 	mov.w	r2, #4294967295
 8007e16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7fe fefb 	bl	8006c14 <USB_EnableGlobalInt>

  return ret;
 8007e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3720      	adds	r7, #32
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b089      	sub	sp, #36	; 0x24
 8007e2c:	af04      	add	r7, sp, #16
 8007e2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e30:	2301      	movs	r3, #1
 8007e32:	2202      	movs	r2, #2
 8007e34:	2102      	movs	r1, #2
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fcd7 	bl	80087ea <USBH_FindInterface>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2bff      	cmp	r3, #255	; 0xff
 8007e44:	d002      	beq.n	8007e4c <USBH_CDC_InterfaceInit+0x24>
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d901      	bls.n	8007e50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e13d      	b.n	80080cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fcac 	bl	80087b2 <USBH_SelectInterface>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e64:	2302      	movs	r3, #2
 8007e66:	e131      	b.n	80080cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007e6e:	2050      	movs	r0, #80	; 0x50
 8007e70:	f005 f872 	bl	800cf58 <malloc>
 8007e74:	4603      	mov	r3, r0
 8007e76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e11f      	b.n	80080cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007e8c:	2250      	movs	r2, #80	; 0x50
 8007e8e:	2100      	movs	r1, #0
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f005 f91d 	bl	800d0d0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	211a      	movs	r1, #26
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da15      	bge.n	8007eda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	211a      	movs	r1, #26
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	211a      	movs	r1, #26
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ed4:	881a      	ldrh	r2, [r3, #0]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f002 fa2a 	bl	800a33a <USBH_AllocPipe>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	461a      	mov	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	7819      	ldrb	r1, [r3, #0]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	7858      	ldrb	r0, [r3, #1]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	8952      	ldrh	r2, [r2, #10]
 8007f06:	9202      	str	r2, [sp, #8]
 8007f08:	2203      	movs	r2, #3
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	4623      	mov	r3, r4
 8007f10:	4602      	mov	r2, r0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f002 f9e2 	bl	800a2dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f004 ff93 	bl	800ce4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f26:	2300      	movs	r3, #0
 8007f28:	2200      	movs	r2, #0
 8007f2a:	210a      	movs	r1, #10
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc5c 	bl	80087ea <USBH_FindInterface>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2bff      	cmp	r3, #255	; 0xff
 8007f3a:	d002      	beq.n	8007f42 <USBH_CDC_InterfaceInit+0x11a>
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d901      	bls.n	8007f46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f42:	2302      	movs	r3, #2
 8007f44:	e0c2      	b.n	80080cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	211a      	movs	r1, #26
 8007f4c:	fb01 f303 	mul.w	r3, r1, r3
 8007f50:	4413      	add	r3, r2
 8007f52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da16      	bge.n	8007f8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	211a      	movs	r1, #26
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	211a      	movs	r1, #26
 8007f7a:	fb01 f303 	mul.w	r3, r1, r3
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f84:	881a      	ldrh	r2, [r3, #0]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	835a      	strh	r2, [r3, #26]
 8007f8a:	e015      	b.n	8007fb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	211a      	movs	r1, #26
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	211a      	movs	r1, #26
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fb2:	881a      	ldrh	r2, [r3, #0]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	211a      	movs	r1, #26
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da16      	bge.n	8007ffe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	211a      	movs	r1, #26
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	4413      	add	r3, r2
 8007fdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007fe0:	781a      	ldrb	r2, [r3, #0]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	211a      	movs	r1, #26
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ff6:	881a      	ldrh	r2, [r3, #0]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	835a      	strh	r2, [r3, #26]
 8007ffc:	e015      	b.n	800802a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	211a      	movs	r1, #26
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	4413      	add	r3, r2
 800800a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	211a      	movs	r1, #26
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	4413      	add	r3, r2
 8008020:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008024:	881a      	ldrh	r2, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	7b9b      	ldrb	r3, [r3, #14]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f002 f982 	bl	800a33a <USBH_AllocPipe>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	7bdb      	ldrb	r3, [r3, #15]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f002 f978 	bl	800a33a <USBH_AllocPipe>
 800804a:	4603      	mov	r3, r0
 800804c:	461a      	mov	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	7b59      	ldrb	r1, [r3, #13]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	7b98      	ldrb	r0, [r3, #14]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	8b12      	ldrh	r2, [r2, #24]
 800806a:	9202      	str	r2, [sp, #8]
 800806c:	2202      	movs	r2, #2
 800806e:	9201      	str	r2, [sp, #4]
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4623      	mov	r3, r4
 8008074:	4602      	mov	r2, r0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f002 f930 	bl	800a2dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	7b19      	ldrb	r1, [r3, #12]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	7bd8      	ldrb	r0, [r3, #15]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	8b52      	ldrh	r2, [r2, #26]
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	2202      	movs	r2, #2
 8008098:	9201      	str	r2, [sp, #4]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4623      	mov	r3, r4
 800809e:	4602      	mov	r2, r0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f002 f91b 	bl	800a2dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	7b5b      	ldrb	r3, [r3, #13]
 80080b2:	2200      	movs	r2, #0
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f004 fec8 	bl	800ce4c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	7b1b      	ldrb	r3, [r3, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f004 fec1 	bl	800ce4c <USBH_LL_SetToggle>

  return USBH_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd90      	pop	{r4, r7, pc}

080080d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00e      	beq.n	800810c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f002 f910 	bl	800a31a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f002 f93b 	bl	800a37c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	7b1b      	ldrb	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00e      	beq.n	8008132 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	7b1b      	ldrb	r3, [r3, #12]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f002 f8fd 	bl	800a31a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	7b1b      	ldrb	r3, [r3, #12]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f002 f928 	bl	800a37c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	7b5b      	ldrb	r3, [r3, #13]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	7b5b      	ldrb	r3, [r3, #13]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f002 f8ea 	bl	800a31a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	7b5b      	ldrb	r3, [r3, #13]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 f915 	bl	800a37c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	4618      	mov	r0, r3
 800816e:	f004 fefb 	bl	800cf68 <free>
    phost->pActiveClass->pData = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008178:	2200      	movs	r2, #0
 800817a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3340      	adds	r3, #64	; 0x40
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8b1 	bl	8008306 <GetLineCoding>
 80081a4:	4603      	mov	r3, r0
 80081a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d105      	bne.n	80081ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081b4:	2102      	movs	r1, #2
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80081ba:	7afb      	ldrb	r3, [r7, #11]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d877      	bhi.n	80082d8 <USBH_CDC_Process+0x114>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <USBH_CDC_Process+0x2c>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008205 	.word	0x08008205
 80081f4:	0800820b 	.word	0x0800820b
 80081f8:	0800823b 	.word	0x0800823b
 80081fc:	080082af 	.word	0x080082af
 8008200:	080082bd 	.word	0x080082bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
      break;
 8008208:	e06d      	b.n	80082e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f897 	bl	8008344 <SetLineCoding>
 8008216:	4603      	mov	r3, r0
 8008218:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008228:	e058      	b.n	80082dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d055      	beq.n	80082dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2204      	movs	r2, #4
 8008234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008238:	e050      	b.n	80082dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	3340      	adds	r3, #64	; 0x40
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f860 	bl	8008306 <GetLineCoding>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d126      	bne.n	800829e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008262:	791b      	ldrb	r3, [r3, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d13b      	bne.n	80082e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008274:	429a      	cmp	r2, r3
 8008276:	d133      	bne.n	80082e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008284:	429a      	cmp	r2, r3
 8008286:	d12b      	bne.n	80082e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008290:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008292:	429a      	cmp	r2, r3
 8008294:	d124      	bne.n	80082e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f982 	bl	80085a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800829c:	e020      	b.n	80082e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d01d      	beq.n	80082e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2204      	movs	r2, #4
 80082a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80082ac:	e018      	b.n	80082e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f867 	bl	8008382 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8f6 	bl	80084a6 <CDC_ProcessReception>
      break;
 80082ba:	e014      	b.n	80082e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80082bc:	2100      	movs	r1, #0
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f98e 	bl	80095e0 <USBH_ClrFeature>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80082d6:	e005      	b.n	80082e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80082d8:	bf00      	nop
 80082da:	e004      	b.n	80082e6 <USBH_CDC_Process+0x122>
      break;
 80082dc:	bf00      	nop
 80082de:	e002      	b.n	80082e6 <USBH_CDC_Process+0x122>
      break;
 80082e0:	bf00      	nop
 80082e2:	e000      	b.n	80082e6 <USBH_CDC_Process+0x122>
      break;
 80082e4:	bf00      	nop

  }

  return status;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	22a1      	movs	r2, #161	; 0xa1
 8008314:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2221      	movs	r2, #33	; 0x21
 800831a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2207      	movs	r2, #7
 800832c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2207      	movs	r2, #7
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fc8f 	bl	8009c58 <USBH_CtlReq>
 800833a:	4603      	mov	r3, r0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2221      	movs	r2, #33	; 0x21
 8008352:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2207      	movs	r2, #7
 800836a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2207      	movs	r2, #7
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fc70 	bl	8009c58 <USBH_CtlReq>
 8008378:	4603      	mov	r3, r0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af02      	add	r7, sp, #8
 8008388:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008394:	2300      	movs	r3, #0
 8008396:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d002      	beq.n	80083a8 <CDC_ProcessTransmission+0x26>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d023      	beq.n	80083ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80083a6:	e07a      	b.n	800849e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	8b12      	ldrh	r2, [r2, #24]
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d90b      	bls.n	80083cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	69d9      	ldr	r1, [r3, #28]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8b1a      	ldrh	r2, [r3, #24]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	7b5b      	ldrb	r3, [r3, #13]
 80083c0:	2001      	movs	r0, #1
 80083c2:	9000      	str	r0, [sp, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 ff46 	bl	800a256 <USBH_BulkSendData>
 80083ca:	e00b      	b.n	80083e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	7b5b      	ldrb	r3, [r3, #13]
 80083da:	2001      	movs	r0, #1
 80083dc:	9000      	str	r0, [sp, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 ff39 	bl	800a256 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80083ec:	e057      	b.n	800849e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	7b5b      	ldrb	r3, [r3, #13]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f004 fcff 	bl	800cdf8 <USBH_LL_GetURBState>
 80083fa:	4603      	mov	r3, r0
 80083fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d136      	bne.n	8008472 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	8b12      	ldrh	r2, [r2, #24]
 800840c:	4293      	cmp	r3, r2
 800840e:	d90e      	bls.n	800842e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	8b12      	ldrh	r2, [r2, #24]
 8008418:	1a9a      	subs	r2, r3, r2
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	8b12      	ldrh	r2, [r2, #24]
 8008426:	441a      	add	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	61da      	str	r2, [r3, #28]
 800842c:	e002      	b.n	8008434 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008444:	e006      	b.n	8008454 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f892 	bl	8008578 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2204      	movs	r2, #4
 8008458:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008468:	2200      	movs	r2, #0
 800846a:	4619      	mov	r1, r3
 800846c:	f002 f882 	bl	800a574 <osMessagePut>
      break;
 8008470:	e014      	b.n	800849c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d111      	bne.n	800849c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2204      	movs	r2, #4
 8008484:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008494:	2200      	movs	r2, #0
 8008496:	4619      	mov	r1, r3
 8008498:	f002 f86c 	bl	800a574 <osMessagePut>
      break;
 800849c:	bf00      	nop
  }
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d002      	beq.n	80084cc <CDC_ProcessReception+0x26>
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d00e      	beq.n	80084e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80084ca:	e051      	b.n	8008570 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	6a19      	ldr	r1, [r3, #32]
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	8b5a      	ldrh	r2, [r3, #26]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	7b1b      	ldrb	r3, [r3, #12]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 fee1 	bl	800a2a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2204      	movs	r2, #4
 80084e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80084e6:	e043      	b.n	8008570 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	7b1b      	ldrb	r3, [r3, #12]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f004 fc82 	bl	800cdf8 <USBH_LL_GetURBState>
 80084f4:	4603      	mov	r3, r0
 80084f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80084f8:	7cfb      	ldrb	r3, [r7, #19]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d137      	bne.n	800856e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	7b1b      	ldrb	r3, [r3, #12]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f004 fbe5 	bl	800ccd4 <USBH_LL_GetLastXferSize>
 800850a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	429a      	cmp	r2, r3
 8008514:	d016      	beq.n	8008544 <CDC_ProcessReception+0x9e>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	8b5b      	ldrh	r3, [r3, #26]
 800851a:	461a      	mov	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4293      	cmp	r3, r2
 8008520:	d910      	bls.n	8008544 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1ad2      	subs	r2, r2, r3
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	6a1a      	ldr	r2, [r3, #32]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	441a      	add	r2, r3
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2203      	movs	r2, #3
 800853e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008542:	e006      	b.n	8008552 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f81d 	bl	800858c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2204      	movs	r2, #4
 8008556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008566:	2200      	movs	r2, #0
 8008568:	4619      	mov	r1, r3
 800856a:	f002 f803 	bl	800a574 <osMessagePut>
      break;
 800856e:	bf00      	nop
  }
}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80085b4:	b5b0      	push	{r4, r5, r7, lr}
 80085b6:	b090      	sub	sp, #64	; 0x40
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80085c8:	2302      	movs	r3, #2
 80085ca:	e04d      	b.n	8008668 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	79fa      	ldrb	r2, [r7, #7]
 80085d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f847 	bl	8008678 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008618:	4b15      	ldr	r3, [pc, #84]	; (8008670 <USBH_Init+0xbc>)
 800861a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800861e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f001 ff79 	bl	800a522 <osMessageCreate>
 8008630:	4602      	mov	r2, r0
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <USBH_Init+0xc0>)
 800863a:	f107 0414 	add.w	r4, r7, #20
 800863e:	461d      	mov	r5, r3
 8008640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800864c:	f107 0314 	add.w	r3, r7, #20
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	4618      	mov	r0, r3
 8008654:	f001 ff05 	bl	800a462 <osThreadCreate>
 8008658:	4602      	mov	r2, r0
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f004 fa79 	bl	800cb58 <USBH_LL_Init>

  return USBH_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3740      	adds	r7, #64	; 0x40
 800866c:	46bd      	mov	sp, r7
 800866e:	bdb0      	pop	{r4, r5, r7, pc}
 8008670:	0800d250 	.word	0x0800d250
 8008674:	0800d26c 	.word	0x0800d26c

08008678 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	e009      	b.n	800869e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	33e0      	adds	r3, #224	; 0xe0
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	2200      	movs	r2, #0
 8008696:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b0f      	cmp	r3, #15
 80086a2:	d9f2      	bls.n	800868a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	e009      	b.n	80086be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086b4:	2200      	movs	r2, #0
 80086b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c4:	d3f1      	bcc.n	80086aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2240      	movs	r2, #64	; 0x40
 80086ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	331c      	adds	r3, #28
 8008716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f004 fcd7 	bl	800d0d0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f004 fcce 	bl	800d0d0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f203 3326 	addw	r3, r3, #806	; 0x326
 800873a:	2212      	movs	r2, #18
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f004 fcc6 	bl	800d0d0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800874a:	223e      	movs	r2, #62	; 0x3e
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f004 fcbe 	bl	800d0d0 <memset>

  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800875e:	b480      	push	{r7}
 8008760:	b085      	sub	sp, #20
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d016      	beq.n	80087a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10e      	bne.n	800879a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008782:	1c59      	adds	r1, r3, #1
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	33de      	adds	r3, #222	; 0xde
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
 8008798:	e004      	b.n	80087a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800879a:	2302      	movs	r3, #2
 800879c:	73fb      	strb	r3, [r7, #15]
 800879e:	e001      	b.n	80087a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80087a0:	2302      	movs	r3, #2
 80087a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d204      	bcs.n	80087d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80087d6:	e001      	b.n	80087dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80087d8:	2302      	movs	r3, #2
 80087da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b087      	sub	sp, #28
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	461a      	mov	r2, r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	70fb      	strb	r3, [r7, #3]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70bb      	strb	r3, [r7, #2]
 8008800:	4613      	mov	r3, r2
 8008802:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008808:	2300      	movs	r3, #0
 800880a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008812:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008814:	e025      	b.n	8008862 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	221a      	movs	r2, #26
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	3308      	adds	r3, #8
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	3302      	adds	r3, #2
 8008826:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	795b      	ldrb	r3, [r3, #5]
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	429a      	cmp	r2, r3
 8008830:	d002      	beq.n	8008838 <USBH_FindInterface+0x4e>
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	2bff      	cmp	r3, #255	; 0xff
 8008836:	d111      	bne.n	800885c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800883c:	78ba      	ldrb	r2, [r7, #2]
 800883e:	429a      	cmp	r2, r3
 8008840:	d002      	beq.n	8008848 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	2bff      	cmp	r3, #255	; 0xff
 8008846:	d109      	bne.n	800885c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800884c:	787a      	ldrb	r2, [r7, #1]
 800884e:	429a      	cmp	r2, r3
 8008850:	d002      	beq.n	8008858 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008852:	787b      	ldrb	r3, [r7, #1]
 8008854:	2bff      	cmp	r3, #255	; 0xff
 8008856:	d101      	bne.n	800885c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	e006      	b.n	800886a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	3301      	adds	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d9d6      	bls.n	8008816 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008868:	23ff      	movs	r3, #255	; 0xff
}
 800886a:	4618      	mov	r0, r3
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f004 f9b0 	bl	800cbe4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008884:	2101      	movs	r1, #1
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f004 fac9 	bl	800ce1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b088      	sub	sp, #32
 800889c:	af04      	add	r7, sp, #16
 800889e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80088a0:	2302      	movs	r3, #2
 80088a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d102      	bne.n	80088ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2203      	movs	r2, #3
 80088b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b0b      	cmp	r3, #11
 80088c2:	f200 8247 	bhi.w	8008d54 <USBH_Process+0x4bc>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <USBH_Process+0x34>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088fd 	.word	0x080088fd
 80088d0:	0800894b 	.word	0x0800894b
 80088d4:	080089cf 	.word	0x080089cf
 80088d8:	08008cd3 	.word	0x08008cd3
 80088dc:	08008d55 	.word	0x08008d55
 80088e0:	08008a8f 	.word	0x08008a8f
 80088e4:	08008c5d 	.word	0x08008c5d
 80088e8:	08008ae1 	.word	0x08008ae1
 80088ec:	08008b1d 	.word	0x08008b1d
 80088f0:	08008b57 	.word	0x08008b57
 80088f4:	08008bb5 	.word	0x08008bb5
 80088f8:	08008cbb 	.word	0x08008cbb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8227 	beq.w	8008d58 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008910:	20c8      	movs	r0, #200	; 0xc8
 8008912:	f004 face 	bl	800ceb2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f004 f9c1 	bl	800cc9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008940:	2200      	movs	r2, #0
 8008942:	4619      	mov	r1, r3
 8008944:	f001 fe16 	bl	800a574 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008948:	e206      	b.n	8008d58 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008950:	2b01      	cmp	r3, #1
 8008952:	d107      	bne.n	8008964 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	e025      	b.n	80089b0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800896a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800896e:	d914      	bls.n	800899a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008976:	3301      	adds	r3, #1
 8008978:	b2da      	uxtb	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008986:	2b03      	cmp	r3, #3
 8008988:	d903      	bls.n	8008992 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	220d      	movs	r2, #13
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	e00e      	b.n	80089b0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	701a      	strb	r2, [r3, #0]
 8008998:	e00a      	b.n	80089b0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80089a0:	f103 020a 	add.w	r2, r3, #10
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80089aa:	200a      	movs	r0, #10
 80089ac:	f004 fa81 	bl	800ceb2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80089c4:	2200      	movs	r2, #0
 80089c6:	4619      	mov	r1, r3
 80089c8:	f001 fdd4 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089cc:	e1cb      	b.n	8008d66 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089de:	2104      	movs	r1, #4
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80089e4:	2064      	movs	r0, #100	; 0x64
 80089e6:	f004 fa64 	bl	800ceb2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f004 f930 	bl	800cc50 <USBH_LL_GetSpeed>
 80089f0:	4603      	mov	r3, r0
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2205      	movs	r2, #5
 80089fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a00:	2100      	movs	r1, #0
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fc99 	bl	800a33a <USBH_AllocPipe>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a10:	2180      	movs	r1, #128	; 0x80
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fc91 	bl	800a33a <USBH_AllocPipe>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7919      	ldrb	r1, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a34:	b292      	uxth	r2, r2
 8008a36:	9202      	str	r2, [sp, #8]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2280      	movs	r2, #128	; 0x80
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 fc4a 	bl	800a2dc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	7959      	ldrb	r1, [r3, #5]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a5c:	b292      	uxth	r2, r2
 8008a5e:	9202      	str	r2, [sp, #8]
 8008a60:	2200      	movs	r2, #0
 8008a62:	9201      	str	r2, [sp, #4]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	4603      	mov	r3, r0
 8008a68:	2200      	movs	r2, #0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fc36 	bl	800a2dc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a84:	2200      	movs	r2, #0
 8008a86:	4619      	mov	r1, r3
 8008a88:	f001 fd74 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a8c:	e16b      	b.n	8008d66 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f96e 	bl	8008d70 <USBH_HandleEnum>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 815d 	bne.w	8008d5c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d103      	bne.n	8008abc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2208      	movs	r2, #8
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e002      	b.n	8008ac2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2207      	movs	r2, #7
 8008ac0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2205      	movs	r2, #5
 8008ac6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4619      	mov	r1, r3
 8008ada:	f001 fd4b 	bl	800a574 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ade:	e13d      	b.n	8008d5c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 813a 	beq.w	8008d60 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008af2:	2101      	movs	r1, #1
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2208      	movs	r2, #8
 8008afc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2205      	movs	r2, #5
 8008b02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b12:	2200      	movs	r2, #0
 8008b14:	4619      	mov	r1, r3
 8008b16:	f001 fd2d 	bl	800a574 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008b1a:	e121      	b.n	8008d60 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fd13 	bl	8009552 <USBH_SetCfg>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2209      	movs	r2, #9
 8008b36:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f001 fd10 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b54:	e107      	b.n	8008d66 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d015      	beq.n	8008b90 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008b64:	2101      	movs	r1, #1
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fd16 	bl	8009598 <USBH_SetFeature>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	220a      	movs	r2, #10
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	e00a      	b.n	8008b96 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d106      	bne.n	8008b96 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	220a      	movs	r2, #10
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e002      	b.n	8008b96 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	220a      	movs	r2, #10
 8008b94:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008baa:	2200      	movs	r2, #0
 8008bac:	4619      	mov	r1, r3
 8008bae:	f001 fce1 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008bb2:	e0d8      	b.n	8008d66 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d03f      	beq.n	8008c3e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
 8008bca:	e016      	b.n	8008bfa <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008bcc:	7bfa      	ldrb	r2, [r7, #15]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32de      	adds	r2, #222	; 0xde
 8008bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd6:	791a      	ldrb	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d108      	bne.n	8008bf4 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008be2:	7bfa      	ldrb	r2, [r7, #15]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	32de      	adds	r2, #222	; 0xde
 8008be8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008bf2:	e005      	b.n	8008c00 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	73fb      	strb	r3, [r7, #15]
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0e5      	beq.n	8008bcc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d016      	beq.n	8008c38 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2206      	movs	r2, #6
 8008c20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c28:	2103      	movs	r1, #3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
 8008c2e:	e006      	b.n	8008c3e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	220d      	movs	r2, #13
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e002      	b.n	8008c3e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	220d      	movs	r2, #13
 8008c3c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2205      	movs	r2, #5
 8008c42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c52:	2200      	movs	r2, #0
 8008c54:	4619      	mov	r1, r3
 8008c56:	f001 fc8d 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c5a:	e084      	b.n	8008d66 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d017      	beq.n	8008c96 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
 8008c72:	4603      	mov	r3, r0
 8008c74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	220b      	movs	r2, #11
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	e00a      	b.n	8008c9c <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d106      	bne.n	8008c9c <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	220d      	movs	r2, #13
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e002      	b.n	8008c9c <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	220d      	movs	r2, #13
 8008c9a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f001 fc5e 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cb8:	e055      	b.n	8008d66 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d04f      	beq.n	8008d64 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	4798      	blx	r3
      }
      break;
 8008cd0:	e048      	b.n	8008d64 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fccc 	bl	8008678 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d009      	beq.n	8008cfe <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d0e:	2105      	movs	r1, #5
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d107      	bne.n	8008d30 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fda4 	bl	8008876 <USBH_Start>
 8008d2e:	e002      	b.n	8008d36 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f003 ff57 	bl	800cbe4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f001 fc11 	bl	800a574 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d52:	e008      	b.n	8008d66 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8008d54:	bf00      	nop
 8008d56:	e006      	b.n	8008d66 <USBH_Process+0x4ce>
      break;
 8008d58:	bf00      	nop
 8008d5a:	e004      	b.n	8008d66 <USBH_Process+0x4ce>
      break;
 8008d5c:	bf00      	nop
 8008d5e:	e002      	b.n	8008d66 <USBH_Process+0x4ce>
    break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <USBH_Process+0x4ce>
      break;
 8008d64:	bf00      	nop
  }
  return USBH_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af04      	add	r7, sp, #16
 8008d76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b07      	cmp	r3, #7
 8008d86:	f200 8208 	bhi.w	800919a <USBH_HandleEnum+0x42a>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <USBH_HandleEnum+0x20>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008db1 	.word	0x08008db1
 8008d94:	08008e6f 	.word	0x08008e6f
 8008d98:	08008ed9 	.word	0x08008ed9
 8008d9c:	08008f67 	.word	0x08008f67
 8008da0:	08008fd1 	.word	0x08008fd1
 8008da4:	08009041 	.word	0x08009041
 8008da8:	080090dd 	.word	0x080090dd
 8008dac:	0800915b 	.word	0x0800915b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008db0:	2108      	movs	r1, #8
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 faea 	bl	800938c <USBH_Get_DevDesc>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d130      	bne.n	8008e24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7919      	ldrb	r1, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008de6:	b292      	uxth	r2, r2
 8008de8:	9202      	str	r2, [sp, #8]
 8008dea:	2200      	movs	r2, #0
 8008dec:	9201      	str	r2, [sp, #4]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	4603      	mov	r3, r0
 8008df2:	2280      	movs	r2, #128	; 0x80
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 fa71 	bl	800a2dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	7959      	ldrb	r1, [r3, #5]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e0e:	b292      	uxth	r2, r2
 8008e10:	9202      	str	r2, [sp, #8]
 8008e12:	2200      	movs	r2, #0
 8008e14:	9201      	str	r2, [sp, #4]
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 fa5d 	bl	800a2dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e22:	e1bc      	b.n	800919e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	f040 81b9 	bne.w	800919e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e32:	3301      	adds	r3, #1
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d903      	bls.n	8008e4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	220d      	movs	r2, #13
 8008e4a:	701a      	strb	r2, [r3, #0]
      break;
 8008e4c:	e1a7      	b.n	800919e <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	795b      	ldrb	r3, [r3, #5]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fa91 	bl	800a37c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fa8b 	bl	800a37c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	701a      	strb	r2, [r3, #0]
      break;
 8008e6c:	e197      	b.n	800919e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008e6e:	2112      	movs	r1, #18
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa8b 	bl	800938c <USBH_Get_DevDesc>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d103      	bne.n	8008e88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e86:	e18c      	b.n	80091a2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	f040 8189 	bne.w	80091a2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e96:	3301      	adds	r3, #1
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d903      	bls.n	8008eb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	220d      	movs	r2, #13
 8008eae:	701a      	strb	r2, [r3, #0]
      break;
 8008eb0:	e177      	b.n	80091a2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	795b      	ldrb	r3, [r3, #5]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fa5f 	bl	800a37c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	791b      	ldrb	r3, [r3, #4]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 fa59 	bl	800a37c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
      break;
 8008ed6:	e164      	b.n	80091a2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ed8:	2101      	movs	r1, #1
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fb15 	bl	800950a <USBH_SetAddress>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d132      	bne.n	8008f50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008eea:	2002      	movs	r0, #2
 8008eec:	f003 ffe1 	bl	800ceb2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2203      	movs	r2, #3
 8008efc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7919      	ldrb	r1, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f12:	b292      	uxth	r2, r2
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	2200      	movs	r2, #0
 8008f18:	9201      	str	r2, [sp, #4]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2280      	movs	r2, #128	; 0x80
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 f9db 	bl	800a2dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7959      	ldrb	r1, [r3, #5]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f3a:	b292      	uxth	r2, r2
 8008f3c:	9202      	str	r2, [sp, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	9201      	str	r2, [sp, #4]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	4603      	mov	r3, r0
 8008f46:	2200      	movs	r2, #0
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f9c7 	bl	800a2dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f4e:	e12a      	b.n	80091a6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	f040 8127 	bne.w	80091a6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	220d      	movs	r2, #13
 8008f5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	705a      	strb	r2, [r3, #1]
      break;
 8008f64:	e11f      	b.n	80091a6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008f66:	2109      	movs	r1, #9
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fa3b 	bl	80093e4 <USBH_Get_CfgDesc>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d103      	bne.n	8008f80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2204      	movs	r2, #4
 8008f7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f7e:	e114      	b.n	80091aa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	f040 8111 	bne.w	80091aa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f8e:	3301      	adds	r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d903      	bls.n	8008faa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	220d      	movs	r2, #13
 8008fa6:	701a      	strb	r2, [r3, #0]
      break;
 8008fa8:	e0ff      	b.n	80091aa <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	795b      	ldrb	r3, [r3, #5]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f9e3 	bl	800a37c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	791b      	ldrb	r3, [r3, #4]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 f9dd 	bl	800a37c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]
      break;
 8008fce:	e0ec      	b.n	80091aa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa03 	bl	80093e4 <USBH_Get_CfgDesc>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d103      	bne.n	8008ff0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2205      	movs	r2, #5
 8008fec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fee:	e0de      	b.n	80091ae <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	f040 80db 	bne.w	80091ae <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ffe:	3301      	adds	r3, #1
 8009000:	b2da      	uxtb	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800900e:	2b03      	cmp	r3, #3
 8009010:	d903      	bls.n	800901a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	220d      	movs	r2, #13
 8009016:	701a      	strb	r2, [r3, #0]
      break;
 8009018:	e0c9      	b.n	80091ae <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	795b      	ldrb	r3, [r3, #5]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f9ab 	bl	800a37c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	791b      	ldrb	r3, [r3, #4]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f9a5 	bl	800a37c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]
      break;
 800903e:	e0b6      	b.n	80091ae <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009046:	2b00      	cmp	r3, #0
 8009048:	d036      	beq.n	80090b8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009056:	23ff      	movs	r3, #255	; 0xff
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f9ed 	bl	8009438 <USBH_Get_StringDesc>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d111      	bne.n	800908c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2206      	movs	r2, #6
 800906c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2205      	movs	r2, #5
 8009072:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009082:	2200      	movs	r2, #0
 8009084:	4619      	mov	r1, r3
 8009086:	f001 fa75 	bl	800a574 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800908a:	e092      	b.n	80091b2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b03      	cmp	r3, #3
 8009090:	f040 808f 	bne.w	80091b2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2206      	movs	r2, #6
 8009098:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2205      	movs	r2, #5
 800909e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090ae:	2200      	movs	r2, #0
 80090b0:	4619      	mov	r1, r3
 80090b2:	f001 fa5f 	bl	800a574 <osMessagePut>
      break;
 80090b6:	e07c      	b.n	80091b2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2206      	movs	r2, #6
 80090bc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2205      	movs	r2, #5
 80090c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090d2:	2200      	movs	r2, #0
 80090d4:	4619      	mov	r1, r3
 80090d6:	f001 fa4d 	bl	800a574 <osMessagePut>
      break;
 80090da:	e06a      	b.n	80091b2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d027      	beq.n	8009136 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80090f2:	23ff      	movs	r3, #255	; 0xff
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f99f 	bl	8009438 <USBH_Get_StringDesc>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2207      	movs	r2, #7
 8009108:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800910a:	e054      	b.n	80091b6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b03      	cmp	r3, #3
 8009110:	d151      	bne.n	80091b6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2207      	movs	r2, #7
 8009116:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2205      	movs	r2, #5
 800911c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800912c:	2200      	movs	r2, #0
 800912e:	4619      	mov	r1, r3
 8009130:	f001 fa20 	bl	800a574 <osMessagePut>
      break;
 8009134:	e03f      	b.n	80091b6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2207      	movs	r2, #7
 800913a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2205      	movs	r2, #5
 8009140:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009150:	2200      	movs	r2, #0
 8009152:	4619      	mov	r1, r3
 8009154:	f001 fa0e 	bl	800a574 <osMessagePut>
      break;
 8009158:	e02d      	b.n	80091b6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009160:	2b00      	cmp	r3, #0
 8009162:	d017      	beq.n	8009194 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009170:	23ff      	movs	r3, #255	; 0xff
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f960 	bl	8009438 <USBH_Get_StringDesc>
 8009178:	4603      	mov	r3, r0
 800917a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009186:	e018      	b.n	80091ba <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	2b03      	cmp	r3, #3
 800918c:	d115      	bne.n	80091ba <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
      break;
 8009192:	e012      	b.n	80091ba <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73fb      	strb	r3, [r7, #15]
      break;
 8009198:	e00f      	b.n	80091ba <USBH_HandleEnum+0x44a>

    default:
      break;
 800919a:	bf00      	nop
 800919c:	e00e      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 800919e:	bf00      	nop
 80091a0:	e00c      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091a2:	bf00      	nop
 80091a4:	e00a      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091a6:	bf00      	nop
 80091a8:	e008      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091aa:	bf00      	nop
 80091ac:	e006      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091ae:	bf00      	nop
 80091b0:	e004      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091b2:	bf00      	nop
 80091b4:	e002      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091b6:	bf00      	nop
 80091b8:	e000      	b.n	80091bc <USBH_HandleEnum+0x44c>
      break;
 80091ba:	bf00      	nop
  }
  return Status;
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop

080091c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f804 	bl	800920a <USBH_HandleSof>
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b0b      	cmp	r3, #11
 800921a:	d10a      	bne.n	8009232 <USBH_HandleSof+0x28>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
  }
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800925e:	2200      	movs	r2, #0
 8009260:	4619      	mov	r1, r3
 8009262:	f001 f987 	bl	800a574 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009266:	bf00      	nop
}
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800927e:	bf00      	nop
}
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092be:	2200      	movs	r2, #0
 80092c0:	4619      	mov	r1, r3
 80092c2:	f001 f957 	bl	800a574 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f003 fc92 	bl	800cc1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 f83d 	bl	800a37c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	795b      	ldrb	r3, [r3, #5]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 f837 	bl	800a37c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009322:	2200      	movs	r2, #0
 8009324:	4619      	mov	r1, r3
 8009326:	f001 f925 	bl	800a574 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	f04f 32ff 	mov.w	r2, #4294967295
 800934a:	4618      	mov	r0, r3
 800934c:	f001 f952 	bl	800a5f4 <osMessageGet>
    if (event.status == osEventMessage)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b10      	cmp	r3, #16
 8009354:	d1f2      	bne.n	800933c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fa9e 	bl	8008898 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800935c:	e7ee      	b.n	800933c <USBH_Process_OS+0x8>

0800935e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800937a:	2200      	movs	r2, #0
 800937c:	4619      	mov	r1, r3
 800937e:	f001 f8f9 	bl	800a574 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af02      	add	r7, sp, #8
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009398:	887b      	ldrh	r3, [r7, #2]
 800939a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939e:	d901      	bls.n	80093a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e01b      	b.n	80093dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80093aa:	887b      	ldrh	r3, [r7, #2]
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4613      	mov	r3, r2
 80093b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093b4:	2100      	movs	r1, #0
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f872 	bl	80094a0 <USBH_GetDescriptor>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80093cc:	887a      	ldrh	r2, [r7, #2]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f929 	bl	8009628 <USBH_ParseDevDesc>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	331c      	adds	r3, #28
 80093f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80093f6:	887b      	ldrh	r3, [r7, #2]
 80093f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fc:	d901      	bls.n	8009402 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093fe:	2303      	movs	r3, #3
 8009400:	e016      	b.n	8009430 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009402:	887b      	ldrh	r3, [r7, #2]
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800940c:	2100      	movs	r1, #0
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f846 	bl	80094a0 <USBH_GetDescriptor>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d107      	bne.n	800942e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800941e:	887b      	ldrh	r3, [r7, #2]
 8009420:	461a      	mov	r2, r3
 8009422:	68b9      	ldr	r1, [r7, #8]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f9b3 	bl	8009790 <USBH_ParseCfgDesc>
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	461a      	mov	r2, r3
 8009444:	460b      	mov	r3, r1
 8009446:	72fb      	strb	r3, [r7, #11]
 8009448:	4613      	mov	r3, r2
 800944a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800944c:	893b      	ldrh	r3, [r7, #8]
 800944e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009452:	d802      	bhi.n	800945a <USBH_Get_StringDesc+0x22>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800945a:	2303      	movs	r3, #3
 800945c:	e01c      	b.n	8009498 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	b29b      	uxth	r3, r3
 8009462:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009466:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800946e:	893b      	ldrh	r3, [r7, #8]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	460b      	mov	r3, r1
 8009474:	2100      	movs	r1, #0
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f812 	bl	80094a0 <USBH_GetDescriptor>
 800947c:	4603      	mov	r3, r0
 800947e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d107      	bne.n	8009496 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800948c:	893a      	ldrh	r2, [r7, #8]
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fb93 	bl	8009bbc <USBH_ParseStringDesc>
  }

  return status;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	72fb      	strb	r3, [r7, #11]
 80094ae:	4613      	mov	r3, r2
 80094b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	789b      	ldrb	r3, [r3, #2]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d11c      	bne.n	80094f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2206      	movs	r2, #6
 80094ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	893a      	ldrh	r2, [r7, #8]
 80094d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094dc:	d104      	bne.n	80094e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f240 4209 	movw	r2, #1033	; 0x409
 80094e4:	829a      	strh	r2, [r3, #20]
 80094e6:	e002      	b.n	80094ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8b3a      	ldrh	r2, [r7, #24]
 80094f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80094f4:	8b3b      	ldrh	r3, [r7, #24]
 80094f6:	461a      	mov	r2, r3
 80094f8:	6879      	ldr	r1, [r7, #4]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 fbac 	bl	8009c58 <USBH_CtlReq>
 8009500:	4603      	mov	r3, r0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	789b      	ldrb	r3, [r3, #2]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d10f      	bne.n	800953e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2205      	movs	r2, #5
 8009528:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	b29a      	uxth	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fb88 	bl	8009c58 <USBH_CtlReq>
 8009548:	4603      	mov	r3, r0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	789b      	ldrb	r3, [r3, #2]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d10e      	bne.n	8009584 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2209      	movs	r2, #9
 8009570:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	887a      	ldrh	r2, [r7, #2]
 8009576:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009584:	2200      	movs	r2, #0
 8009586:	2100      	movs	r1, #0
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fb65 	bl	8009c58 <USBH_CtlReq>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	789b      	ldrb	r3, [r3, #2]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d10f      	bne.n	80095cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2203      	movs	r2, #3
 80095b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095cc:	2200      	movs	r2, #0
 80095ce:	2100      	movs	r1, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fb41 	bl	8009c58 <USBH_CtlReq>
 80095d6:	4603      	mov	r3, r0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	789b      	ldrb	r3, [r3, #2]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d10f      	bne.n	8009614 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	b29a      	uxth	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009614:	2200      	movs	r2, #0
 8009616:	2100      	movs	r1, #0
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fb1d 	bl	8009c58 <USBH_CtlReq>
 800961e:	4603      	mov	r3, r0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f203 3326 	addw	r3, r3, #806	; 0x326
 800963c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	e098      	b.n	800977e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	785a      	ldrb	r2, [r3, #1]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3302      	adds	r3, #2
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	b29a      	uxth	r2, r3
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	3303      	adds	r3, #3
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	b29b      	uxth	r3, r3
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	b29b      	uxth	r3, r3
 8009670:	4313      	orrs	r3, r2
 8009672:	b29a      	uxth	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	791a      	ldrb	r2, [r3, #4]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	795a      	ldrb	r2, [r3, #5]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	799a      	ldrb	r2, [r3, #6]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	79da      	ldrb	r2, [r3, #7]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d11b      	bne.n	80096e4 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	79db      	ldrb	r3, [r3, #7]
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	dc0f      	bgt.n	80096d4 <USBH_ParseDevDesc+0xac>
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	db0f      	blt.n	80096d8 <USBH_ParseDevDesc+0xb0>
 80096b8:	3b08      	subs	r3, #8
 80096ba:	4a34      	ldr	r2, [pc, #208]	; (800978c <USBH_ParseDevDesc+0x164>)
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bf14      	ite	ne
 80096c8:	2301      	movne	r3, #1
 80096ca:	2300      	moveq	r3, #0
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d106      	bne.n	80096e0 <USBH_ParseDevDesc+0xb8>
 80096d2:	e001      	b.n	80096d8 <USBH_ParseDevDesc+0xb0>
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	d003      	beq.n	80096e0 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2208      	movs	r2, #8
 80096dc:	71da      	strb	r2, [r3, #7]
        break;
 80096de:	e000      	b.n	80096e2 <USBH_ParseDevDesc+0xba>
        break;
 80096e0:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80096e2:	e00e      	b.n	8009702 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d107      	bne.n	80096fe <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	79db      	ldrb	r3, [r3, #7]
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d005      	beq.n	8009702 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	2208      	movs	r2, #8
 80096fa:	71da      	strb	r2, [r3, #7]
 80096fc:	e001      	b.n	8009702 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80096fe:	2303      	movs	r3, #3
 8009700:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009702:	88fb      	ldrh	r3, [r7, #6]
 8009704:	2b08      	cmp	r3, #8
 8009706:	d939      	bls.n	800977c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3308      	adds	r3, #8
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	b29a      	uxth	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3309      	adds	r3, #9
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	b29b      	uxth	r3, r3
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	b29b      	uxth	r3, r3
 800971c:	4313      	orrs	r3, r2
 800971e:	b29a      	uxth	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	330a      	adds	r3, #10
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b29a      	uxth	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	330b      	adds	r3, #11
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	b29b      	uxth	r3, r3
 8009738:	4313      	orrs	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	330c      	adds	r3, #12
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b29a      	uxth	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	330d      	adds	r3, #13
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	b29a      	uxth	r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	7b9a      	ldrb	r2, [r3, #14]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	7bda      	ldrb	r2, [r3, #15]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	7c1a      	ldrb	r2, [r3, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	7c5a      	ldrb	r2, [r3, #17]
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800977c:	7dfb      	ldrb	r3, [r7, #23]
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	01000101 	.word	0x01000101

08009790 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	; 0x30
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80097a4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80097be:	2302      	movs	r3, #2
 80097c0:	e0db      	b.n	800997a <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	785a      	ldrb	r2, [r3, #1]
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	3302      	adds	r3, #2
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	3303      	adds	r3, #3
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	4313      	orrs	r3, r2
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f2:	bf28      	it	cs
 80097f4:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	791a      	ldrb	r2, [r3, #4]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	795a      	ldrb	r2, [r3, #5]
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	799a      	ldrb	r2, [r3, #6]
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	79da      	ldrb	r2, [r3, #7]
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	7a1a      	ldrb	r2, [r3, #8]
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d002      	beq.n	8009834 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	2209      	movs	r2, #9
 8009832:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009834:	88fb      	ldrh	r3, [r7, #6]
 8009836:	2b09      	cmp	r3, #9
 8009838:	f240 809d 	bls.w	8009976 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800983c:	2309      	movs	r3, #9
 800983e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009844:	e081      	b.n	800994a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009846:	f107 0316 	add.w	r3, r7, #22
 800984a:	4619      	mov	r1, r3
 800984c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984e:	f000 f9e8 	bl	8009c22 <USBH_GetNextDesc>
 8009852:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	785b      	ldrb	r3, [r3, #1]
 8009858:	2b04      	cmp	r3, #4
 800985a:	d176      	bne.n	800994a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2b09      	cmp	r3, #9
 8009862:	d002      	beq.n	800986a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	2209      	movs	r2, #9
 8009868:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800986a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800986e:	221a      	movs	r2, #26
 8009870:	fb02 f303 	mul.w	r3, r2, r3
 8009874:	3308      	adds	r3, #8
 8009876:	6a3a      	ldr	r2, [r7, #32]
 8009878:	4413      	add	r3, r2
 800987a:	3302      	adds	r3, #2
 800987c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800987e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009880:	69f8      	ldr	r0, [r7, #28]
 8009882:	f000 f87e 	bl	8009982 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009890:	e043      	b.n	800991a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009892:	f107 0316 	add.w	r3, r7, #22
 8009896:	4619      	mov	r1, r3
 8009898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989a:	f000 f9c2 	bl	8009c22 <USBH_GetNextDesc>
 800989e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d138      	bne.n	800991a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	795b      	ldrb	r3, [r3, #5]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d113      	bne.n	80098d8 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d003      	beq.n	80098c0 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	799b      	ldrb	r3, [r3, #6]
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d10b      	bne.n	80098d8 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	79db      	ldrb	r3, [r3, #7]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <USBH_ParseCfgDesc+0x150>
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b09      	cmp	r3, #9
 80098ce:	d007      	beq.n	80098e0 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2209      	movs	r2, #9
 80098d4:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098d6:	e003      	b.n	80098e0 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80098d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098da:	2207      	movs	r2, #7
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	e000      	b.n	80098e2 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80098e0:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80098e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80098ea:	3201      	adds	r2, #1
 80098ec:	00d2      	lsls	r2, r2, #3
 80098ee:	211a      	movs	r1, #26
 80098f0:	fb01 f303 	mul.w	r3, r1, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	3308      	adds	r3, #8
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	4413      	add	r3, r2
 80098fc:	3304      	adds	r3, #4
 80098fe:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009902:	69b9      	ldr	r1, [r7, #24]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f870 	bl	80099ea <USBH_ParseEPDesc>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009914:	3301      	adds	r3, #1
 8009916:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	791b      	ldrb	r3, [r3, #4]
 800991e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009922:	429a      	cmp	r2, r3
 8009924:	d204      	bcs.n	8009930 <USBH_ParseCfgDesc+0x1a0>
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	885a      	ldrh	r2, [r3, #2]
 800992a:	8afb      	ldrh	r3, [r7, #22]
 800992c:	429a      	cmp	r2, r3
 800992e:	d8b0      	bhi.n	8009892 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	791b      	ldrb	r3, [r3, #4]
 8009934:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009938:	429a      	cmp	r2, r3
 800993a:	d201      	bcs.n	8009940 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800993c:	2303      	movs	r3, #3
 800993e:	e01c      	b.n	800997a <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8009940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009944:	3301      	adds	r3, #1
 8009946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800994a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800994e:	2b01      	cmp	r3, #1
 8009950:	d805      	bhi.n	800995e <USBH_ParseCfgDesc+0x1ce>
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	885a      	ldrh	r2, [r3, #2]
 8009956:	8afb      	ldrh	r3, [r7, #22]
 8009958:	429a      	cmp	r2, r3
 800995a:	f63f af74 	bhi.w	8009846 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	791b      	ldrb	r3, [r3, #4]
 8009962:	2b02      	cmp	r3, #2
 8009964:	bf28      	it	cs
 8009966:	2302      	movcs	r3, #2
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800996e:	429a      	cmp	r2, r3
 8009970:	d201      	bcs.n	8009976 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8009972:	2303      	movs	r3, #3
 8009974:	e001      	b.n	800997a <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8009976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800997a:	4618      	mov	r0, r3
 800997c:	3730      	adds	r7, #48	; 0x30
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781a      	ldrb	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	785a      	ldrb	r2, [r3, #1]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	789a      	ldrb	r2, [r3, #2]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	78da      	ldrb	r2, [r3, #3]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	3304      	adds	r3, #4
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	bf28      	it	cs
 80099b6:	2302      	movcs	r3, #2
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	795a      	ldrb	r2, [r3, #5]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	799a      	ldrb	r2, [r3, #6]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	79da      	ldrb	r2, [r3, #7]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	7a1a      	ldrb	r2, [r3, #8]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	721a      	strb	r2, [r3, #8]
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	781a      	ldrb	r2, [r3, #0]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	785a      	ldrb	r2, [r3, #1]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	789a      	ldrb	r2, [r3, #2]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	78da      	ldrb	r2, [r3, #3]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3305      	adds	r3, #5
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	021b      	lsls	r3, r3, #8
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	799a      	ldrb	r2, [r3, #6]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	889b      	ldrh	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a4e:	d804      	bhi.n	8009a5a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a58:	d901      	bls.n	8009a5e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d136      	bne.n	8009ad6 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	78db      	ldrb	r3, [r3, #3]
 8009a6c:	f003 0303 	and.w	r3, r3, #3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d108      	bne.n	8009a86 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	889b      	ldrh	r3, [r3, #4]
 8009a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7c:	f240 8097 	bls.w	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009a80:	2303      	movs	r3, #3
 8009a82:	75fb      	strb	r3, [r7, #23]
 8009a84:	e093      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	78db      	ldrb	r3, [r3, #3]
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d107      	bne.n	8009aa2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	889b      	ldrh	r3, [r3, #4]
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	f240 8089 	bls.w	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	75fb      	strb	r3, [r7, #23]
 8009aa0:	e085      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	78db      	ldrb	r3, [r3, #3]
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d005      	beq.n	8009aba <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	78db      	ldrb	r3, [r3, #3]
 8009ab2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d10a      	bne.n	8009ad0 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	799b      	ldrb	r3, [r3, #6]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <USBH_ParseEPDesc+0xe0>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	799b      	ldrb	r3, [r3, #6]
 8009ac6:	2b10      	cmp	r3, #16
 8009ac8:	d970      	bls.n	8009bac <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009aca:	2303      	movs	r3, #3
 8009acc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ace:	e06d      	b.n	8009bac <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	75fb      	strb	r3, [r7, #23]
 8009ad4:	e06b      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d13c      	bne.n	8009b5a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d005      	beq.n	8009af8 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	78db      	ldrb	r3, [r3, #3]
 8009af0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	889b      	ldrh	r3, [r3, #4]
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d956      	bls.n	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b00:	2303      	movs	r3, #3
 8009b02:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b04:	e053      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	78db      	ldrb	r3, [r3, #3]
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d10e      	bne.n	8009b30 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	799b      	ldrb	r3, [r3, #6]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d803      	bhi.n	8009b2a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009b26:	2b40      	cmp	r3, #64	; 0x40
 8009b28:	d941      	bls.n	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	75fb      	strb	r3, [r7, #23]
 8009b2e:	e03e      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	78db      	ldrb	r3, [r3, #3]
 8009b34:	f003 0303 	and.w	r3, r3, #3
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d10b      	bne.n	8009b54 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	799b      	ldrb	r3, [r3, #6]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d004      	beq.n	8009b4e <USBH_ParseEPDesc+0x164>
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	889b      	ldrh	r3, [r3, #4]
 8009b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b4c:	d32f      	bcc.n	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	75fb      	strb	r3, [r7, #23]
 8009b52:	e02c      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e029      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d120      	bne.n	8009ba6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	78db      	ldrb	r3, [r3, #3]
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	889b      	ldrh	r3, [r3, #4]
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d01a      	beq.n	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	75fb      	strb	r3, [r7, #23]
 8009b7c:	e017      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	78db      	ldrb	r3, [r3, #3]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d10a      	bne.n	8009ba0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	799b      	ldrb	r3, [r3, #6]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <USBH_ParseEPDesc+0x1b0>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	889b      	ldrh	r3, [r3, #4]
 8009b96:	2b08      	cmp	r3, #8
 8009b98:	d909      	bls.n	8009bae <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	75fb      	strb	r3, [r7, #23]
 8009b9e:	e006      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	75fb      	strb	r3, [r7, #23]
 8009ba4:	e003      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	75fb      	strb	r3, [r7, #23]
 8009baa:	e000      	b.n	8009bae <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bac:	bf00      	nop
  }

  return status;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	371c      	adds	r7, #28
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d120      	bne.n	8009c16 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	1e9a      	subs	r2, r3, #2
 8009bda:	88fb      	ldrh	r3, [r7, #6]
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	bf28      	it	cs
 8009be0:	4613      	movcs	r3, r2
 8009be2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3302      	adds	r3, #2
 8009be8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009bea:	2300      	movs	r3, #0
 8009bec:	82fb      	strh	r3, [r7, #22]
 8009bee:	e00b      	b.n	8009c08 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009bf0:	8afb      	ldrh	r3, [r7, #22]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	781a      	ldrb	r2, [r3, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c02:	8afb      	ldrh	r3, [r7, #22]
 8009c04:	3302      	adds	r3, #2
 8009c06:	82fb      	strh	r3, [r7, #22]
 8009c08:	8afa      	ldrh	r2, [r7, #22]
 8009c0a:	8abb      	ldrh	r3, [r7, #20]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d3ef      	bcc.n	8009bf0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2200      	movs	r2, #0
 8009c14:	701a      	strb	r2, [r3, #0]
  }
}
 8009c16:	bf00      	nop
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b085      	sub	sp, #20
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	881a      	ldrh	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	4413      	add	r3, r2
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4413      	add	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	789b      	ldrb	r3, [r3, #2]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d002      	beq.n	8009c78 <USBH_CtlReq+0x20>
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d01d      	beq.n	8009cb2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009c76:	e043      	b.n	8009d00 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	88fa      	ldrh	r2, [r7, #6]
 8009c82:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009c90:	2301      	movs	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2203      	movs	r2, #3
 8009c98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4619      	mov	r1, r3
 8009cac:	f000 fc62 	bl	800a574 <osMessagePut>
      break;
 8009cb0:	e026      	b.n	8009d00 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f82a 	bl	8009d0c <USBH_HandleControl>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <USBH_CtlReq+0x70>
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d106      	bne.n	8009cd6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	761a      	strb	r2, [r3, #24]
 8009cd4:	e005      	b.n	8009ce2 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d102      	bne.n	8009ce2 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f000 fc3b 	bl	800a574 <osMessagePut>
      break;
 8009cfe:	bf00      	nop
  }
  return status;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d14:	2301      	movs	r3, #1
 8009d16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7e1b      	ldrb	r3, [r3, #24]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	2b0a      	cmp	r3, #10
 8009d24:	f200 8229 	bhi.w	800a17a <USBH_HandleControl+0x46e>
 8009d28:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <USBH_HandleControl+0x24>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	08009d77 	.word	0x08009d77
 8009d38:	08009e19 	.word	0x08009e19
 8009d3c:	08009e3f 	.word	0x08009e3f
 8009d40:	08009ecb 	.word	0x08009ecb
 8009d44:	08009ef5 	.word	0x08009ef5
 8009d48:	08009fb7 	.word	0x08009fb7
 8009d4c:	08009fd9 	.word	0x08009fd9
 8009d50:	0800a06b 	.word	0x0800a06b
 8009d54:	0800a091 	.word	0x0800a091
 8009d58:	0800a123 	.word	0x0800a123
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0110 	add.w	r1, r3, #16
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	795b      	ldrb	r3, [r3, #5]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fa17 	bl	800a19c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	761a      	strb	r2, [r3, #24]
      break;
 8009d74:	e20c      	b.n	800a190 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	795b      	ldrb	r3, [r3, #5]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f003 f83b 	bl	800cdf8 <USBH_LL_GetURBState>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d12c      	bne.n	8009de6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7c1b      	ldrb	r3, [r3, #16]
 8009d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8adb      	ldrh	r3, [r3, #22]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d9e:	7b7b      	ldrb	r3, [r7, #13]
 8009da0:	2b80      	cmp	r3, #128	; 0x80
 8009da2:	d103      	bne.n	8009dac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2203      	movs	r2, #3
 8009da8:	761a      	strb	r2, [r3, #24]
 8009daa:	e00d      	b.n	8009dc8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2205      	movs	r2, #5
 8009db0:	761a      	strb	r2, [r3, #24]
 8009db2:	e009      	b.n	8009dc8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009db4:	7b7b      	ldrb	r3, [r7, #13]
 8009db6:	2b80      	cmp	r3, #128	; 0x80
 8009db8:	d103      	bne.n	8009dc2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2209      	movs	r2, #9
 8009dbe:	761a      	strb	r2, [r3, #24]
 8009dc0:	e002      	b.n	8009dc8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2207      	movs	r2, #7
 8009dc6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4619      	mov	r1, r3
 8009de0:	f000 fbc8 	bl	800a574 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009de4:	e1cb      	b.n	800a17e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d003      	beq.n	8009df4 <USBH_HandleControl+0xe8>
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	f040 81c5 	bne.w	800a17e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	220b      	movs	r2, #11
 8009df8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2203      	movs	r2, #3
 8009dfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4619      	mov	r1, r3
 8009e12:	f000 fbaf 	bl	800a574 <osMessagePut>
      break;
 8009e16:	e1b2      	b.n	800a17e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6899      	ldr	r1, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	899a      	ldrh	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	791b      	ldrb	r3, [r3, #4]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f9f2 	bl	800a21a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	761a      	strb	r2, [r3, #24]
      break;
 8009e3c:	e1a8      	b.n	800a190 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	791b      	ldrb	r3, [r3, #4]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f002 ffd7 	bl	800cdf8 <USBH_LL_GetURBState>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d110      	bne.n	8009e76 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2209      	movs	r2, #9
 8009e58:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2203      	movs	r2, #3
 8009e5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4619      	mov	r1, r3
 8009e72:	f000 fb7f 	bl	800a574 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b05      	cmp	r3, #5
 8009e7a:	d110      	bne.n	8009e9e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2203      	movs	r2, #3
 8009e84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e94:	2200      	movs	r2, #0
 8009e96:	4619      	mov	r1, r3
 8009e98:	f000 fb6c 	bl	800a574 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e9c:	e171      	b.n	800a182 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	f040 816e 	bne.w	800a182 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	220b      	movs	r2, #11
 8009eaa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2203      	movs	r2, #3
 8009eb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f000 fb56 	bl	800a574 <osMessagePut>
      break;
 8009ec8:	e15b      	b.n	800a182 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6899      	ldr	r1, [r3, #8]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	899a      	ldrh	r2, [r3, #12]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	795b      	ldrb	r3, [r3, #5]
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	9000      	str	r0, [sp, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f978 	bl	800a1d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2206      	movs	r2, #6
 8009ef0:	761a      	strb	r2, [r3, #24]
      break;
 8009ef2:	e14d      	b.n	800a190 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	795b      	ldrb	r3, [r3, #5]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f002 ff7c 	bl	800cdf8 <USBH_LL_GetURBState>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d111      	bne.n	8009f2e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2207      	movs	r2, #7
 8009f0e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2203      	movs	r2, #3
 8009f14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f24:	2200      	movs	r2, #0
 8009f26:	4619      	mov	r1, r3
 8009f28:	f000 fb24 	bl	800a574 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f2c:	e12b      	b.n	800a186 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	2b05      	cmp	r3, #5
 8009f32:	d113      	bne.n	8009f5c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	220c      	movs	r2, #12
 8009f38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2203      	movs	r2, #3
 8009f42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f52:	2200      	movs	r2, #0
 8009f54:	4619      	mov	r1, r3
 8009f56:	f000 fb0d 	bl	800a574 <osMessagePut>
      break;
 8009f5a:	e114      	b.n	800a186 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d111      	bne.n	8009f86 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2205      	movs	r2, #5
 8009f66:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4619      	mov	r1, r3
 8009f80:	f000 faf8 	bl	800a574 <osMessagePut>
      break;
 8009f84:	e0ff      	b.n	800a186 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	f040 80fc 	bne.w	800a186 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	220b      	movs	r2, #11
 8009f92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009f94:	2302      	movs	r3, #2
 8009f96:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fac:	2200      	movs	r2, #0
 8009fae:	4619      	mov	r1, r3
 8009fb0:	f000 fae0 	bl	800a574 <osMessagePut>
      break;
 8009fb4:	e0e7      	b.n	800a186 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	791b      	ldrb	r3, [r3, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f92b 	bl	800a21a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	761a      	strb	r2, [r3, #24]

      break;
 8009fd6:	e0db      	b.n	800a190 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	791b      	ldrb	r3, [r3, #4]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f002 ff0a 	bl	800cdf8 <USBH_LL_GetURBState>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d113      	bne.n	800a016 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	220d      	movs	r2, #13
 8009ff2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2203      	movs	r2, #3
 8009ffc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a00c:	2200      	movs	r2, #0
 800a00e:	4619      	mov	r1, r3
 800a010:	f000 fab0 	bl	800a574 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a014:	e0b9      	b.n	800a18a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d111      	bne.n	800a040 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	220b      	movs	r2, #11
 800a020:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2203      	movs	r2, #3
 800a026:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a036:	2200      	movs	r2, #0
 800a038:	4619      	mov	r1, r3
 800a03a:	f000 fa9b 	bl	800a574 <osMessagePut>
      break;
 800a03e:	e0a4      	b.n	800a18a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b05      	cmp	r3, #5
 800a044:	f040 80a1 	bne.w	800a18a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a048:	2303      	movs	r3, #3
 800a04a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2203      	movs	r2, #3
 800a050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a060:	2200      	movs	r2, #0
 800a062:	4619      	mov	r1, r3
 800a064:	f000 fa86 	bl	800a574 <osMessagePut>
      break;
 800a068:	e08f      	b.n	800a18a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	795b      	ldrb	r3, [r3, #5]
 800a06e:	2201      	movs	r2, #1
 800a070:	9200      	str	r2, [sp, #0]
 800a072:	2200      	movs	r2, #0
 800a074:	2100      	movs	r1, #0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f8aa 	bl	800a1d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	220a      	movs	r2, #10
 800a08c:	761a      	strb	r2, [r3, #24]
      break;
 800a08e:	e07f      	b.n	800a190 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	795b      	ldrb	r3, [r3, #5]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f002 feae 	bl	800cdf8 <USBH_LL_GetURBState>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d113      	bne.n	800a0ce <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	220d      	movs	r2, #13
 800a0ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2203      	movs	r2, #3
 800a0b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	f000 fa54 	bl	800a574 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0cc:	e05f      	b.n	800a18e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d111      	bne.n	800a0f8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2209      	movs	r2, #9
 800a0d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2203      	movs	r2, #3
 800a0de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f000 fa3f 	bl	800a574 <osMessagePut>
      break;
 800a0f6:	e04a      	b.n	800a18e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d147      	bne.n	800a18e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	220b      	movs	r2, #11
 800a102:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2203      	movs	r2, #3
 800a108:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a118:	2200      	movs	r2, #0
 800a11a:	4619      	mov	r1, r3
 800a11c:	f000 fa2a 	bl	800a574 <osMessagePut>
      break;
 800a120:	e035      	b.n	800a18e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	7e5b      	ldrb	r3, [r3, #25]
 800a126:	3301      	adds	r3, #1
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	765a      	strb	r2, [r3, #25]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	7e5b      	ldrb	r3, [r3, #25]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d806      	bhi.n	800a144 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a142:	e025      	b.n	800a190 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a14a:	2106      	movs	r1, #6
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	795b      	ldrb	r3, [r3, #5]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f90d 	bl	800a37c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	791b      	ldrb	r3, [r3, #4]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f907 	bl	800a37c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a174:	2302      	movs	r3, #2
 800a176:	73fb      	strb	r3, [r7, #15]
      break;
 800a178:	e00a      	b.n	800a190 <USBH_HandleControl+0x484>

    default:
      break;
 800a17a:	bf00      	nop
 800a17c:	e008      	b.n	800a190 <USBH_HandleControl+0x484>
      break;
 800a17e:	bf00      	nop
 800a180:	e006      	b.n	800a190 <USBH_HandleControl+0x484>
      break;
 800a182:	bf00      	nop
 800a184:	e004      	b.n	800a190 <USBH_HandleControl+0x484>
      break;
 800a186:	bf00      	nop
 800a188:	e002      	b.n	800a190 <USBH_HandleControl+0x484>
      break;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <USBH_HandleControl+0x484>
      break;
 800a18e:	bf00      	nop
  }

  return status;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop

0800a19c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af04      	add	r7, sp, #16
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1aa:	79f9      	ldrb	r1, [r7, #7]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9303      	str	r3, [sp, #12]
 800a1b0:	2308      	movs	r3, #8
 800a1b2:	9302      	str	r3, [sp, #8]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	9301      	str	r3, [sp, #4]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2200      	movs	r2, #0
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f002 fde8 	bl	800cd96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af04      	add	r7, sp, #16
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	461a      	mov	r2, r3
 800a1de:	460b      	mov	r3, r1
 800a1e0:	80fb      	strh	r3, [r7, #6]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1f4:	7979      	ldrb	r1, [r7, #5]
 800a1f6:	7e3b      	ldrb	r3, [r7, #24]
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	88fb      	ldrh	r3, [r7, #6]
 800a1fc:	9302      	str	r3, [sp, #8]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	2301      	movs	r3, #1
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	2300      	movs	r3, #0
 800a208:	2200      	movs	r2, #0
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f002 fdc3 	bl	800cd96 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b088      	sub	sp, #32
 800a21e:	af04      	add	r7, sp, #16
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	4611      	mov	r1, r2
 800a226:	461a      	mov	r2, r3
 800a228:	460b      	mov	r3, r1
 800a22a:	80fb      	strh	r3, [r7, #6]
 800a22c:	4613      	mov	r3, r2
 800a22e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a230:	7979      	ldrb	r1, [r7, #5]
 800a232:	2300      	movs	r3, #0
 800a234:	9303      	str	r3, [sp, #12]
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	9302      	str	r3, [sp, #8]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	2301      	movs	r3, #1
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	2201      	movs	r2, #1
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f002 fda5 	bl	800cd96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a24c:	2300      	movs	r3, #0

}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b088      	sub	sp, #32
 800a25a:	af04      	add	r7, sp, #16
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	4611      	mov	r1, r2
 800a262:	461a      	mov	r2, r3
 800a264:	460b      	mov	r3, r1
 800a266:	80fb      	strh	r3, [r7, #6]
 800a268:	4613      	mov	r3, r2
 800a26a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a27a:	7979      	ldrb	r1, [r7, #5]
 800a27c:	7e3b      	ldrb	r3, [r7, #24]
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	9302      	str	r3, [sp, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	2301      	movs	r3, #1
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2302      	movs	r3, #2
 800a28e:	2200      	movs	r2, #0
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f002 fd80 	bl	800cd96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	80fb      	strh	r3, [r7, #6]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2b6:	7979      	ldrb	r1, [r7, #5]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9303      	str	r3, [sp, #12]
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	9302      	str	r3, [sp, #8]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f002 fd62 	bl	800cd96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af04      	add	r7, sp, #16
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	70fb      	strb	r3, [r7, #3]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70bb      	strb	r3, [r7, #2]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a2f6:	7878      	ldrb	r0, [r7, #1]
 800a2f8:	78ba      	ldrb	r2, [r7, #2]
 800a2fa:	78f9      	ldrb	r1, [r7, #3]
 800a2fc:	8b3b      	ldrh	r3, [r7, #24]
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	7d3b      	ldrb	r3, [r7, #20]
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	7c3b      	ldrb	r3, [r7, #16]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4603      	mov	r3, r0
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f002 fcf5 	bl	800ccfa <USBH_LL_OpenPipe>

  return USBH_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f002 fd14 	bl	800cd58 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f836 	bl	800a3b8 <USBH_GetFreePipe>
 800a34c:	4603      	mov	r3, r0
 800a34e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a350:	89fb      	ldrh	r3, [r7, #14]
 800a352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a356:	4293      	cmp	r3, r2
 800a358:	d00a      	beq.n	800a370 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a35a:	78fa      	ldrb	r2, [r7, #3]
 800a35c:	89fb      	ldrh	r3, [r7, #14]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	33e0      	adds	r3, #224	; 0xe0
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	440b      	add	r3, r1
 800a36e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	b2db      	uxtb	r3, r3
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	2b0f      	cmp	r3, #15
 800a38c:	d80d      	bhi.n	800a3aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	33e0      	adds	r3, #224	; 0xe0
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4413      	add	r3, r2
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	33e0      	adds	r3, #224	; 0xe0
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	440b      	add	r3, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
 800a3c8:	e00f      	b.n	800a3ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	33e0      	adds	r3, #224	; 0xe0
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	e007      	b.n	800a3f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	2b0f      	cmp	r3, #15
 800a3ee:	d9ec      	bls.n	800a3ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a3f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a40e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a412:	2b84      	cmp	r3, #132	; 0x84
 800a414:	d005      	beq.n	800a422 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a416:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	4413      	add	r3, r2
 800a41e:	3303      	adds	r3, #3
 800a420:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a436:	f3ef 8305 	mrs	r3, IPSR
 800a43a:	607b      	str	r3, [r7, #4]
  return(result);
 800a43c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a43e:	2b00      	cmp	r3, #0
 800a440:	bf14      	ite	ne
 800a442:	2301      	movne	r3, #1
 800a444:	2300      	moveq	r3, #0
 800a446:	b2db      	uxtb	r3, r3
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a458:	f001 f90a 	bl	800b670 <vTaskStartScheduler>
  
  return osOK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	bd80      	pop	{r7, pc}

0800a462 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a462:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a464:	b089      	sub	sp, #36	; 0x24
 800a466:	af04      	add	r7, sp, #16
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d020      	beq.n	800a4b6 <osThreadCreate+0x54>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01c      	beq.n	800a4b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685c      	ldr	r4, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	691e      	ldr	r6, [r3, #16]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff ffb6 	bl	800a400 <makeFreeRtosPriority>
 800a494:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a49e:	9202      	str	r2, [sp, #8]
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	9100      	str	r1, [sp, #0]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	4632      	mov	r2, r6
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 ff0e 	bl	800b2cc <xTaskCreateStatic>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	e01c      	b.n	800a4f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685c      	ldr	r4, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff ff98 	bl	800a400 <makeFreeRtosPriority>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	9200      	str	r2, [sp, #0]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	4632      	mov	r2, r6
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 ff50 	bl	800b386 <xTaskCreate>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d001      	beq.n	800a4f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e000      	b.n	800a4f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <osDelay+0x16>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	e000      	b.n	800a512 <osDelay+0x18>
 800a510:	2301      	movs	r3, #1
 800a512:	4618      	mov	r0, r3
 800a514:	f001 f878 	bl	800b608 <vTaskDelay>
  
  return osOK;
 800a518:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a522:	b590      	push	{r4, r7, lr}
 800a524:	b085      	sub	sp, #20
 800a526:	af02      	add	r7, sp, #8
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d011      	beq.n	800a558 <osMessageCreate+0x36>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00d      	beq.n	800a558 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6859      	ldr	r1, [r3, #4]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2400      	movs	r4, #0
 800a54e:	9400      	str	r4, [sp, #0]
 800a550:	f000 f9e0 	bl	800a914 <xQueueGenericCreateStatic>
 800a554:	4603      	mov	r3, r0
 800a556:	e008      	b.n	800a56a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	4619      	mov	r1, r3
 800a564:	f000 fa4e 	bl	800aa04 <xQueueGenericCreate>
 800a568:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd90      	pop	{r4, r7, pc}
	...

0800a574 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a580:	2300      	movs	r3, #0
 800a582:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <osMessagePut+0x1e>
    ticks = 1;
 800a58e:	2301      	movs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a592:	f7ff ff4d 	bl	800a430 <inHandlerMode>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d018      	beq.n	800a5ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a59c:	f107 0210 	add.w	r2, r7, #16
 800a5a0:	f107 0108 	add.w	r1, r7, #8
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fb84 	bl	800acb4 <xQueueGenericSendFromISR>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d001      	beq.n	800a5b6 <osMessagePut+0x42>
      return osErrorOS;
 800a5b2:	23ff      	movs	r3, #255	; 0xff
 800a5b4:	e018      	b.n	800a5e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d014      	beq.n	800a5e6 <osMessagePut+0x72>
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <osMessagePut+0x7c>)
 800a5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	e00b      	b.n	800a5e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a5ce:	f107 0108 	add.w	r1, r7, #8
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 fa6e 	bl	800aab8 <xQueueGenericSend>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d001      	beq.n	800a5e6 <osMessagePut+0x72>
      return osErrorOS;
 800a5e2:	23ff      	movs	r3, #255	; 0xff
 800a5e4:	e000      	b.n	800a5e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a5f4:	b590      	push	{r4, r7, lr}
 800a5f6:	b08b      	sub	sp, #44	; 0x2c
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10a      	bne.n	800a624 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a60e:	2380      	movs	r3, #128	; 0x80
 800a610:	617b      	str	r3, [r7, #20]
    return event;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	461c      	mov	r4, r3
 800a616:	f107 0314 	add.w	r3, r7, #20
 800a61a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a61e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a622:	e054      	b.n	800a6ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a624:	2300      	movs	r3, #0
 800a626:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d103      	bne.n	800a63c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a634:	f04f 33ff 	mov.w	r3, #4294967295
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
 800a63a:	e009      	b.n	800a650 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d006      	beq.n	800a650 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <osMessageGet+0x5c>
      ticks = 1;
 800a64c:	2301      	movs	r3, #1
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a650:	f7ff feee 	bl	800a430 <inHandlerMode>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d01c      	beq.n	800a694 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a65a:	f107 0220 	add.w	r2, r7, #32
 800a65e:	f107 0314 	add.w	r3, r7, #20
 800a662:	3304      	adds	r3, #4
 800a664:	4619      	mov	r1, r3
 800a666:	68b8      	ldr	r0, [r7, #8]
 800a668:	f000 fca0 	bl	800afac <xQueueReceiveFromISR>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d102      	bne.n	800a678 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a672:	2310      	movs	r3, #16
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e001      	b.n	800a67c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01d      	beq.n	800a6be <osMessageGet+0xca>
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <osMessageGet+0xe4>)
 800a684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	e014      	b.n	800a6be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a694:	f107 0314 	add.w	r3, r7, #20
 800a698:	3304      	adds	r3, #4
 800a69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69c:	4619      	mov	r1, r3
 800a69e:	68b8      	ldr	r0, [r7, #8]
 800a6a0:	f000 fba4 	bl	800adec <xQueueReceive>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d102      	bne.n	800a6b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a6aa:	2310      	movs	r3, #16
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e006      	b.n	800a6be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <osMessageGet+0xc6>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e000      	b.n	800a6bc <osMessageGet+0xc8>
 800a6ba:	2340      	movs	r3, #64	; 0x40
 800a6bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	461c      	mov	r4, r3
 800a6c2:	f107 0314 	add.w	r3, r7, #20
 800a6c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	372c      	adds	r7, #44	; 0x2c
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd90      	pop	{r4, r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	e000ed04 	.word	0xe000ed04

0800a6dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f103 0208 	add.w	r2, r3, #8
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f103 0208 	add.w	r2, r3, #8
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f103 0208 	add.w	r2, r3, #8
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	601a      	str	r2, [r3, #0]
}
 800a772:	bf00      	nop
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a794:	d103      	bne.n	800a79e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	e00c      	b.n	800a7b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	e002      	b.n	800a7ac <vListInsert+0x2e>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d2f6      	bcs.n	800a7a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	601a      	str	r2, [r3, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6892      	ldr	r2, [r2, #8]
 800a806:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6852      	ldr	r2, [r2, #4]
 800a810:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d103      	bne.n	800a824 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	689a      	ldr	r2, [r3, #8]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	1e5a      	subs	r2, r3, #1
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a86e:	f001 fd59 	bl	800c324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87a:	68f9      	ldr	r1, [r7, #12]
 800a87c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a87e:	fb01 f303 	mul.w	r3, r1, r3
 800a882:	441a      	add	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	68f9      	ldr	r1, [r7, #12]
 800a8a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	441a      	add	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	22ff      	movs	r2, #255	; 0xff
 800a8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	22ff      	movs	r2, #255	; 0xff
 800a8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d114      	bne.n	800a8ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01a      	beq.n	800a902 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3310      	adds	r3, #16
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 f933 	bl	800bb3c <xTaskRemoveFromEventList>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d012      	beq.n	800a902 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8dc:	4b0c      	ldr	r3, [pc, #48]	; (800a910 <xQueueGenericReset+0xcc>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	e009      	b.n	800a902 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3310      	adds	r3, #16
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fef2 	bl	800a6dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3324      	adds	r3, #36	; 0x24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff feed 	bl	800a6dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a902:	f001 fd3f 	bl	800c384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a906:	2301      	movs	r3, #1
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	e000ed04 	.word	0xe000ed04

0800a914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08e      	sub	sp, #56	; 0x38
 800a918:	af02      	add	r7, sp, #8
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <xQueueGenericCreateStatic+0x52>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <xQueueGenericCreateStatic+0x56>
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <xQueueGenericCreateStatic+0x58>
 800a96a:	2300      	movs	r3, #0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	623b      	str	r3, [r7, #32]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <xQueueGenericCreateStatic+0x7e>
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <xQueueGenericCreateStatic+0x82>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <xQueueGenericCreateStatic+0x84>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	61fb      	str	r3, [r7, #28]
}
 800a9ae:	bf00      	nop
 800a9b0:	e7fe      	b.n	800a9b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a9b2:	2348      	movs	r3, #72	; 0x48
 800a9b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b48      	cmp	r3, #72	; 0x48
 800a9ba:	d00a      	beq.n	800a9d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61bb      	str	r3, [r7, #24]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00d      	beq.n	800a9fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f83f 	bl	800aa78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3730      	adds	r7, #48	; 0x30
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <xQueueGenericCreate+0x2a>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	613b      	str	r3, [r7, #16]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	fb02 f303 	mul.w	r3, r2, r3
 800aa36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	3348      	adds	r3, #72	; 0x48
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 fd93 	bl	800c568 <pvPortMalloc>
 800aa42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d011      	beq.n	800aa6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	3348      	adds	r3, #72	; 0x48
 800aa52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa5c:	79fa      	ldrb	r2, [r7, #7]
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	4613      	mov	r3, r2
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f805 	bl	800aa78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
	}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d103      	bne.n	800aa94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e002      	b.n	800aa9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	69b8      	ldr	r0, [r7, #24]
 800aaaa:	f7ff fecb 	bl	800a844 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08e      	sub	sp, #56	; 0x38
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aac6:	2300      	movs	r3, #0
 800aac8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xQueueGenericSend+0x32>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <xQueueGenericSend+0x40>
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <xQueueGenericSend+0x44>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e000      	b.n	800aafe <xQueueGenericSend+0x46>
 800aafc:	2300      	movs	r3, #0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <xQueueGenericSend+0x60>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d103      	bne.n	800ab26 <xQueueGenericSend+0x6e>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <xQueueGenericSend+0x72>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <xQueueGenericSend+0x74>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	623b      	str	r3, [r7, #32]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab46:	f001 f9b7 	bl	800beb8 <xTaskGetSchedulerState>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <xQueueGenericSend+0x9e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <xQueueGenericSend+0xa2>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e000      	b.n	800ab5c <xQueueGenericSend+0xa4>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	61fb      	str	r3, [r7, #28]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab76:	f001 fbd5 	bl	800c324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d302      	bcc.n	800ab8c <xQueueGenericSend+0xd4>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d129      	bne.n	800abe0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab92:	f000 fa8b 	bl	800b0ac <prvCopyDataToQueue>
 800ab96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d010      	beq.n	800abc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	3324      	adds	r3, #36	; 0x24
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 ffc9 	bl	800bb3c <xTaskRemoveFromEventList>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d013      	beq.n	800abd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abb0:	4b3f      	ldr	r3, [pc, #252]	; (800acb0 <xQueueGenericSend+0x1f8>)
 800abb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	e00a      	b.n	800abd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d007      	beq.n	800abd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abc8:	4b39      	ldr	r3, [pc, #228]	; (800acb0 <xQueueGenericSend+0x1f8>)
 800abca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abd8:	f001 fbd4 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 800abdc:	2301      	movs	r3, #1
 800abde:	e063      	b.n	800aca8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abe6:	f001 fbcd 	bl	800c384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abea:	2300      	movs	r3, #0
 800abec:	e05c      	b.n	800aca8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d106      	bne.n	800ac02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abf4:	f107 0314 	add.w	r3, r7, #20
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 f801 	bl	800bc00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abfe:	2301      	movs	r3, #1
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac02:	f001 fbbf 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac06:	f000 fd93 	bl	800b730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac0a:	f001 fb8b 	bl	800c324 <vPortEnterCritical>
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac14:	b25b      	sxtb	r3, r3
 800ac16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1a:	d103      	bne.n	800ac24 <xQueueGenericSend+0x16c>
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac2a:	b25b      	sxtb	r3, r3
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d103      	bne.n	800ac3a <xQueueGenericSend+0x182>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac3a:	f001 fba3 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac3e:	1d3a      	adds	r2, r7, #4
 800ac40:	f107 0314 	add.w	r3, r7, #20
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 fff0 	bl	800bc2c <xTaskCheckForTimeOut>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d124      	bne.n	800ac9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac54:	f000 fb22 	bl	800b29c <prvIsQueueFull>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d018      	beq.n	800ac90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	3310      	adds	r3, #16
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 ff44 	bl	800baf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac6e:	f000 faad 	bl	800b1cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac72:	f000 fd6b 	bl	800b74c <xTaskResumeAll>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f47f af7c 	bne.w	800ab76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <xQueueGenericSend+0x1f8>)
 800ac80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	e772      	b.n	800ab76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac92:	f000 fa9b 	bl	800b1cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac96:	f000 fd59 	bl	800b74c <xTaskResumeAll>
 800ac9a:	e76c      	b.n	800ab76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac9e:	f000 fa95 	bl	800b1cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aca2:	f000 fd53 	bl	800b74c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aca6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3738      	adds	r7, #56	; 0x38
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	e000ed04 	.word	0xe000ed04

0800acb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b090      	sub	sp, #64	; 0x40
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d103      	bne.n	800acf0 <xQueueGenericSendFromISR+0x3c>
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <xQueueGenericSendFromISR+0x40>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e000      	b.n	800acf6 <xQueueGenericSendFromISR+0x42>
 800acf4:	2300      	movs	r3, #0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d103      	bne.n	800ad1e <xQueueGenericSendFromISR+0x6a>
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d101      	bne.n	800ad22 <xQueueGenericSendFromISR+0x6e>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <xQueueGenericSendFromISR+0x70>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	623b      	str	r3, [r7, #32]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad3e:	f001 fbd3 	bl	800c4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad42:	f3ef 8211 	mrs	r2, BASEPRI
 800ad46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	61fa      	str	r2, [r7, #28]
 800ad58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d302      	bcc.n	800ad70 <xQueueGenericSendFromISR+0xbc>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d12f      	bne.n	800add0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad86:	f000 f991 	bl	800b0ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad92:	d112      	bne.n	800adba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d016      	beq.n	800adca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	3324      	adds	r3, #36	; 0x24
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fecb 	bl	800bb3c <xTaskRemoveFromEventList>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00b      	beq.n	800adca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	e007      	b.n	800adca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800adba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adbe:	3301      	adds	r3, #1
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	b25a      	sxtb	r2, r3
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adca:	2301      	movs	r3, #1
 800adcc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800adce:	e001      	b.n	800add4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800add4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ade0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3740      	adds	r7, #64	; 0x40
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b08c      	sub	sp, #48	; 0x30
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <xQueueReceive+0x30>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	623b      	str	r3, [r7, #32]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d103      	bne.n	800ae2a <xQueueReceive+0x3e>
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <xQueueReceive+0x42>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <xQueueReceive+0x44>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xQueueReceive+0x5e>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	61fb      	str	r3, [r7, #28]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae4a:	f001 f835 	bl	800beb8 <xTaskGetSchedulerState>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <xQueueReceive+0x6e>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <xQueueReceive+0x72>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e000      	b.n	800ae60 <xQueueReceive+0x74>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <xQueueReceive+0x8e>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	61bb      	str	r3, [r7, #24]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae7a:	f001 fa53 	bl	800c324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d01f      	beq.n	800aeca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8e:	f000 f977 	bl	800b180 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00f      	beq.n	800aec2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	3310      	adds	r3, #16
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fe48 	bl	800bb3c <xTaskRemoveFromEventList>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d007      	beq.n	800aec2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aeb2:	4b3d      	ldr	r3, [pc, #244]	; (800afa8 <xQueueReceive+0x1bc>)
 800aeb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aec2:	f001 fa5f 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e069      	b.n	800af9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d103      	bne.n	800aed8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aed0:	f001 fa58 	bl	800c384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aed4:	2300      	movs	r3, #0
 800aed6:	e062      	b.n	800af9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aede:	f107 0310 	add.w	r3, r7, #16
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fe8c 	bl	800bc00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeec:	f001 fa4a 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aef0:	f000 fc1e 	bl	800b730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aef4:	f001 fa16 	bl	800c324 <vPortEnterCritical>
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af04:	d103      	bne.n	800af0e <xQueueReceive+0x122>
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af14:	b25b      	sxtb	r3, r3
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1a:	d103      	bne.n	800af24 <xQueueReceive+0x138>
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af24:	f001 fa2e 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af28:	1d3a      	adds	r2, r7, #4
 800af2a:	f107 0310 	add.w	r3, r7, #16
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fe7b 	bl	800bc2c <xTaskCheckForTimeOut>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d123      	bne.n	800af84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3e:	f000 f997 	bl	800b270 <prvIsQueueEmpty>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d017      	beq.n	800af78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	3324      	adds	r3, #36	; 0x24
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	4611      	mov	r1, r2
 800af50:	4618      	mov	r0, r3
 800af52:	f000 fdcf 	bl	800baf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af58:	f000 f938 	bl	800b1cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af5c:	f000 fbf6 	bl	800b74c <xTaskResumeAll>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d189      	bne.n	800ae7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af66:	4b10      	ldr	r3, [pc, #64]	; (800afa8 <xQueueReceive+0x1bc>)
 800af68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	e780      	b.n	800ae7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af7a:	f000 f927 	bl	800b1cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af7e:	f000 fbe5 	bl	800b74c <xTaskResumeAll>
 800af82:	e77a      	b.n	800ae7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af86:	f000 f921 	bl	800b1cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af8a:	f000 fbdf 	bl	800b74c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af90:	f000 f96e 	bl	800b270 <prvIsQueueEmpty>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	f43f af6f 	beq.w	800ae7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3730      	adds	r7, #48	; 0x30
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	e000ed04 	.word	0xe000ed04

0800afac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08e      	sub	sp, #56	; 0x38
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	623b      	str	r3, [r7, #32]
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d103      	bne.n	800afe6 <xQueueReceiveFromISR+0x3a>
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <xQueueReceiveFromISR+0x3e>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e000      	b.n	800afec <xQueueReceiveFromISR+0x40>
 800afea:	2300      	movs	r3, #0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10a      	bne.n	800b006 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	61fb      	str	r3, [r7, #28]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b006:	f001 fa6f 	bl	800c4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800b00a:	f3ef 8211 	mrs	r2, BASEPRI
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	61ba      	str	r2, [r7, #24]
 800b020:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b022:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b024:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d02f      	beq.n	800b092 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b040:	f000 f89e 	bl	800b180 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	1e5a      	subs	r2, r3, #1
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b04c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b054:	d112      	bne.n	800b07c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d016      	beq.n	800b08c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	3310      	adds	r3, #16
 800b062:	4618      	mov	r0, r3
 800b064:	f000 fd6a 	bl	800bb3c <xTaskRemoveFromEventList>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00e      	beq.n	800b08c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00b      	beq.n	800b08c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	e007      	b.n	800b08c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b080:	3301      	adds	r3, #1
 800b082:	b2db      	uxtb	r3, r3
 800b084:	b25a      	sxtb	r2, r3
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b08c:	2301      	movs	r3, #1
 800b08e:	637b      	str	r3, [r7, #52]	; 0x34
 800b090:	e001      	b.n	800b096 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b092:	2300      	movs	r3, #0
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b098:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f383 8811 	msr	BASEPRI, r3
}
 800b0a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3738      	adds	r7, #56	; 0x38
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10d      	bne.n	800b0e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d14d      	bne.n	800b16e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 ff0c 	bl	800bef4 <xTaskPriorityDisinherit>
 800b0dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	609a      	str	r2, [r3, #8]
 800b0e4:	e043      	b.n	800b16e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d119      	bne.n	800b120 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6858      	ldr	r0, [r3, #4]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	f002 f82e 	bl	800d158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	441a      	add	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	429a      	cmp	r2, r3
 800b114:	d32b      	bcc.n	800b16e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	e026      	b.n	800b16e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	68d8      	ldr	r0, [r3, #12]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	461a      	mov	r2, r3
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	f002 f814 	bl	800d158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b138:	425b      	negs	r3, r3
 800b13a:	441a      	add	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68da      	ldr	r2, [r3, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d207      	bcs.n	800b15c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b154:	425b      	negs	r3, r3
 800b156:	441a      	add	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d105      	bne.n	800b16e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b176:	697b      	ldr	r3, [r7, #20]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d018      	beq.n	800b1c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	441a      	add	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d303      	bcc.n	800b1b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68d9      	ldr	r1, [r3, #12]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1bc:	461a      	mov	r2, r3
 800b1be:	6838      	ldr	r0, [r7, #0]
 800b1c0:	f001 ffca 	bl	800d158 <memcpy>
	}
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1d4:	f001 f8a6 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1e0:	e011      	b.n	800b206 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d012      	beq.n	800b210 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	3324      	adds	r3, #36	; 0x24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fca4 	bl	800bb3c <xTaskRemoveFromEventList>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1fa:	f000 fd79 	bl	800bcf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	3b01      	subs	r3, #1
 800b202:	b2db      	uxtb	r3, r3
 800b204:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dce9      	bgt.n	800b1e2 <prvUnlockQueue+0x16>
 800b20e:	e000      	b.n	800b212 <prvUnlockQueue+0x46>
					break;
 800b210:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	22ff      	movs	r2, #255	; 0xff
 800b216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b21a:	f001 f8b3 	bl	800c384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b21e:	f001 f881 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b228:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b22a:	e011      	b.n	800b250 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d012      	beq.n	800b25a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3310      	adds	r3, #16
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fc7f 	bl	800bb3c <xTaskRemoveFromEventList>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b244:	f000 fd54 	bl	800bcf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b248:	7bbb      	ldrb	r3, [r7, #14]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b254:	2b00      	cmp	r3, #0
 800b256:	dce9      	bgt.n	800b22c <prvUnlockQueue+0x60>
 800b258:	e000      	b.n	800b25c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b25a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	22ff      	movs	r2, #255	; 0xff
 800b260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b264:	f001 f88e 	bl	800c384 <vPortExitCritical>
}
 800b268:	bf00      	nop
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b278:	f001 f854 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b280:	2b00      	cmp	r3, #0
 800b282:	d102      	bne.n	800b28a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b284:	2301      	movs	r3, #1
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	e001      	b.n	800b28e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b28e:	f001 f879 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800b292:	68fb      	ldr	r3, [r7, #12]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2a4:	f001 f83e 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d102      	bne.n	800b2ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	e001      	b.n	800b2be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2be:	f001 f861 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08e      	sub	sp, #56	; 0x38
 800b2d0:	af04      	add	r7, sp, #16
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	623b      	str	r3, [r7, #32]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <xTaskCreateStatic+0x46>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	61fb      	str	r3, [r7, #28]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b312:	2358      	movs	r3, #88	; 0x58
 800b314:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b58      	cmp	r3, #88	; 0x58
 800b31a:	d00a      	beq.n	800b332 <xTaskCreateStatic+0x66>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	61bb      	str	r3, [r7, #24]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b332:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	2b00      	cmp	r3, #0
 800b338:	d01e      	beq.n	800b378 <xTaskCreateStatic+0xac>
 800b33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01b      	beq.n	800b378 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b348:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	2202      	movs	r2, #2
 800b34e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b352:	2300      	movs	r3, #0
 800b354:	9303      	str	r3, [sp, #12]
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	9302      	str	r3, [sp, #8]
 800b35a:	f107 0314 	add.w	r3, r7, #20
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	68b9      	ldr	r1, [r7, #8]
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 f850 	bl	800b410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b372:	f000 f8df 	bl	800b534 <prvAddNewTaskToReadyList>
 800b376:	e001      	b.n	800b37c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b378:	2300      	movs	r3, #0
 800b37a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b37c:	697b      	ldr	r3, [r7, #20]
	}
 800b37e:	4618      	mov	r0, r3
 800b380:	3728      	adds	r7, #40	; 0x28
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b386:	b580      	push	{r7, lr}
 800b388:	b08c      	sub	sp, #48	; 0x30
 800b38a:	af04      	add	r7, sp, #16
 800b38c:	60f8      	str	r0, [r7, #12]
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	603b      	str	r3, [r7, #0]
 800b392:	4613      	mov	r3, r2
 800b394:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b396:	88fb      	ldrh	r3, [r7, #6]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f001 f8e4 	bl	800c568 <pvPortMalloc>
 800b3a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00e      	beq.n	800b3c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3a8:	2058      	movs	r0, #88	; 0x58
 800b3aa:	f001 f8dd 	bl	800c568 <pvPortMalloc>
 800b3ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	631a      	str	r2, [r3, #48]	; 0x30
 800b3bc:	e005      	b.n	800b3ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3be:	6978      	ldr	r0, [r7, #20]
 800b3c0:	f001 f9a2 	bl	800c708 <vPortFree>
 800b3c4:	e001      	b.n	800b3ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d017      	beq.n	800b400 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3d8:	88fa      	ldrh	r2, [r7, #6]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9303      	str	r3, [sp, #12]
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	9302      	str	r3, [sp, #8]
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 f80e 	bl	800b410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3f4:	69f8      	ldr	r0, [r7, #28]
 800b3f6:	f000 f89d 	bl	800b534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	e002      	b.n	800b406 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b400:	f04f 33ff 	mov.w	r3, #4294967295
 800b404:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b406:	69bb      	ldr	r3, [r7, #24]
	}
 800b408:	4618      	mov	r0, r3
 800b40a:	3720      	adds	r7, #32
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b420:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	461a      	mov	r2, r3
 800b428:	21a5      	movs	r1, #165	; 0xa5
 800b42a:	f001 fe51 	bl	800d0d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b438:	3b01      	subs	r3, #1
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f023 0307 	bic.w	r3, r3, #7
 800b446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00a      	beq.n	800b468 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	617b      	str	r3, [r7, #20]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d01f      	beq.n	800b4ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	e012      	b.n	800b49a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	4413      	add	r3, r2
 800b47a:	7819      	ldrb	r1, [r3, #0]
 800b47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	4413      	add	r3, r2
 800b482:	3334      	adds	r3, #52	; 0x34
 800b484:	460a      	mov	r2, r1
 800b486:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	4413      	add	r3, r2
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d006      	beq.n	800b4a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	3301      	adds	r3, #1
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	2b0f      	cmp	r3, #15
 800b49e:	d9e9      	bls.n	800b474 <prvInitialiseNewTask+0x64>
 800b4a0:	e000      	b.n	800b4a4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b4a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4ac:	e003      	b.n	800b4b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	2b06      	cmp	r3, #6
 800b4ba:	d901      	bls.n	800b4c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4bc:	2306      	movs	r3, #6
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff f920 	bl	800a71c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	3318      	adds	r3, #24
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff f91b 	bl	800a71c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	f1c3 0207 	rsb	r2, r3, #7
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	2200      	movs	r2, #0
 800b500:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	2200      	movs	r2, #0
 800b506:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	68f9      	ldr	r1, [r7, #12]
 800b514:	69b8      	ldr	r0, [r7, #24]
 800b516:	f000 fdd9 	bl	800c0cc <pxPortInitialiseStack>
 800b51a:	4602      	mov	r2, r0
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b52a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b52c:	bf00      	nop
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b53c:	f000 fef2 	bl	800c324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b540:	4b2a      	ldr	r3, [pc, #168]	; (800b5ec <prvAddNewTaskToReadyList+0xb8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3301      	adds	r3, #1
 800b546:	4a29      	ldr	r2, [pc, #164]	; (800b5ec <prvAddNewTaskToReadyList+0xb8>)
 800b548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b54a:	4b29      	ldr	r3, [pc, #164]	; (800b5f0 <prvAddNewTaskToReadyList+0xbc>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b552:	4a27      	ldr	r2, [pc, #156]	; (800b5f0 <prvAddNewTaskToReadyList+0xbc>)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b558:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <prvAddNewTaskToReadyList+0xb8>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d110      	bne.n	800b582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b560:	f000 fbec 	bl	800bd3c <prvInitialiseTaskLists>
 800b564:	e00d      	b.n	800b582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b566:	4b23      	ldr	r3, [pc, #140]	; (800b5f4 <prvAddNewTaskToReadyList+0xc0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b56e:	4b20      	ldr	r3, [pc, #128]	; (800b5f0 <prvAddNewTaskToReadyList+0xbc>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d802      	bhi.n	800b582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b57c:	4a1c      	ldr	r2, [pc, #112]	; (800b5f0 <prvAddNewTaskToReadyList+0xbc>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b582:	4b1d      	ldr	r3, [pc, #116]	; (800b5f8 <prvAddNewTaskToReadyList+0xc4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3301      	adds	r3, #1
 800b588:	4a1b      	ldr	r2, [pc, #108]	; (800b5f8 <prvAddNewTaskToReadyList+0xc4>)
 800b58a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	2201      	movs	r2, #1
 800b592:	409a      	lsls	r2, r3
 800b594:	4b19      	ldr	r3, [pc, #100]	; (800b5fc <prvAddNewTaskToReadyList+0xc8>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4313      	orrs	r3, r2
 800b59a:	4a18      	ldr	r2, [pc, #96]	; (800b5fc <prvAddNewTaskToReadyList+0xc8>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4a15      	ldr	r2, [pc, #84]	; (800b600 <prvAddNewTaskToReadyList+0xcc>)
 800b5ac:	441a      	add	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7ff f8be 	bl	800a736 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5ba:	f000 fee3 	bl	800c384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5be:	4b0d      	ldr	r3, [pc, #52]	; (800b5f4 <prvAddNewTaskToReadyList+0xc0>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00e      	beq.n	800b5e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5c6:	4b0a      	ldr	r3, [pc, #40]	; (800b5f0 <prvAddNewTaskToReadyList+0xbc>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d207      	bcs.n	800b5e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <prvAddNewTaskToReadyList+0xd0>)
 800b5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	200006ac 	.word	0x200006ac
 800b5f0:	200005ac 	.word	0x200005ac
 800b5f4:	200006b8 	.word	0x200006b8
 800b5f8:	200006c8 	.word	0x200006c8
 800b5fc:	200006b4 	.word	0x200006b4
 800b600:	200005b0 	.word	0x200005b0
 800b604:	e000ed04 	.word	0xe000ed04

0800b608 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d017      	beq.n	800b64a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b61a:	4b13      	ldr	r3, [pc, #76]	; (800b668 <vTaskDelay+0x60>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <vTaskDelay+0x30>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60bb      	str	r3, [r7, #8]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b638:	f000 f87a 	bl	800b730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b63c:	2100      	movs	r1, #0
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fcde 	bl	800c000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b644:	f000 f882 	bl	800b74c <xTaskResumeAll>
 800b648:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d107      	bne.n	800b660 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b650:	4b06      	ldr	r3, [pc, #24]	; (800b66c <vTaskDelay+0x64>)
 800b652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b660:	bf00      	nop
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	200006d4 	.word	0x200006d4
 800b66c:	e000ed04 	.word	0xe000ed04

0800b670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08a      	sub	sp, #40	; 0x28
 800b674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b67e:	463a      	mov	r2, r7
 800b680:	1d39      	adds	r1, r7, #4
 800b682:	f107 0308 	add.w	r3, r7, #8
 800b686:	4618      	mov	r0, r3
 800b688:	f7f4 ff4a 	bl	8000520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	9202      	str	r2, [sp, #8]
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	2300      	movs	r3, #0
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	2300      	movs	r3, #0
 800b69c:	460a      	mov	r2, r1
 800b69e:	491e      	ldr	r1, [pc, #120]	; (800b718 <vTaskStartScheduler+0xa8>)
 800b6a0:	481e      	ldr	r0, [pc, #120]	; (800b71c <vTaskStartScheduler+0xac>)
 800b6a2:	f7ff fe13 	bl	800b2cc <xTaskCreateStatic>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	4a1d      	ldr	r2, [pc, #116]	; (800b720 <vTaskStartScheduler+0xb0>)
 800b6aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6ac:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <vTaskStartScheduler+0xb0>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	617b      	str	r3, [r7, #20]
 800b6b8:	e001      	b.n	800b6be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d116      	bne.n	800b6f2 <vTaskStartScheduler+0x82>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	613b      	str	r3, [r7, #16]
}
 800b6d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6d8:	4b12      	ldr	r3, [pc, #72]	; (800b724 <vTaskStartScheduler+0xb4>)
 800b6da:	f04f 32ff 	mov.w	r2, #4294967295
 800b6de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6e0:	4b11      	ldr	r3, [pc, #68]	; (800b728 <vTaskStartScheduler+0xb8>)
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6e6:	4b11      	ldr	r3, [pc, #68]	; (800b72c <vTaskStartScheduler+0xbc>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6ec:	f000 fd78 	bl	800c1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6f0:	e00e      	b.n	800b710 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f8:	d10a      	bne.n	800b710 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	60fb      	str	r3, [r7, #12]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <vTaskStartScheduler+0x9e>
}
 800b710:	bf00      	nop
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	0800d288 	.word	0x0800d288
 800b71c:	0800bd09 	.word	0x0800bd09
 800b720:	200006d0 	.word	0x200006d0
 800b724:	200006cc 	.word	0x200006cc
 800b728:	200006b8 	.word	0x200006b8
 800b72c:	200006b0 	.word	0x200006b0

0800b730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <vTaskSuspendAll+0x18>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	4a03      	ldr	r2, [pc, #12]	; (800b748 <vTaskSuspendAll+0x18>)
 800b73c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b73e:	bf00      	nop
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	200006d4 	.word	0x200006d4

0800b74c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b75a:	4b41      	ldr	r3, [pc, #260]	; (800b860 <xTaskResumeAll+0x114>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <xTaskResumeAll+0x2c>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	603b      	str	r3, [r7, #0]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b778:	f000 fdd4 	bl	800c324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b77c:	4b38      	ldr	r3, [pc, #224]	; (800b860 <xTaskResumeAll+0x114>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3b01      	subs	r3, #1
 800b782:	4a37      	ldr	r2, [pc, #220]	; (800b860 <xTaskResumeAll+0x114>)
 800b784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b786:	4b36      	ldr	r3, [pc, #216]	; (800b860 <xTaskResumeAll+0x114>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d161      	bne.n	800b852 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b78e:	4b35      	ldr	r3, [pc, #212]	; (800b864 <xTaskResumeAll+0x118>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d05d      	beq.n	800b852 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b796:	e02e      	b.n	800b7f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b798:	4b33      	ldr	r3, [pc, #204]	; (800b868 <xTaskResumeAll+0x11c>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3318      	adds	r3, #24
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff f823 	bl	800a7f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff f81e 	bl	800a7f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	409a      	lsls	r2, r3
 800b7bc:	4b2b      	ldr	r3, [pc, #172]	; (800b86c <xTaskResumeAll+0x120>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <xTaskResumeAll+0x120>)
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4a27      	ldr	r2, [pc, #156]	; (800b870 <xTaskResumeAll+0x124>)
 800b7d4:	441a      	add	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4610      	mov	r0, r2
 800b7de:	f7fe ffaa 	bl	800a736 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e6:	4b23      	ldr	r3, [pc, #140]	; (800b874 <xTaskResumeAll+0x128>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d302      	bcc.n	800b7f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b7f0:	4b21      	ldr	r3, [pc, #132]	; (800b878 <xTaskResumeAll+0x12c>)
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7f6:	4b1c      	ldr	r3, [pc, #112]	; (800b868 <xTaskResumeAll+0x11c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1cc      	bne.n	800b798 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b804:	f000 fb38 	bl	800be78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b808:	4b1c      	ldr	r3, [pc, #112]	; (800b87c <xTaskResumeAll+0x130>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d010      	beq.n	800b836 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b814:	f000 f836 	bl	800b884 <xTaskIncrementTick>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b81e:	4b16      	ldr	r3, [pc, #88]	; (800b878 <xTaskResumeAll+0x12c>)
 800b820:	2201      	movs	r2, #1
 800b822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3b01      	subs	r3, #1
 800b828:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1f1      	bne.n	800b814 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b830:	4b12      	ldr	r3, [pc, #72]	; (800b87c <xTaskResumeAll+0x130>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b836:	4b10      	ldr	r3, [pc, #64]	; (800b878 <xTaskResumeAll+0x12c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d009      	beq.n	800b852 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b83e:	2301      	movs	r3, #1
 800b840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b842:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <xTaskResumeAll+0x134>)
 800b844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b852:	f000 fd97 	bl	800c384 <vPortExitCritical>

	return xAlreadyYielded;
 800b856:	68bb      	ldr	r3, [r7, #8]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200006d4 	.word	0x200006d4
 800b864:	200006ac 	.word	0x200006ac
 800b868:	2000066c 	.word	0x2000066c
 800b86c:	200006b4 	.word	0x200006b4
 800b870:	200005b0 	.word	0x200005b0
 800b874:	200005ac 	.word	0x200005ac
 800b878:	200006c0 	.word	0x200006c0
 800b87c:	200006bc 	.word	0x200006bc
 800b880:	e000ed04 	.word	0xe000ed04

0800b884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b88e:	4b4e      	ldr	r3, [pc, #312]	; (800b9c8 <xTaskIncrementTick+0x144>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f040 808e 	bne.w	800b9b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b898:	4b4c      	ldr	r3, [pc, #304]	; (800b9cc <xTaskIncrementTick+0x148>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8a0:	4a4a      	ldr	r2, [pc, #296]	; (800b9cc <xTaskIncrementTick+0x148>)
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d120      	bne.n	800b8ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8ac:	4b48      	ldr	r3, [pc, #288]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <xTaskIncrementTick+0x48>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	603b      	str	r3, [r7, #0]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <xTaskIncrementTick+0x46>
 800b8cc:	4b40      	ldr	r3, [pc, #256]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	4b40      	ldr	r3, [pc, #256]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a3e      	ldr	r2, [pc, #248]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	4a3e      	ldr	r2, [pc, #248]	; (800b9d4 <xTaskIncrementTick+0x150>)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	4b3d      	ldr	r3, [pc, #244]	; (800b9d8 <xTaskIncrementTick+0x154>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	4a3c      	ldr	r2, [pc, #240]	; (800b9d8 <xTaskIncrementTick+0x154>)
 800b8e8:	6013      	str	r3, [r2, #0]
 800b8ea:	f000 fac5 	bl	800be78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8ee:	4b3b      	ldr	r3, [pc, #236]	; (800b9dc <xTaskIncrementTick+0x158>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d348      	bcc.n	800b98a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8f8:	4b35      	ldr	r3, [pc, #212]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d104      	bne.n	800b90c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b902:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <xTaskIncrementTick+0x158>)
 800b904:	f04f 32ff 	mov.w	r2, #4294967295
 800b908:	601a      	str	r2, [r3, #0]
					break;
 800b90a:	e03e      	b.n	800b98a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b90c:	4b30      	ldr	r3, [pc, #192]	; (800b9d0 <xTaskIncrementTick+0x14c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d203      	bcs.n	800b92c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b924:	4a2d      	ldr	r2, [pc, #180]	; (800b9dc <xTaskIncrementTick+0x158>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b92a:	e02e      	b.n	800b98a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	3304      	adds	r3, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe ff5d 	bl	800a7f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	3318      	adds	r3, #24
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe ff54 	bl	800a7f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	2201      	movs	r2, #1
 800b94e:	409a      	lsls	r2, r3
 800b950:	4b23      	ldr	r3, [pc, #140]	; (800b9e0 <xTaskIncrementTick+0x15c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4313      	orrs	r3, r2
 800b956:	4a22      	ldr	r2, [pc, #136]	; (800b9e0 <xTaskIncrementTick+0x15c>)
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4a1f      	ldr	r2, [pc, #124]	; (800b9e4 <xTaskIncrementTick+0x160>)
 800b968:	441a      	add	r2, r3
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7fe fee0 	bl	800a736 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <xTaskIncrementTick+0x164>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	429a      	cmp	r2, r3
 800b982:	d3b9      	bcc.n	800b8f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b988:	e7b6      	b.n	800b8f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b98a:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <xTaskIncrementTick+0x164>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	4914      	ldr	r1, [pc, #80]	; (800b9e4 <xTaskIncrementTick+0x160>)
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	440b      	add	r3, r1
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d901      	bls.n	800b9a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9a6:	4b11      	ldr	r3, [pc, #68]	; (800b9ec <xTaskIncrementTick+0x168>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	e004      	b.n	800b9be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9b4:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <xTaskIncrementTick+0x16c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	4a0d      	ldr	r2, [pc, #52]	; (800b9f0 <xTaskIncrementTick+0x16c>)
 800b9bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9be:	697b      	ldr	r3, [r7, #20]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	200006d4 	.word	0x200006d4
 800b9cc:	200006b0 	.word	0x200006b0
 800b9d0:	20000664 	.word	0x20000664
 800b9d4:	20000668 	.word	0x20000668
 800b9d8:	200006c4 	.word	0x200006c4
 800b9dc:	200006cc 	.word	0x200006cc
 800b9e0:	200006b4 	.word	0x200006b4
 800b9e4:	200005b0 	.word	0x200005b0
 800b9e8:	200005ac 	.word	0x200005ac
 800b9ec:	200006c0 	.word	0x200006c0
 800b9f0:	200006bc 	.word	0x200006bc

0800b9f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9fa:	4b39      	ldr	r3, [pc, #228]	; (800bae0 <vTaskSwitchContext+0xec>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba02:	4b38      	ldr	r3, [pc, #224]	; (800bae4 <vTaskSwitchContext+0xf0>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba08:	e066      	b.n	800bad8 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800ba0a:	4b36      	ldr	r3, [pc, #216]	; (800bae4 <vTaskSwitchContext+0xf0>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ba10:	4b35      	ldr	r3, [pc, #212]	; (800bae8 <vTaskSwitchContext+0xf4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ba1c:	61bb      	str	r3, [r7, #24]
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d111      	bne.n	800ba4c <vTaskSwitchContext+0x58>
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d10b      	bne.n	800ba4c <vTaskSwitchContext+0x58>
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	3308      	adds	r3, #8
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d105      	bne.n	800ba4c <vTaskSwitchContext+0x58>
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	330c      	adds	r3, #12
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d008      	beq.n	800ba5e <vTaskSwitchContext+0x6a>
 800ba4c:	4b26      	ldr	r3, [pc, #152]	; (800bae8 <vTaskSwitchContext+0xf4>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	4b25      	ldr	r3, [pc, #148]	; (800bae8 <vTaskSwitchContext+0xf4>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3334      	adds	r3, #52	; 0x34
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7f4 fd4e 	bl	80004fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5e:	4b23      	ldr	r3, [pc, #140]	; (800baec <vTaskSwitchContext+0xf8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	fab3 f383 	clz	r3, r3
 800ba6a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba6c:	7afb      	ldrb	r3, [r7, #11]
 800ba6e:	f1c3 031f 	rsb	r3, r3, #31
 800ba72:	617b      	str	r3, [r7, #20]
 800ba74:	491e      	ldr	r1, [pc, #120]	; (800baf0 <vTaskSwitchContext+0xfc>)
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	440b      	add	r3, r1
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <vTaskSwitchContext+0xaa>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	607b      	str	r3, [r7, #4]
}
 800ba9a:	bf00      	nop
 800ba9c:	e7fe      	b.n	800ba9c <vTaskSwitchContext+0xa8>
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4613      	mov	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4a11      	ldr	r2, [pc, #68]	; (800baf0 <vTaskSwitchContext+0xfc>)
 800baaa:	4413      	add	r3, r2
 800baac:	613b      	str	r3, [r7, #16]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	605a      	str	r2, [r3, #4]
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3308      	adds	r3, #8
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d104      	bne.n	800bace <vTaskSwitchContext+0xda>
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	605a      	str	r2, [r3, #4]
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	4a04      	ldr	r2, [pc, #16]	; (800bae8 <vTaskSwitchContext+0xf4>)
 800bad6:	6013      	str	r3, [r2, #0]
}
 800bad8:	bf00      	nop
 800bada:	3720      	adds	r7, #32
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200006d4 	.word	0x200006d4
 800bae4:	200006c0 	.word	0x200006c0
 800bae8:	200005ac 	.word	0x200005ac
 800baec:	200006b4 	.word	0x200006b4
 800baf0:	200005b0 	.word	0x200005b0

0800baf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	60fb      	str	r3, [r7, #12]
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb1a:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <vTaskPlaceOnEventList+0x44>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3318      	adds	r3, #24
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7fe fe2b 	bl	800a77e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb28:	2101      	movs	r1, #1
 800bb2a:	6838      	ldr	r0, [r7, #0]
 800bb2c:	f000 fa68 	bl	800c000 <prvAddCurrentTaskToDelayedList>
}
 800bb30:	bf00      	nop
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	200005ac 	.word	0x200005ac

0800bb3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60fb      	str	r3, [r7, #12]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	3318      	adds	r3, #24
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe fe3f 	bl	800a7f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb72:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <xTaskRemoveFromEventList+0xac>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d11c      	bne.n	800bbb4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fe36 	bl	800a7f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	2201      	movs	r2, #1
 800bb8a:	409a      	lsls	r2, r3
 800bb8c:	4b17      	ldr	r3, [pc, #92]	; (800bbec <xTaskRemoveFromEventList+0xb0>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	4a16      	ldr	r2, [pc, #88]	; (800bbec <xTaskRemoveFromEventList+0xb0>)
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4a13      	ldr	r2, [pc, #76]	; (800bbf0 <xTaskRemoveFromEventList+0xb4>)
 800bba4:	441a      	add	r2, r3
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f7fe fdc2 	bl	800a736 <vListInsertEnd>
 800bbb2:	e005      	b.n	800bbc0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	3318      	adds	r3, #24
 800bbb8:	4619      	mov	r1, r3
 800bbba:	480e      	ldr	r0, [pc, #56]	; (800bbf4 <xTaskRemoveFromEventList+0xb8>)
 800bbbc:	f7fe fdbb 	bl	800a736 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc4:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <xTaskRemoveFromEventList+0xbc>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d905      	bls.n	800bbda <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <xTaskRemoveFromEventList+0xc0>)
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	601a      	str	r2, [r3, #0]
 800bbd8:	e001      	b.n	800bbde <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	200006d4 	.word	0x200006d4
 800bbec:	200006b4 	.word	0x200006b4
 800bbf0:	200005b0 	.word	0x200005b0
 800bbf4:	2000066c 	.word	0x2000066c
 800bbf8:	200005ac 	.word	0x200005ac
 800bbfc:	200006c0 	.word	0x200006c0

0800bc00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <vTaskInternalSetTimeOutState+0x24>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc10:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <vTaskInternalSetTimeOutState+0x28>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	605a      	str	r2, [r3, #4]
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	200006c4 	.word	0x200006c4
 800bc28:	200006b0 	.word	0x200006b0

0800bc2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	613b      	str	r3, [r7, #16]
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	60fb      	str	r3, [r7, #12]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc6e:	f000 fb59 	bl	800c324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc72:	4b1d      	ldr	r3, [pc, #116]	; (800bce8 <xTaskCheckForTimeOut+0xbc>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	69ba      	ldr	r2, [r7, #24]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8a:	d102      	bne.n	800bc92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61fb      	str	r3, [r7, #28]
 800bc90:	e023      	b.n	800bcda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4b15      	ldr	r3, [pc, #84]	; (800bcec <xTaskCheckForTimeOut+0xc0>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d007      	beq.n	800bcae <xTaskCheckForTimeOut+0x82>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	69ba      	ldr	r2, [r7, #24]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d302      	bcc.n	800bcae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e015      	b.n	800bcda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d20b      	bcs.n	800bcd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	1ad2      	subs	r2, r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff ff9b 	bl	800bc00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	e004      	b.n	800bcda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcda:	f000 fb53 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800bcde:	69fb      	ldr	r3, [r7, #28]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	200006b0 	.word	0x200006b0
 800bcec:	200006c4 	.word	0x200006c4

0800bcf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcf4:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <vTaskMissedYield+0x14>)
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
}
 800bcfa:	bf00      	nop
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	200006c0 	.word	0x200006c0

0800bd08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd10:	f000 f854 	bl	800bdbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd14:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <prvIdleTask+0x2c>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d907      	bls.n	800bd2c <prvIdleTask+0x24>
			{
				taskYIELD();
 800bd1c:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <prvIdleTask+0x30>)
 800bd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bd2c:	f7f4 fbde 	bl	80004ec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bd30:	e7ee      	b.n	800bd10 <prvIdleTask+0x8>
 800bd32:	bf00      	nop
 800bd34:	200005b0 	.word	0x200005b0
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	e00c      	b.n	800bd62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <prvInitialiseTaskLists+0x60>)
 800bd54:	4413      	add	r3, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fcc0 	bl	800a6dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b06      	cmp	r3, #6
 800bd66:	d9ef      	bls.n	800bd48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd68:	480d      	ldr	r0, [pc, #52]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd6a:	f7fe fcb7 	bl	800a6dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd6e:	480d      	ldr	r0, [pc, #52]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd70:	f7fe fcb4 	bl	800a6dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd74:	480c      	ldr	r0, [pc, #48]	; (800bda8 <prvInitialiseTaskLists+0x6c>)
 800bd76:	f7fe fcb1 	bl	800a6dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd7a:	480c      	ldr	r0, [pc, #48]	; (800bdac <prvInitialiseTaskLists+0x70>)
 800bd7c:	f7fe fcae 	bl	800a6dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd80:	480b      	ldr	r0, [pc, #44]	; (800bdb0 <prvInitialiseTaskLists+0x74>)
 800bd82:	f7fe fcab 	bl	800a6dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <prvInitialiseTaskLists+0x78>)
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <prvInitialiseTaskLists+0x7c>)
 800bd8e:	4a05      	ldr	r2, [pc, #20]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200005b0 	.word	0x200005b0
 800bda0:	2000063c 	.word	0x2000063c
 800bda4:	20000650 	.word	0x20000650
 800bda8:	2000066c 	.word	0x2000066c
 800bdac:	20000680 	.word	0x20000680
 800bdb0:	20000698 	.word	0x20000698
 800bdb4:	20000664 	.word	0x20000664
 800bdb8:	20000668 	.word	0x20000668

0800bdbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdc2:	e019      	b.n	800bdf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdc4:	f000 faae 	bl	800c324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc8:	4b10      	ldr	r3, [pc, #64]	; (800be0c <prvCheckTasksWaitingTermination+0x50>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fd0b 	bl	800a7f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdda:	4b0d      	ldr	r3, [pc, #52]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	4a0b      	ldr	r2, [pc, #44]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bde2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bde4:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	4a0a      	ldr	r2, [pc, #40]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bdec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdee:	f000 fac9 	bl	800c384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f810 	bl	800be18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdf8:	4b06      	ldr	r3, [pc, #24]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e1      	bne.n	800bdc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20000680 	.word	0x20000680
 800be10:	200006ac 	.word	0x200006ac
 800be14:	20000694 	.word	0x20000694

0800be18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800be26:	2b00      	cmp	r3, #0
 800be28:	d108      	bne.n	800be3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fc6a 	bl	800c708 <vPortFree>
				vPortFree( pxTCB );
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fc67 	bl	800c708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be3a:	e018      	b.n	800be6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800be42:	2b01      	cmp	r3, #1
 800be44:	d103      	bne.n	800be4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fc5e 	bl	800c708 <vPortFree>
	}
 800be4c:	e00f      	b.n	800be6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800be54:	2b02      	cmp	r3, #2
 800be56:	d00a      	beq.n	800be6e <prvDeleteTCB+0x56>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	60fb      	str	r3, [r7, #12]
}
 800be6a:	bf00      	nop
 800be6c:	e7fe      	b.n	800be6c <prvDeleteTCB+0x54>
	}
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be7e:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <prvResetNextTaskUnblockTime+0x38>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d104      	bne.n	800be92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <prvResetNextTaskUnblockTime+0x3c>)
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295
 800be8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be90:	e008      	b.n	800bea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be92:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <prvResetNextTaskUnblockTime+0x38>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <prvResetNextTaskUnblockTime+0x3c>)
 800bea2:	6013      	str	r3, [r2, #0]
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	20000664 	.word	0x20000664
 800beb4:	200006cc 	.word	0x200006cc

0800beb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bebe:	4b0b      	ldr	r3, [pc, #44]	; (800beec <xTaskGetSchedulerState+0x34>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bec6:	2301      	movs	r3, #1
 800bec8:	607b      	str	r3, [r7, #4]
 800beca:	e008      	b.n	800bede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800becc:	4b08      	ldr	r3, [pc, #32]	; (800bef0 <xTaskGetSchedulerState+0x38>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bed4:	2302      	movs	r3, #2
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	e001      	b.n	800bede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beda:	2300      	movs	r3, #0
 800bedc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bede:	687b      	ldr	r3, [r7, #4]
	}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	200006b8 	.word	0x200006b8
 800bef0:	200006d4 	.word	0x200006d4

0800bef4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf00:	2300      	movs	r3, #0
 800bf02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d06e      	beq.n	800bfe8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf0a:	4b3a      	ldr	r3, [pc, #232]	; (800bff4 <xTaskPriorityDisinherit+0x100>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d00a      	beq.n	800bf2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	60fb      	str	r3, [r7, #12]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10a      	bne.n	800bf48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	60bb      	str	r3, [r7, #8]
}
 800bf44:	bf00      	nop
 800bf46:	e7fe      	b.n	800bf46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf4c:	1e5a      	subs	r2, r3, #1
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d044      	beq.n	800bfe8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d140      	bne.n	800bfe8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fc40 	bl	800a7f0 <uxListRemove>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d115      	bne.n	800bfa2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7a:	491f      	ldr	r1, [pc, #124]	; (800bff8 <xTaskPriorityDisinherit+0x104>)
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xTaskPriorityDisinherit+0xae>
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	2201      	movs	r2, #1
 800bf92:	fa02 f303 	lsl.w	r3, r2, r3
 800bf96:	43da      	mvns	r2, r3
 800bf98:	4b18      	ldr	r3, [pc, #96]	; (800bffc <xTaskPriorityDisinherit+0x108>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	4a17      	ldr	r2, [pc, #92]	; (800bffc <xTaskPriorityDisinherit+0x108>)
 800bfa0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	f1c3 0207 	rsb	r2, r3, #7
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	2201      	movs	r2, #1
 800bfbc:	409a      	lsls	r2, r3
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <xTaskPriorityDisinherit+0x108>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	4a0d      	ldr	r2, [pc, #52]	; (800bffc <xTaskPriorityDisinherit+0x108>)
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfcc:	4613      	mov	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4a08      	ldr	r2, [pc, #32]	; (800bff8 <xTaskPriorityDisinherit+0x104>)
 800bfd6:	441a      	add	r2, r3
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	3304      	adds	r3, #4
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	f7fe fba9 	bl	800a736 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfe8:	697b      	ldr	r3, [r7, #20]
	}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	200005ac 	.word	0x200005ac
 800bff8:	200005b0 	.word	0x200005b0
 800bffc:	200006b4 	.word	0x200006b4

0800c000 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c00a:	4b29      	ldr	r3, [pc, #164]	; (800c0b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c010:	4b28      	ldr	r3, [pc, #160]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7fe fbea 	bl	800a7f0 <uxListRemove>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10b      	bne.n	800c03a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c022:	4b24      	ldr	r3, [pc, #144]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	2201      	movs	r2, #1
 800c02a:	fa02 f303 	lsl.w	r3, r2, r3
 800c02e:	43da      	mvns	r2, r3
 800c030:	4b21      	ldr	r3, [pc, #132]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4013      	ands	r3, r2
 800c036:	4a20      	ldr	r2, [pc, #128]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c038:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c040:	d10a      	bne.n	800c058 <prvAddCurrentTaskToDelayedList+0x58>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c048:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	481a      	ldr	r0, [pc, #104]	; (800c0bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c052:	f7fe fb70 	bl	800a736 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c056:	e026      	b.n	800c0a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4413      	add	r3, r2
 800c05e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c060:	4b14      	ldr	r3, [pc, #80]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d209      	bcs.n	800c084 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c070:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3304      	adds	r3, #4
 800c07a:	4619      	mov	r1, r3
 800c07c:	4610      	mov	r0, r2
 800c07e:	f7fe fb7e 	bl	800a77e <vListInsert>
}
 800c082:	e010      	b.n	800c0a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c084:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	4619      	mov	r1, r3
 800c090:	4610      	mov	r0, r2
 800c092:	f7fe fb74 	bl	800a77e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c096:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d202      	bcs.n	800c0a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c0a0:	4a09      	ldr	r2, [pc, #36]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6013      	str	r3, [r2, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	200006b0 	.word	0x200006b0
 800c0b4:	200005ac 	.word	0x200005ac
 800c0b8:	200006b4 	.word	0x200006b4
 800c0bc:	20000698 	.word	0x20000698
 800c0c0:	20000668 	.word	0x20000668
 800c0c4:	20000664 	.word	0x20000664
 800c0c8:	200006cc 	.word	0x200006cc

0800c0cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3b04      	subs	r3, #4
 800c0dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3b04      	subs	r3, #4
 800c0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f023 0201 	bic.w	r2, r3, #1
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0fc:	4a0c      	ldr	r2, [pc, #48]	; (800c130 <pxPortInitialiseStack+0x64>)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3b14      	subs	r3, #20
 800c106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3b04      	subs	r3, #4
 800c112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f06f 0202 	mvn.w	r2, #2
 800c11a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	3b20      	subs	r3, #32
 800c120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c122:	68fb      	ldr	r3, [r7, #12]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	0800c135 	.word	0x0800c135

0800c134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c13e:	4b12      	ldr	r3, [pc, #72]	; (800c188 <prvTaskExitError+0x54>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c146:	d00a      	beq.n	800c15e <prvTaskExitError+0x2a>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	60fb      	str	r3, [r7, #12]
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <prvTaskExitError+0x28>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60bb      	str	r3, [r7, #8]
}
 800c170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c172:	bf00      	nop
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0fc      	beq.n	800c174 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	2000002c 	.word	0x2000002c
 800c18c:	00000000 	.word	0x00000000

0800c190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c190:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <pxCurrentTCBConst2>)
 800c192:	6819      	ldr	r1, [r3, #0]
 800c194:	6808      	ldr	r0, [r1, #0]
 800c196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19a:	f380 8809 	msr	PSP, r0
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f04f 0000 	mov.w	r0, #0
 800c1a6:	f380 8811 	msr	BASEPRI, r0
 800c1aa:	4770      	bx	lr
 800c1ac:	f3af 8000 	nop.w

0800c1b0 <pxCurrentTCBConst2>:
 800c1b0:	200005ac 	.word	0x200005ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop

0800c1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1b8:	4808      	ldr	r0, [pc, #32]	; (800c1dc <prvPortStartFirstTask+0x24>)
 800c1ba:	6800      	ldr	r0, [r0, #0]
 800c1bc:	6800      	ldr	r0, [r0, #0]
 800c1be:	f380 8808 	msr	MSP, r0
 800c1c2:	f04f 0000 	mov.w	r0, #0
 800c1c6:	f380 8814 	msr	CONTROL, r0
 800c1ca:	b662      	cpsie	i
 800c1cc:	b661      	cpsie	f
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	df00      	svc	0
 800c1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1da:	bf00      	nop
 800c1dc:	e000ed08 	.word	0xe000ed08

0800c1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1e6:	4b46      	ldr	r3, [pc, #280]	; (800c300 <xPortStartScheduler+0x120>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a46      	ldr	r2, [pc, #280]	; (800c304 <xPortStartScheduler+0x124>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d10a      	bne.n	800c206 <xPortStartScheduler+0x26>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	613b      	str	r3, [r7, #16]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c206:	4b3e      	ldr	r3, [pc, #248]	; (800c300 <xPortStartScheduler+0x120>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a3f      	ldr	r2, [pc, #252]	; (800c308 <xPortStartScheduler+0x128>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d10a      	bne.n	800c226 <xPortStartScheduler+0x46>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60fb      	str	r3, [r7, #12]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c226:	4b39      	ldr	r3, [pc, #228]	; (800c30c <xPortStartScheduler+0x12c>)
 800c228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	22ff      	movs	r2, #255	; 0xff
 800c236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	4b31      	ldr	r3, [pc, #196]	; (800c310 <xPortStartScheduler+0x130>)
 800c24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c24e:	4b31      	ldr	r3, [pc, #196]	; (800c314 <xPortStartScheduler+0x134>)
 800c250:	2207      	movs	r2, #7
 800c252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c254:	e009      	b.n	800c26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c256:	4b2f      	ldr	r3, [pc, #188]	; (800c314 <xPortStartScheduler+0x134>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	4a2d      	ldr	r2, [pc, #180]	; (800c314 <xPortStartScheduler+0x134>)
 800c25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	b2db      	uxtb	r3, r3
 800c268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c26a:	78fb      	ldrb	r3, [r7, #3]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c272:	2b80      	cmp	r3, #128	; 0x80
 800c274:	d0ef      	beq.n	800c256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c276:	4b27      	ldr	r3, [pc, #156]	; (800c314 <xPortStartScheduler+0x134>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f1c3 0307 	rsb	r3, r3, #7
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d00a      	beq.n	800c298 <xPortStartScheduler+0xb8>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	60bb      	str	r3, [r7, #8]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c298:	4b1e      	ldr	r3, [pc, #120]	; (800c314 <xPortStartScheduler+0x134>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <xPortStartScheduler+0x134>)
 800c2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <xPortStartScheduler+0x134>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2aa:	4a1a      	ldr	r2, [pc, #104]	; (800c314 <xPortStartScheduler+0x134>)
 800c2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2b6:	4b18      	ldr	r3, [pc, #96]	; (800c318 <xPortStartScheduler+0x138>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a17      	ldr	r2, [pc, #92]	; (800c318 <xPortStartScheduler+0x138>)
 800c2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <xPortStartScheduler+0x138>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a14      	ldr	r2, [pc, #80]	; (800c318 <xPortStartScheduler+0x138>)
 800c2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2ce:	f000 f8dd 	bl	800c48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2d2:	4b12      	ldr	r3, [pc, #72]	; (800c31c <xPortStartScheduler+0x13c>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2d8:	f000 f8fc 	bl	800c4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2dc:	4b10      	ldr	r3, [pc, #64]	; (800c320 <xPortStartScheduler+0x140>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0f      	ldr	r2, [pc, #60]	; (800c320 <xPortStartScheduler+0x140>)
 800c2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2e8:	f7ff ff66 	bl	800c1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2ec:	f7ff fb82 	bl	800b9f4 <vTaskSwitchContext>
	prvTaskExitError();
 800c2f0:	f7ff ff20 	bl	800c134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	e000ed00 	.word	0xe000ed00
 800c304:	410fc271 	.word	0x410fc271
 800c308:	410fc270 	.word	0x410fc270
 800c30c:	e000e400 	.word	0xe000e400
 800c310:	200006d8 	.word	0x200006d8
 800c314:	200006dc 	.word	0x200006dc
 800c318:	e000ed20 	.word	0xe000ed20
 800c31c:	2000002c 	.word	0x2000002c
 800c320:	e000ef34 	.word	0xe000ef34

0800c324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	607b      	str	r3, [r7, #4]
}
 800c33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <vPortEnterCritical+0x58>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3301      	adds	r3, #1
 800c344:	4a0d      	ldr	r2, [pc, #52]	; (800c37c <vPortEnterCritical+0x58>)
 800c346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c348:	4b0c      	ldr	r3, [pc, #48]	; (800c37c <vPortEnterCritical+0x58>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d10f      	bne.n	800c370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c350:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <vPortEnterCritical+0x5c>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <vPortEnterCritical+0x4c>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	603b      	str	r3, [r7, #0]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <vPortEnterCritical+0x4a>
	}
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	2000002c 	.word	0x2000002c
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c38a:	4b12      	ldr	r3, [pc, #72]	; (800c3d4 <vPortExitCritical+0x50>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <vPortExitCritical+0x24>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	607b      	str	r3, [r7, #4]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4a09      	ldr	r2, [pc, #36]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3b2:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <vPortExitCritical+0x42>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	f383 8811 	msr	BASEPRI, r3
}
 800c3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	2000002c 	.word	0x2000002c
	...

0800c3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3e0:	f3ef 8009 	mrs	r0, PSP
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4b15      	ldr	r3, [pc, #84]	; (800c440 <pxCurrentTCBConst>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	f01e 0f10 	tst.w	lr, #16
 800c3f0:	bf08      	it	eq
 800c3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fa:	6010      	str	r0, [r2, #0]
 800c3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c404:	f380 8811 	msr	BASEPRI, r0
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f7ff faf0 	bl	800b9f4 <vTaskSwitchContext>
 800c414:	f04f 0000 	mov.w	r0, #0
 800c418:	f380 8811 	msr	BASEPRI, r0
 800c41c:	bc09      	pop	{r0, r3}
 800c41e:	6819      	ldr	r1, [r3, #0]
 800c420:	6808      	ldr	r0, [r1, #0]
 800c422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c426:	f01e 0f10 	tst.w	lr, #16
 800c42a:	bf08      	it	eq
 800c42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c430:	f380 8809 	msr	PSP, r0
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst>:
 800c440:	200005ac 	.word	0x200005ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	607b      	str	r3, [r7, #4]
}
 800c460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c462:	f7ff fa0f 	bl	800b884 <xTaskIncrementTick>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c46c:	4b06      	ldr	r3, [pc, #24]	; (800c488 <SysTick_Handler+0x40>)
 800c46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	2300      	movs	r3, #0
 800c476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f383 8811 	msr	BASEPRI, r3
}
 800c47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c490:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <vPortSetupTimerInterrupt+0x34>)
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c496:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <vPortSetupTimerInterrupt+0x38>)
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c49c:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <vPortSetupTimerInterrupt+0x3c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <vPortSetupTimerInterrupt+0x40>)
 800c4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a6:	099b      	lsrs	r3, r3, #6
 800c4a8:	4a09      	ldr	r2, [pc, #36]	; (800c4d0 <vPortSetupTimerInterrupt+0x44>)
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4ae:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <vPortSetupTimerInterrupt+0x34>)
 800c4b0:	2207      	movs	r2, #7
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	e000e010 	.word	0xe000e010
 800c4c4:	e000e018 	.word	0xe000e018
 800c4c8:	20000000 	.word	0x20000000
 800c4cc:	10624dd3 	.word	0x10624dd3
 800c4d0:	e000e014 	.word	0xe000e014

0800c4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4e4 <vPortEnableVFP+0x10>
 800c4d8:	6801      	ldr	r1, [r0, #0]
 800c4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4de:	6001      	str	r1, [r0, #0]
 800c4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4e2:	bf00      	nop
 800c4e4:	e000ed88 	.word	0xe000ed88

0800c4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4ee:	f3ef 8305 	mrs	r3, IPSR
 800c4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b0f      	cmp	r3, #15
 800c4f8:	d914      	bls.n	800c524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4fa:	4a17      	ldr	r2, [pc, #92]	; (800c558 <vPortValidateInterruptPriority+0x70>)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4413      	add	r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c504:	4b15      	ldr	r3, [pc, #84]	; (800c55c <vPortValidateInterruptPriority+0x74>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	7afa      	ldrb	r2, [r7, #11]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d20a      	bcs.n	800c524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	607b      	str	r3, [r7, #4]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c524:	4b0e      	ldr	r3, [pc, #56]	; (800c560 <vPortValidateInterruptPriority+0x78>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c52c:	4b0d      	ldr	r3, [pc, #52]	; (800c564 <vPortValidateInterruptPriority+0x7c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d90a      	bls.n	800c54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	603b      	str	r3, [r7, #0]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <vPortValidateInterruptPriority+0x60>
	}
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	e000e3f0 	.word	0xe000e3f0
 800c55c:	200006d8 	.word	0x200006d8
 800c560:	e000ed0c 	.word	0xe000ed0c
 800c564:	200006dc 	.word	0x200006dc

0800c568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	; 0x28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c574:	f7ff f8dc 	bl	800b730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c578:	4b5d      	ldr	r3, [pc, #372]	; (800c6f0 <pvPortMalloc+0x188>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c580:	f000 f924 	bl	800c7cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c584:	4b5b      	ldr	r3, [pc, #364]	; (800c6f4 <pvPortMalloc+0x18c>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8093 	bne.w	800c6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01d      	beq.n	800c5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c598:	2208      	movs	r2, #8
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d014      	beq.n	800c5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f023 0307 	bic.w	r3, r3, #7
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	617b      	str	r3, [r7, #20]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d06e      	beq.n	800c6b8 <pvPortMalloc+0x150>
 800c5da:	4b47      	ldr	r3, [pc, #284]	; (800c6f8 <pvPortMalloc+0x190>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d869      	bhi.n	800c6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5e4:	4b45      	ldr	r3, [pc, #276]	; (800c6fc <pvPortMalloc+0x194>)
 800c5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5e8:	4b44      	ldr	r3, [pc, #272]	; (800c6fc <pvPortMalloc+0x194>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ee:	e004      	b.n	800c5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	429a      	cmp	r2, r3
 800c602:	d903      	bls.n	800c60c <pvPortMalloc+0xa4>
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1f1      	bne.n	800c5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c60c:	4b38      	ldr	r3, [pc, #224]	; (800c6f0 <pvPortMalloc+0x188>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c612:	429a      	cmp	r2, r3
 800c614:	d050      	beq.n	800c6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2208      	movs	r2, #8
 800c61c:	4413      	add	r3, r2
 800c61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	1ad2      	subs	r2, r2, r3
 800c630:	2308      	movs	r3, #8
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	429a      	cmp	r2, r3
 800c636:	d91f      	bls.n	800c678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <pvPortMalloc+0xf8>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	613b      	str	r3, [r7, #16]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c672:	69b8      	ldr	r0, [r7, #24]
 800c674:	f000 f90c 	bl	800c890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c678:	4b1f      	ldr	r3, [pc, #124]	; (800c6f8 <pvPortMalloc+0x190>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	4a1d      	ldr	r2, [pc, #116]	; (800c6f8 <pvPortMalloc+0x190>)
 800c684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c686:	4b1c      	ldr	r3, [pc, #112]	; (800c6f8 <pvPortMalloc+0x190>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <pvPortMalloc+0x198>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d203      	bcs.n	800c69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c692:	4b19      	ldr	r3, [pc, #100]	; (800c6f8 <pvPortMalloc+0x190>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a1a      	ldr	r2, [pc, #104]	; (800c700 <pvPortMalloc+0x198>)
 800c698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	4b15      	ldr	r3, [pc, #84]	; (800c6f4 <pvPortMalloc+0x18c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6ae:	4b15      	ldr	r3, [pc, #84]	; (800c704 <pvPortMalloc+0x19c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	4a13      	ldr	r2, [pc, #76]	; (800c704 <pvPortMalloc+0x19c>)
 800c6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6b8:	f7ff f848 	bl	800b74c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c6c2:	f7f3 ff25 	bl	8000510 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	f003 0307 	and.w	r3, r3, #7
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00a      	beq.n	800c6e6 <pvPortMalloc+0x17e>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <pvPortMalloc+0x17c>
	return pvReturn;
 800c6e6:	69fb      	ldr	r3, [r7, #28]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3728      	adds	r7, #40	; 0x28
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	200086e8 	.word	0x200086e8
 800c6f4:	200086fc 	.word	0x200086fc
 800c6f8:	200086ec 	.word	0x200086ec
 800c6fc:	200086e0 	.word	0x200086e0
 800c700:	200086f0 	.word	0x200086f0
 800c704:	200086f4 	.word	0x200086f4

0800c708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d04d      	beq.n	800c7b6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c71a:	2308      	movs	r3, #8
 800c71c:	425b      	negs	r3, r3
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	4413      	add	r3, r2
 800c722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <vPortFree+0xb8>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4013      	ands	r3, r2
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <vPortFree+0x44>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60fb      	str	r3, [r7, #12]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <vPortFree+0x62>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	60bb      	str	r3, [r7, #8]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <vPortFree+0xb8>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4013      	ands	r3, r2
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01e      	beq.n	800c7b6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d11a      	bne.n	800c7b6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <vPortFree+0xb8>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	43db      	mvns	r3, r3
 800c78a:	401a      	ands	r2, r3
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c790:	f7fe ffce 	bl	800b730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <vPortFree+0xbc>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4413      	add	r3, r2
 800c79e:	4a09      	ldr	r2, [pc, #36]	; (800c7c4 <vPortFree+0xbc>)
 800c7a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7a2:	6938      	ldr	r0, [r7, #16]
 800c7a4:	f000 f874 	bl	800c890 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <vPortFree+0xc0>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	4a06      	ldr	r2, [pc, #24]	; (800c7c8 <vPortFree+0xc0>)
 800c7b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7b2:	f7fe ffcb 	bl	800b74c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	200086fc 	.word	0x200086fc
 800c7c4:	200086ec 	.word	0x200086ec
 800c7c8:	200086f8 	.word	0x200086f8

0800c7cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7d8:	4b27      	ldr	r3, [pc, #156]	; (800c878 <prvHeapInit+0xac>)
 800c7da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f003 0307 	and.w	r3, r3, #7
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00c      	beq.n	800c800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3307      	adds	r3, #7
 800c7ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f023 0307 	bic.w	r3, r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	4a1f      	ldr	r2, [pc, #124]	; (800c878 <prvHeapInit+0xac>)
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c804:	4a1d      	ldr	r2, [pc, #116]	; (800c87c <prvHeapInit+0xb0>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c80a:	4b1c      	ldr	r3, [pc, #112]	; (800c87c <prvHeapInit+0xb0>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	4413      	add	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c818:	2208      	movs	r2, #8
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 0307 	bic.w	r3, r3, #7
 800c826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4a15      	ldr	r2, [pc, #84]	; (800c880 <prvHeapInit+0xb4>)
 800c82c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c82e:	4b14      	ldr	r3, [pc, #80]	; (800c880 <prvHeapInit+0xb4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2200      	movs	r2, #0
 800c834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c836:	4b12      	ldr	r3, [pc, #72]	; (800c880 <prvHeapInit+0xb4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	1ad2      	subs	r2, r2, r3
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c84c:	4b0c      	ldr	r3, [pc, #48]	; (800c880 <prvHeapInit+0xb4>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	4a0a      	ldr	r2, [pc, #40]	; (800c884 <prvHeapInit+0xb8>)
 800c85a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	4a09      	ldr	r2, [pc, #36]	; (800c888 <prvHeapInit+0xbc>)
 800c862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c864:	4b09      	ldr	r3, [pc, #36]	; (800c88c <prvHeapInit+0xc0>)
 800c866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c86a:	601a      	str	r2, [r3, #0]
}
 800c86c:	bf00      	nop
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	200006e0 	.word	0x200006e0
 800c87c:	200086e0 	.word	0x200086e0
 800c880:	200086e8 	.word	0x200086e8
 800c884:	200086f0 	.word	0x200086f0
 800c888:	200086ec 	.word	0x200086ec
 800c88c:	200086fc 	.word	0x200086fc

0800c890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c898:	4b28      	ldr	r3, [pc, #160]	; (800c93c <prvInsertBlockIntoFreeList+0xac>)
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	e002      	b.n	800c8a4 <prvInsertBlockIntoFreeList+0x14>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d8f7      	bhi.n	800c89e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d108      	bne.n	800c8d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	441a      	add	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d118      	bne.n	800c918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	4b15      	ldr	r3, [pc, #84]	; (800c940 <prvInsertBlockIntoFreeList+0xb0>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d00d      	beq.n	800c90e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	441a      	add	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	e008      	b.n	800c920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c90e:	4b0c      	ldr	r3, [pc, #48]	; (800c940 <prvInsertBlockIntoFreeList+0xb0>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	e003      	b.n	800c920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d002      	beq.n	800c92e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c92e:	bf00      	nop
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	200086e0 	.word	0x200086e0
 800c940:	200086e8 	.word	0x200086e8

0800c944 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c948:	2200      	movs	r2, #0
 800c94a:	490e      	ldr	r1, [pc, #56]	; (800c984 <MX_USB_HOST_Init+0x40>)
 800c94c:	480e      	ldr	r0, [pc, #56]	; (800c988 <MX_USB_HOST_Init+0x44>)
 800c94e:	f7fb fe31 	bl	80085b4 <USBH_Init>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c958:	f7f4 f9ca 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c95c:	490b      	ldr	r1, [pc, #44]	; (800c98c <MX_USB_HOST_Init+0x48>)
 800c95e:	480a      	ldr	r0, [pc, #40]	; (800c988 <MX_USB_HOST_Init+0x44>)
 800c960:	f7fb fefd 	bl	800875e <USBH_RegisterClass>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c96a:	f7f4 f9c1 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c96e:	4806      	ldr	r0, [pc, #24]	; (800c988 <MX_USB_HOST_Init+0x44>)
 800c970:	f7fb ff81 	bl	8008876 <USBH_Start>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c97a:	f7f4 f9b9 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c97e:	bf00      	nop
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	0800c991 	.word	0x0800c991
 800c988:	20008700 	.word	0x20008700
 800c98c:	2000000c 	.word	0x2000000c

0800c990 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	460b      	mov	r3, r1
 800c99a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c99c:	78fb      	ldrb	r3, [r7, #3]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d819      	bhi.n	800c9d8 <USBH_UserProcess+0x48>
 800c9a4:	a201      	add	r2, pc, #4	; (adr r2, 800c9ac <USBH_UserProcess+0x1c>)
 800c9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9aa:	bf00      	nop
 800c9ac:	0800c9d9 	.word	0x0800c9d9
 800c9b0:	0800c9c9 	.word	0x0800c9c9
 800c9b4:	0800c9d9 	.word	0x0800c9d9
 800c9b8:	0800c9d1 	.word	0x0800c9d1
 800c9bc:	0800c9c1 	.word	0x0800c9c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c9c0:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <USBH_UserProcess+0x58>)
 800c9c2:	2203      	movs	r2, #3
 800c9c4:	701a      	strb	r2, [r3, #0]
  break;
 800c9c6:	e008      	b.n	800c9da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c9c8:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <USBH_UserProcess+0x58>)
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	701a      	strb	r2, [r3, #0]
  break;
 800c9ce:	e004      	b.n	800c9da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c9d0:	4b05      	ldr	r3, [pc, #20]	; (800c9e8 <USBH_UserProcess+0x58>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	701a      	strb	r2, [r3, #0]
  break;
 800c9d6:	e000      	b.n	800c9da <USBH_UserProcess+0x4a>

  default:
  break;
 800c9d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c9da:	bf00      	nop
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20008ae4 	.word	0x20008ae4

0800c9ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08a      	sub	sp, #40	; 0x28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9f4:	f107 0314 	add.w	r3, r7, #20
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	601a      	str	r2, [r3, #0]
 800c9fc:	605a      	str	r2, [r3, #4]
 800c9fe:	609a      	str	r2, [r3, #8]
 800ca00:	60da      	str	r2, [r3, #12]
 800ca02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a24      	ldr	r2, [pc, #144]	; (800ca9c <HAL_HCD_MspInit+0xb0>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d141      	bne.n	800ca92 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca0e:	2300      	movs	r3, #0
 800ca10:	613b      	str	r3, [r7, #16]
 800ca12:	4b23      	ldr	r3, [pc, #140]	; (800caa0 <HAL_HCD_MspInit+0xb4>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	4a22      	ldr	r2, [pc, #136]	; (800caa0 <HAL_HCD_MspInit+0xb4>)
 800ca18:	f043 0302 	orr.w	r3, r3, #2
 800ca1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca1e:	4b20      	ldr	r3, [pc, #128]	; (800caa0 <HAL_HCD_MspInit+0xb4>)
 800ca20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca22:	f003 0302 	and.w	r3, r3, #2
 800ca26:	613b      	str	r3, [r7, #16]
 800ca28:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ca2a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ca2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca30:	2302      	movs	r3, #2
 800ca32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca34:	2300      	movs	r3, #0
 800ca36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ca3c:	230c      	movs	r3, #12
 800ca3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca40:	f107 0314 	add.w	r3, r7, #20
 800ca44:	4619      	mov	r1, r3
 800ca46:	4817      	ldr	r0, [pc, #92]	; (800caa4 <HAL_HCD_MspInit+0xb8>)
 800ca48:	f7f5 f932 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ca4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca52:	2300      	movs	r3, #0
 800ca54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ca5a:	f107 0314 	add.w	r3, r7, #20
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4810      	ldr	r0, [pc, #64]	; (800caa4 <HAL_HCD_MspInit+0xb8>)
 800ca62:	f7f5 f925 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ca66:	2300      	movs	r3, #0
 800ca68:	60fb      	str	r3, [r7, #12]
 800ca6a:	4b0d      	ldr	r3, [pc, #52]	; (800caa0 <HAL_HCD_MspInit+0xb4>)
 800ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6e:	4a0c      	ldr	r2, [pc, #48]	; (800caa0 <HAL_HCD_MspInit+0xb4>)
 800ca70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca74:	6313      	str	r3, [r2, #48]	; 0x30
 800ca76:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <HAL_HCD_MspInit+0xb4>)
 800ca78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ca82:	2200      	movs	r2, #0
 800ca84:	2105      	movs	r1, #5
 800ca86:	204d      	movs	r0, #77	; 0x4d
 800ca88:	f7f4 fee0 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ca8c:	204d      	movs	r0, #77	; 0x4d
 800ca8e:	f7f4 fef9 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ca92:	bf00      	nop
 800ca94:	3728      	adds	r7, #40	; 0x28
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	40040000 	.word	0x40040000
 800caa0:	40023800 	.word	0x40023800
 800caa4:	40020400 	.word	0x40020400

0800caa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fc fb95 	bl	80091e6 <USBH_LL_IncTimer>
}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fc fbd9 	bl	800928a <USBH_LL_Connect>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fc fbee 	bl	80092d0 <USBH_LL_Disconnect>
}
 800caf4:	bf00      	nop
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	460b      	mov	r3, r1
 800cb06:	70fb      	strb	r3, [r7, #3]
 800cb08:	4613      	mov	r3, r2
 800cb0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fc fc23 	bl	800935e <USBH_LL_NotifyURBChange>
#endif
}
 800cb18:	bf00      	nop
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fc fb83 	bl	800923a <USBH_LL_PortEnabled>
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fc fb8f 	bl	800926e <USBH_LL_PortDisabled>
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d132      	bne.n	800cbd0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cb6a:	4a1c      	ldr	r2, [pc, #112]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a19      	ldr	r2, [pc, #100]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cb7a:	4b18      	ldr	r3, [pc, #96]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb7c:	4a18      	ldr	r2, [pc, #96]	; (800cbe0 <USBH_LL_Init+0x88>)
 800cb7e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cb80:	4b16      	ldr	r3, [pc, #88]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb82:	220c      	movs	r2, #12
 800cb84:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cb86:	4b15      	ldr	r3, [pc, #84]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cb8c:	4b13      	ldr	r3, [pc, #76]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cb92:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb94:	2202      	movs	r2, #2
 800cb96:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cb98:	4b10      	ldr	r3, [pc, #64]	; (800cbdc <USBH_LL_Init+0x84>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <USBH_LL_Init+0x84>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cba4:	4b0d      	ldr	r3, [pc, #52]	; (800cbdc <USBH_LL_Init+0x84>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cbaa:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <USBH_LL_Init+0x84>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cbb0:	480a      	ldr	r0, [pc, #40]	; (800cbdc <USBH_LL_Init+0x84>)
 800cbb2:	f7f5 fa42 	bl	800203a <HAL_HCD_Init>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cbbc:	f7f4 f898 	bl	8000cf0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cbc0:	4806      	ldr	r0, [pc, #24]	; (800cbdc <USBH_LL_Init+0x84>)
 800cbc2:	f7f5 fea3 	bl	800290c <HAL_HCD_GetCurrentFrame>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7fc fafc 	bl	80091c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20008ae8 	.word	0x20008ae8
 800cbe0:	40040000 	.word	0x40040000

0800cbe4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f5 fe0e 	bl	800281c <HAL_HCD_Start>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 f95e 	bl	800cec8 <USBH_Get_USB_Status>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc26:	2300      	movs	r3, #0
 800cc28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f5 fe16 	bl	8002862 <HAL_HCD_Stop>
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 f943 	bl	800cec8 <USBH_Get_USB_Status>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f5 fe60 	bl	8002928 <HAL_HCD_GetCurrentSpeed>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d00c      	beq.n	800cc88 <USBH_LL_GetSpeed+0x38>
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d80d      	bhi.n	800cc8e <USBH_LL_GetSpeed+0x3e>
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <USBH_LL_GetSpeed+0x2c>
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d003      	beq.n	800cc82 <USBH_LL_GetSpeed+0x32>
 800cc7a:	e008      	b.n	800cc8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc80:	e008      	b.n	800cc94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cc82:	2301      	movs	r3, #1
 800cc84:	73fb      	strb	r3, [r7, #15]
    break;
 800cc86:	e005      	b.n	800cc94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8c:	e002      	b.n	800cc94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	73fb      	strb	r3, [r7, #15]
    break;
 800cc92:	bf00      	nop
  }
  return  speed;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7f5 fdf1 	bl	800289c <HAL_HCD_ResetPort>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 f901 	bl	800cec8 <USBH_Get_USB_Status>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cce6:	78fa      	ldrb	r2, [r7, #3]
 800cce8:	4611      	mov	r1, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7f5 fdf9 	bl	80028e2 <HAL_HCD_HC_GetXferCount>
 800ccf0:	4603      	mov	r3, r0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ccfa:	b590      	push	{r4, r7, lr}
 800ccfc:	b089      	sub	sp, #36	; 0x24
 800ccfe:	af04      	add	r7, sp, #16
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	4608      	mov	r0, r1
 800cd04:	4611      	mov	r1, r2
 800cd06:	461a      	mov	r2, r3
 800cd08:	4603      	mov	r3, r0
 800cd0a:	70fb      	strb	r3, [r7, #3]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70bb      	strb	r3, [r7, #2]
 800cd10:	4613      	mov	r3, r2
 800cd12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd22:	787c      	ldrb	r4, [r7, #1]
 800cd24:	78ba      	ldrb	r2, [r7, #2]
 800cd26:	78f9      	ldrb	r1, [r7, #3]
 800cd28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd2a:	9302      	str	r3, [sp, #8]
 800cd2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	4623      	mov	r3, r4
 800cd3a:	f7f5 f9e5 	bl	8002108 <HAL_HCD_HC_Init>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	4618      	mov	r0, r3
 800cd46:	f000 f8bf 	bl	800cec8 <USBH_Get_USB_Status>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3714      	adds	r7, #20
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd90      	pop	{r4, r7, pc}

0800cd58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd72:	78fa      	ldrb	r2, [r7, #3]
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7f5 fa7e 	bl	8002278 <HAL_HCD_HC_Halt>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f8a0 	bl	800cec8 <USBH_Get_USB_Status>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cd96:	b590      	push	{r4, r7, lr}
 800cd98:	b089      	sub	sp, #36	; 0x24
 800cd9a:	af04      	add	r7, sp, #16
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	4608      	mov	r0, r1
 800cda0:	4611      	mov	r1, r2
 800cda2:	461a      	mov	r2, r3
 800cda4:	4603      	mov	r3, r0
 800cda6:	70fb      	strb	r3, [r7, #3]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	70bb      	strb	r3, [r7, #2]
 800cdac:	4613      	mov	r3, r2
 800cdae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cdbe:	787c      	ldrb	r4, [r7, #1]
 800cdc0:	78ba      	ldrb	r2, [r7, #2]
 800cdc2:	78f9      	ldrb	r1, [r7, #3]
 800cdc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cdc8:	9303      	str	r3, [sp, #12]
 800cdca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cdcc:	9302      	str	r3, [sp, #8]
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	4623      	mov	r3, r4
 800cdda:	f7f5 fa71 	bl	80022c0 <HAL_HCD_HC_SubmitRequest>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 f86f 	bl	800cec8 <USBH_Get_USB_Status>
 800cdea:	4603      	mov	r3, r0
 800cdec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdee:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd90      	pop	{r4, r7, pc}

0800cdf8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce0a:	78fa      	ldrb	r2, [r7, #3]
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f5 fd52 	bl	80028b8 <HAL_HCD_HC_GetURBState>
 800ce14:	4603      	mov	r3, r0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	460b      	mov	r3, r1
 800ce28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d103      	bne.n	800ce3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f000 f872 	bl	800cf20 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ce3c:	20c8      	movs	r0, #200	; 0xc8
 800ce3e:	f7f4 fc29 	bl	8001694 <HAL_Delay>
  return USBH_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	70fb      	strb	r3, [r7, #3]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ce64:	78fa      	ldrb	r2, [r7, #3]
 800ce66:	68f9      	ldr	r1, [r7, #12]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	011b      	lsls	r3, r3, #4
 800ce6c:	1a9b      	subs	r3, r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	3317      	adds	r3, #23
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00a      	beq.n	800ce90 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ce7a:	78fa      	ldrb	r2, [r7, #3]
 800ce7c:	68f9      	ldr	r1, [r7, #12]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	011b      	lsls	r3, r3, #4
 800ce82:	1a9b      	subs	r3, r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	440b      	add	r3, r1
 800ce88:	333c      	adds	r3, #60	; 0x3c
 800ce8a:	78ba      	ldrb	r2, [r7, #2]
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	e009      	b.n	800cea4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ce90:	78fa      	ldrb	r2, [r7, #3]
 800ce92:	68f9      	ldr	r1, [r7, #12]
 800ce94:	4613      	mov	r3, r2
 800ce96:	011b      	lsls	r3, r3, #4
 800ce98:	1a9b      	subs	r3, r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	440b      	add	r3, r1
 800ce9e:	333d      	adds	r3, #61	; 0x3d
 800cea0:	78ba      	ldrb	r2, [r7, #2]
 800cea2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b082      	sub	sp, #8
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7f4 fbea 	bl	8001694 <HAL_Delay>
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d817      	bhi.n	800cf0c <USBH_Get_USB_Status+0x44>
 800cedc:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <USBH_Get_USB_Status+0x1c>)
 800cede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee2:	bf00      	nop
 800cee4:	0800cef5 	.word	0x0800cef5
 800cee8:	0800cefb 	.word	0x0800cefb
 800ceec:	0800cf01 	.word	0x0800cf01
 800cef0:	0800cf07 	.word	0x0800cf07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
    break;
 800cef8:	e00b      	b.n	800cf12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cefa:	2302      	movs	r3, #2
 800cefc:	73fb      	strb	r3, [r7, #15]
    break;
 800cefe:	e008      	b.n	800cf12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf00:	2301      	movs	r3, #1
 800cf02:	73fb      	strb	r3, [r7, #15]
    break;
 800cf04:	e005      	b.n	800cf12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf06:	2302      	movs	r3, #2
 800cf08:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0a:	e002      	b.n	800cf12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf10:	bf00      	nop
  }
  return usb_status;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d102      	bne.n	800cf3a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cf34:	2301      	movs	r3, #1
 800cf36:	73fb      	strb	r3, [r7, #15]
 800cf38:	e001      	b.n	800cf3e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	461a      	mov	r2, r3
 800cf42:	2110      	movs	r1, #16
 800cf44:	4803      	ldr	r0, [pc, #12]	; (800cf54 <MX_DriverVbusHS+0x34>)
 800cf46:	f7f5 f85f 	bl	8002008 <HAL_GPIO_WritePin>
}
 800cf4a:	bf00      	nop
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	40020800 	.word	0x40020800

0800cf58 <malloc>:
 800cf58:	4b02      	ldr	r3, [pc, #8]	; (800cf64 <malloc+0xc>)
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	6818      	ldr	r0, [r3, #0]
 800cf5e:	f000 b82b 	b.w	800cfb8 <_malloc_r>
 800cf62:	bf00      	nop
 800cf64:	2000007c 	.word	0x2000007c

0800cf68 <free>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	; (800cf74 <free+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f000 b901 	b.w	800d174 <_free_r>
 800cf72:	bf00      	nop
 800cf74:	2000007c 	.word	0x2000007c

0800cf78 <sbrk_aligned>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4e0e      	ldr	r6, [pc, #56]	; (800cfb4 <sbrk_aligned+0x3c>)
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	6831      	ldr	r1, [r6, #0]
 800cf80:	4605      	mov	r5, r0
 800cf82:	b911      	cbnz	r1, 800cf8a <sbrk_aligned+0x12>
 800cf84:	f000 f8ac 	bl	800d0e0 <_sbrk_r>
 800cf88:	6030      	str	r0, [r6, #0]
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f000 f8a7 	bl	800d0e0 <_sbrk_r>
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	d00a      	beq.n	800cfac <sbrk_aligned+0x34>
 800cf96:	1cc4      	adds	r4, r0, #3
 800cf98:	f024 0403 	bic.w	r4, r4, #3
 800cf9c:	42a0      	cmp	r0, r4
 800cf9e:	d007      	beq.n	800cfb0 <sbrk_aligned+0x38>
 800cfa0:	1a21      	subs	r1, r4, r0
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f000 f89c 	bl	800d0e0 <_sbrk_r>
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d101      	bne.n	800cfb0 <sbrk_aligned+0x38>
 800cfac:	f04f 34ff 	mov.w	r4, #4294967295
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	20008ecc 	.word	0x20008ecc

0800cfb8 <_malloc_r>:
 800cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfbc:	1ccd      	adds	r5, r1, #3
 800cfbe:	f025 0503 	bic.w	r5, r5, #3
 800cfc2:	3508      	adds	r5, #8
 800cfc4:	2d0c      	cmp	r5, #12
 800cfc6:	bf38      	it	cc
 800cfc8:	250c      	movcc	r5, #12
 800cfca:	2d00      	cmp	r5, #0
 800cfcc:	4607      	mov	r7, r0
 800cfce:	db01      	blt.n	800cfd4 <_malloc_r+0x1c>
 800cfd0:	42a9      	cmp	r1, r5
 800cfd2:	d905      	bls.n	800cfe0 <_malloc_r+0x28>
 800cfd4:	230c      	movs	r3, #12
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	2600      	movs	r6, #0
 800cfda:	4630      	mov	r0, r6
 800cfdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d0b4 <_malloc_r+0xfc>
 800cfe4:	f000 f868 	bl	800d0b8 <__malloc_lock>
 800cfe8:	f8d8 3000 	ldr.w	r3, [r8]
 800cfec:	461c      	mov	r4, r3
 800cfee:	bb5c      	cbnz	r4, 800d048 <_malloc_r+0x90>
 800cff0:	4629      	mov	r1, r5
 800cff2:	4638      	mov	r0, r7
 800cff4:	f7ff ffc0 	bl	800cf78 <sbrk_aligned>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	4604      	mov	r4, r0
 800cffc:	d155      	bne.n	800d0aa <_malloc_r+0xf2>
 800cffe:	f8d8 4000 	ldr.w	r4, [r8]
 800d002:	4626      	mov	r6, r4
 800d004:	2e00      	cmp	r6, #0
 800d006:	d145      	bne.n	800d094 <_malloc_r+0xdc>
 800d008:	2c00      	cmp	r4, #0
 800d00a:	d048      	beq.n	800d09e <_malloc_r+0xe6>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	4631      	mov	r1, r6
 800d010:	4638      	mov	r0, r7
 800d012:	eb04 0903 	add.w	r9, r4, r3
 800d016:	f000 f863 	bl	800d0e0 <_sbrk_r>
 800d01a:	4581      	cmp	r9, r0
 800d01c:	d13f      	bne.n	800d09e <_malloc_r+0xe6>
 800d01e:	6821      	ldr	r1, [r4, #0]
 800d020:	1a6d      	subs	r5, r5, r1
 800d022:	4629      	mov	r1, r5
 800d024:	4638      	mov	r0, r7
 800d026:	f7ff ffa7 	bl	800cf78 <sbrk_aligned>
 800d02a:	3001      	adds	r0, #1
 800d02c:	d037      	beq.n	800d09e <_malloc_r+0xe6>
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	442b      	add	r3, r5
 800d032:	6023      	str	r3, [r4, #0]
 800d034:	f8d8 3000 	ldr.w	r3, [r8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d038      	beq.n	800d0ae <_malloc_r+0xf6>
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	42a2      	cmp	r2, r4
 800d040:	d12b      	bne.n	800d09a <_malloc_r+0xe2>
 800d042:	2200      	movs	r2, #0
 800d044:	605a      	str	r2, [r3, #4]
 800d046:	e00f      	b.n	800d068 <_malloc_r+0xb0>
 800d048:	6822      	ldr	r2, [r4, #0]
 800d04a:	1b52      	subs	r2, r2, r5
 800d04c:	d41f      	bmi.n	800d08e <_malloc_r+0xd6>
 800d04e:	2a0b      	cmp	r2, #11
 800d050:	d917      	bls.n	800d082 <_malloc_r+0xca>
 800d052:	1961      	adds	r1, r4, r5
 800d054:	42a3      	cmp	r3, r4
 800d056:	6025      	str	r5, [r4, #0]
 800d058:	bf18      	it	ne
 800d05a:	6059      	strne	r1, [r3, #4]
 800d05c:	6863      	ldr	r3, [r4, #4]
 800d05e:	bf08      	it	eq
 800d060:	f8c8 1000 	streq.w	r1, [r8]
 800d064:	5162      	str	r2, [r4, r5]
 800d066:	604b      	str	r3, [r1, #4]
 800d068:	4638      	mov	r0, r7
 800d06a:	f104 060b 	add.w	r6, r4, #11
 800d06e:	f000 f829 	bl	800d0c4 <__malloc_unlock>
 800d072:	f026 0607 	bic.w	r6, r6, #7
 800d076:	1d23      	adds	r3, r4, #4
 800d078:	1af2      	subs	r2, r6, r3
 800d07a:	d0ae      	beq.n	800cfda <_malloc_r+0x22>
 800d07c:	1b9b      	subs	r3, r3, r6
 800d07e:	50a3      	str	r3, [r4, r2]
 800d080:	e7ab      	b.n	800cfda <_malloc_r+0x22>
 800d082:	42a3      	cmp	r3, r4
 800d084:	6862      	ldr	r2, [r4, #4]
 800d086:	d1dd      	bne.n	800d044 <_malloc_r+0x8c>
 800d088:	f8c8 2000 	str.w	r2, [r8]
 800d08c:	e7ec      	b.n	800d068 <_malloc_r+0xb0>
 800d08e:	4623      	mov	r3, r4
 800d090:	6864      	ldr	r4, [r4, #4]
 800d092:	e7ac      	b.n	800cfee <_malloc_r+0x36>
 800d094:	4634      	mov	r4, r6
 800d096:	6876      	ldr	r6, [r6, #4]
 800d098:	e7b4      	b.n	800d004 <_malloc_r+0x4c>
 800d09a:	4613      	mov	r3, r2
 800d09c:	e7cc      	b.n	800d038 <_malloc_r+0x80>
 800d09e:	230c      	movs	r3, #12
 800d0a0:	603b      	str	r3, [r7, #0]
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f000 f80e 	bl	800d0c4 <__malloc_unlock>
 800d0a8:	e797      	b.n	800cfda <_malloc_r+0x22>
 800d0aa:	6025      	str	r5, [r4, #0]
 800d0ac:	e7dc      	b.n	800d068 <_malloc_r+0xb0>
 800d0ae:	605b      	str	r3, [r3, #4]
 800d0b0:	deff      	udf	#255	; 0xff
 800d0b2:	bf00      	nop
 800d0b4:	20008ec8 	.word	0x20008ec8

0800d0b8 <__malloc_lock>:
 800d0b8:	4801      	ldr	r0, [pc, #4]	; (800d0c0 <__malloc_lock+0x8>)
 800d0ba:	f000 b84b 	b.w	800d154 <__retarget_lock_acquire_recursive>
 800d0be:	bf00      	nop
 800d0c0:	2000900c 	.word	0x2000900c

0800d0c4 <__malloc_unlock>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__malloc_unlock+0x8>)
 800d0c6:	f000 b846 	b.w	800d156 <__retarget_lock_release_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	2000900c 	.word	0x2000900c

0800d0d0 <memset>:
 800d0d0:	4402      	add	r2, r0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d100      	bne.n	800d0da <memset+0xa>
 800d0d8:	4770      	bx	lr
 800d0da:	f803 1b01 	strb.w	r1, [r3], #1
 800d0de:	e7f9      	b.n	800d0d4 <memset+0x4>

0800d0e0 <_sbrk_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4d06      	ldr	r5, [pc, #24]	; (800d0fc <_sbrk_r+0x1c>)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	f7f4 fa1e 	bl	800152c <_sbrk>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_sbrk_r+0x1a>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_sbrk_r+0x1a>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20009008 	.word	0x20009008

0800d100 <__errno>:
 800d100:	4b01      	ldr	r3, [pc, #4]	; (800d108 <__errno+0x8>)
 800d102:	6818      	ldr	r0, [r3, #0]
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	2000007c 	.word	0x2000007c

0800d10c <__libc_init_array>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	4d0d      	ldr	r5, [pc, #52]	; (800d144 <__libc_init_array+0x38>)
 800d110:	4c0d      	ldr	r4, [pc, #52]	; (800d148 <__libc_init_array+0x3c>)
 800d112:	1b64      	subs	r4, r4, r5
 800d114:	10a4      	asrs	r4, r4, #2
 800d116:	2600      	movs	r6, #0
 800d118:	42a6      	cmp	r6, r4
 800d11a:	d109      	bne.n	800d130 <__libc_init_array+0x24>
 800d11c:	4d0b      	ldr	r5, [pc, #44]	; (800d14c <__libc_init_array+0x40>)
 800d11e:	4c0c      	ldr	r4, [pc, #48]	; (800d150 <__libc_init_array+0x44>)
 800d120:	f000 f874 	bl	800d20c <_init>
 800d124:	1b64      	subs	r4, r4, r5
 800d126:	10a4      	asrs	r4, r4, #2
 800d128:	2600      	movs	r6, #0
 800d12a:	42a6      	cmp	r6, r4
 800d12c:	d105      	bne.n	800d13a <__libc_init_array+0x2e>
 800d12e:	bd70      	pop	{r4, r5, r6, pc}
 800d130:	f855 3b04 	ldr.w	r3, [r5], #4
 800d134:	4798      	blx	r3
 800d136:	3601      	adds	r6, #1
 800d138:	e7ee      	b.n	800d118 <__libc_init_array+0xc>
 800d13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d13e:	4798      	blx	r3
 800d140:	3601      	adds	r6, #1
 800d142:	e7f2      	b.n	800d12a <__libc_init_array+0x1e>
 800d144:	0800d2b0 	.word	0x0800d2b0
 800d148:	0800d2b0 	.word	0x0800d2b0
 800d14c:	0800d2b0 	.word	0x0800d2b0
 800d150:	0800d2b4 	.word	0x0800d2b4

0800d154 <__retarget_lock_acquire_recursive>:
 800d154:	4770      	bx	lr

0800d156 <__retarget_lock_release_recursive>:
 800d156:	4770      	bx	lr

0800d158 <memcpy>:
 800d158:	440a      	add	r2, r1
 800d15a:	4291      	cmp	r1, r2
 800d15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d160:	d100      	bne.n	800d164 <memcpy+0xc>
 800d162:	4770      	bx	lr
 800d164:	b510      	push	{r4, lr}
 800d166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d16e:	4291      	cmp	r1, r2
 800d170:	d1f9      	bne.n	800d166 <memcpy+0xe>
 800d172:	bd10      	pop	{r4, pc}

0800d174 <_free_r>:
 800d174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d176:	2900      	cmp	r1, #0
 800d178:	d044      	beq.n	800d204 <_free_r+0x90>
 800d17a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d17e:	9001      	str	r0, [sp, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f1a1 0404 	sub.w	r4, r1, #4
 800d186:	bfb8      	it	lt
 800d188:	18e4      	addlt	r4, r4, r3
 800d18a:	f7ff ff95 	bl	800d0b8 <__malloc_lock>
 800d18e:	4a1e      	ldr	r2, [pc, #120]	; (800d208 <_free_r+0x94>)
 800d190:	9801      	ldr	r0, [sp, #4]
 800d192:	6813      	ldr	r3, [r2, #0]
 800d194:	b933      	cbnz	r3, 800d1a4 <_free_r+0x30>
 800d196:	6063      	str	r3, [r4, #4]
 800d198:	6014      	str	r4, [r2, #0]
 800d19a:	b003      	add	sp, #12
 800d19c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1a0:	f7ff bf90 	b.w	800d0c4 <__malloc_unlock>
 800d1a4:	42a3      	cmp	r3, r4
 800d1a6:	d908      	bls.n	800d1ba <_free_r+0x46>
 800d1a8:	6825      	ldr	r5, [r4, #0]
 800d1aa:	1961      	adds	r1, r4, r5
 800d1ac:	428b      	cmp	r3, r1
 800d1ae:	bf01      	itttt	eq
 800d1b0:	6819      	ldreq	r1, [r3, #0]
 800d1b2:	685b      	ldreq	r3, [r3, #4]
 800d1b4:	1949      	addeq	r1, r1, r5
 800d1b6:	6021      	streq	r1, [r4, #0]
 800d1b8:	e7ed      	b.n	800d196 <_free_r+0x22>
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	b10b      	cbz	r3, 800d1c4 <_free_r+0x50>
 800d1c0:	42a3      	cmp	r3, r4
 800d1c2:	d9fa      	bls.n	800d1ba <_free_r+0x46>
 800d1c4:	6811      	ldr	r1, [r2, #0]
 800d1c6:	1855      	adds	r5, r2, r1
 800d1c8:	42a5      	cmp	r5, r4
 800d1ca:	d10b      	bne.n	800d1e4 <_free_r+0x70>
 800d1cc:	6824      	ldr	r4, [r4, #0]
 800d1ce:	4421      	add	r1, r4
 800d1d0:	1854      	adds	r4, r2, r1
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	6011      	str	r1, [r2, #0]
 800d1d6:	d1e0      	bne.n	800d19a <_free_r+0x26>
 800d1d8:	681c      	ldr	r4, [r3, #0]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	6053      	str	r3, [r2, #4]
 800d1de:	440c      	add	r4, r1
 800d1e0:	6014      	str	r4, [r2, #0]
 800d1e2:	e7da      	b.n	800d19a <_free_r+0x26>
 800d1e4:	d902      	bls.n	800d1ec <_free_r+0x78>
 800d1e6:	230c      	movs	r3, #12
 800d1e8:	6003      	str	r3, [r0, #0]
 800d1ea:	e7d6      	b.n	800d19a <_free_r+0x26>
 800d1ec:	6825      	ldr	r5, [r4, #0]
 800d1ee:	1961      	adds	r1, r4, r5
 800d1f0:	428b      	cmp	r3, r1
 800d1f2:	bf04      	itt	eq
 800d1f4:	6819      	ldreq	r1, [r3, #0]
 800d1f6:	685b      	ldreq	r3, [r3, #4]
 800d1f8:	6063      	str	r3, [r4, #4]
 800d1fa:	bf04      	itt	eq
 800d1fc:	1949      	addeq	r1, r1, r5
 800d1fe:	6021      	streq	r1, [r4, #0]
 800d200:	6054      	str	r4, [r2, #4]
 800d202:	e7ca      	b.n	800d19a <_free_r+0x26>
 800d204:	b003      	add	sp, #12
 800d206:	bd30      	pop	{r4, r5, pc}
 800d208:	20008ec8 	.word	0x20008ec8

0800d20c <_init>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr

0800d218 <_fini>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	bf00      	nop
 800d21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21e:	bc08      	pop	{r3}
 800d220:	469e      	mov	lr, r3
 800d222:	4770      	bx	lr
