
L053_INIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003504  08003504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800350c  0800350c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  2000000c  08003520  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08003520  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113b7  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024bc  00000000  00000000  0003142e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6b  00000000  00000000  00034798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000144d7  00000000  00000000  00035303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d01  00000000  00000000  000497da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cfa6  00000000  00000000  0005c4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f8  00000000  00000000  000d9484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000dc97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003480 	.word	0x08003480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003480 	.word	0x08003480

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fcb8 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f810 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9d2 	bl	800085c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b8:	f000 f888 	bl	80005cc <MX_I2C1_Init>
  MX_SPI1_Init();
 80004bc:	f000 f8c6 	bl	800064c <MX_SPI1_Init>
  MX_SPI2_Init();
 80004c0:	f000 f8fc 	bl	80006bc <MX_SPI2_Init>
  MX_TSC_Init();
 80004c4:	f000 f930 	bl	8000728 <MX_TSC_Init>
  MX_USART1_UART_Init();
 80004c8:	f000 f972 	bl	80007b0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004cc:	f000 f9a0 	bl	8000810 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <main+0x28>
	...

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b09d      	sub	sp, #116	; 0x74
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2438      	movs	r4, #56	; 0x38
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2338      	movs	r3, #56	; 0x38
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f002 ff9e 	bl	8003426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	2324      	movs	r3, #36	; 0x24
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 ff96 	bl	8003426 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fa:	003b      	movs	r3, r7
 80004fc:	0018      	movs	r0, r3
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 ff8f 	bl	8003426 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000508:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <SystemClock_Config+0xf0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a2e      	ldr	r2, [pc, #184]	; (80005c8 <SystemClock_Config+0xf4>)
 800050e:	401a      	ands	r2, r3
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <SystemClock_Config+0xf0>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0109      	lsls	r1, r1, #4
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2221      	movs	r2, #33	; 0x21
 800051e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	22a0      	movs	r2, #160	; 0xa0
 8000524:	02d2      	lsls	r2, r2, #11
 8000526:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000528:	0021      	movs	r1, r4
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2202      	movs	r2, #2
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_12;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	0352      	lsls	r2, r2, #13
 8000544:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	0412      	lsls	r2, r2, #16
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f001 f975 	bl	8001840 <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800055a:	f000 fa2d 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	2124      	movs	r1, #36	; 0x24
 8000560:	187b      	adds	r3, r7, r1
 8000562:	220f      	movs	r2, #15
 8000564:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2203      	movs	r2, #3
 800056a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2101      	movs	r1, #1
 8000582:	0018      	movs	r0, r3
 8000584:	f001 fd20 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800058c:	f000 fa14 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000590:	003b      	movs	r3, r7
 8000592:	2249      	movs	r2, #73	; 0x49
 8000594:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	04d2      	lsls	r2, r2, #19
 80005a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005aa:	003b      	movs	r3, r7
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 ff2f 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005b6:	f000 f9ff 	bl	80009b8 <Error_Handler>
  }
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b01d      	add	sp, #116	; 0x74
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40007000 	.word	0x40007000
 80005c8:	ffffe7ff 	.word	0xffffe7ff

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_I2C1_Init+0x78>)
 80005d2:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <MX_I2C1_Init+0x7c>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_I2C1_Init+0x78>)
 80005d8:	22e1      	movs	r2, #225	; 0xe1
 80005da:	00d2      	lsls	r2, r2, #3
 80005dc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_I2C1_Init+0x78>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_I2C1_Init+0x78>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_I2C1_Init+0x78>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_I2C1_Init+0x78>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_I2C1_Init+0x78>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_I2C1_Init+0x78>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_I2C1_Init+0x78>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_I2C1_Init+0x78>)
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fec0 	bl	8001390 <HAL_I2C_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f9d0 	bl	80009b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_I2C1_Init+0x78>)
 800061a:	2100      	movs	r1, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f000 ff4d 	bl	80014bc <HAL_I2CEx_ConfigAnalogFilter>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000626:	f000 f9c7 	bl	80009b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_I2C1_Init+0x78>)
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f000 ff90 	bl	8001554 <HAL_I2CEx_ConfigDigitalFilter>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000638:	f000 f9be 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000028 	.word	0x20000028
 8000648:	40005400 	.word	0x40005400

0800064c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000652:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <MX_SPI1_Init+0x6c>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000658:	2282      	movs	r2, #130	; 0x82
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	0212      	lsls	r2, r2, #8
 8000664:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI1_Init+0x68>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_SPI1_Init+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000698:	2207      	movs	r2, #7
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <MX_SPI1_Init+0x68>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 f844 	bl	800272c <HAL_SPI_Init>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 f986 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	40013000 	.word	0x40013000

080006bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI2_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI2_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI2_Init+0x64>)
 80006c8:	2282      	movs	r2, #130	; 0x82
 80006ca:	0052      	lsls	r2, r2, #1
 80006cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI2_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI2_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI2_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI2_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI2_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI2_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SPI2_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI2_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SPI2_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI2_Init+0x64>)
 8000706:	2207      	movs	r2, #7
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_SPI2_Init+0x64>)
 800070c:	0018      	movs	r0, r3
 800070e:	f002 f80d 	bl	800272c <HAL_SPI_Init>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000716:	f000 f94f 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000d4 	.word	0x200000d4
 8000724:	40003800 	.word	0x40003800

08000728 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_TSC_Init+0x80>)
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <MX_TSC_Init+0x84>)
 8000730:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TSC_Init+0x80>)
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0552      	lsls	r2, r2, #21
 8000738:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_TSC_Init+0x80>)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0452      	lsls	r2, r2, #17
 8000740:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_TSC_Init+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TSC_Init+0x80>)
 800074a:	2201      	movs	r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_TSC_Init+0x80>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_TSC_Init+0x80>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0192      	lsls	r2, r2, #6
 800075a:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_TSC_Init+0x80>)
 800075e:	22a0      	movs	r2, #160	; 0xa0
 8000760:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_TSC_Init+0x80>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_TSC_Init+0x80>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TSC_Init+0x80>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_TSC_Init+0x80>)
 8000776:	222c      	movs	r2, #44	; 0x2c
 8000778:	2100      	movs	r1, #0
 800077a:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_TSC_Init+0x80>)
 800077e:	2291      	movs	r2, #145	; 0x91
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_TSC_Init+0x80>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_TSC_Init+0x80>)
 800078c:	2291      	movs	r2, #145	; 0x91
 800078e:	00d2      	lsls	r2, r2, #3
 8000790:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_TSC_Init+0x80>)
 8000794:	0018      	movs	r0, r3
 8000796:	f002 f85d 	bl	8002854 <HAL_TSC_Init>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 800079e:	f000 f90b 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000012c 	.word	0x2000012c
 80007ac:	40024000 	.word	0x40024000

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART1_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007bc:	22e1      	movs	r2, #225	; 0xe1
 80007be:	0252      	lsls	r2, r2, #9
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 f8d3 	bl	80029a0 <HAL_UART_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8db 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000170 	.word	0x20000170
 800080c:	40013800 	.word	0x40013800

08000810 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USB_PCD_Init+0x44>)
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_USB_PCD_Init+0x48>)
 8000818:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USB_PCD_Init+0x44>)
 800081c:	2208      	movs	r2, #8
 800081e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USB_PCD_Init+0x44>)
 8000822:	2202      	movs	r2, #2
 8000824:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USB_PCD_Init+0x44>)
 8000828:	2202      	movs	r2, #2
 800082a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USB_PCD_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USB_PCD_Init+0x44>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USB_PCD_Init+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_USB_PCD_Init+0x44>)
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fed3 	bl	80015ec <HAL_PCD_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800084a:	f000 f8b5 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200001f8 	.word	0x200001f8
 8000858:	40005c00 	.word	0x40005c00

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	2414      	movs	r4, #20
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f002 fdda 	bl	8003426 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b4d      	ldr	r3, [pc, #308]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b4c      	ldr	r3, [pc, #304]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000878:	2104      	movs	r1, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2204      	movs	r2, #4
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <MX_GPIO_Init+0x14c>)
 800088c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088e:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
 8000896:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <MX_GPIO_Init+0x14c>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <MX_GPIO_Init+0x14c>)
 80008a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <MX_GPIO_Init+0x14c>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_GPIO_Init+0x14c>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x14c>)
 80008bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <MX_GPIO_Init+0x14c>)
 80008c0:	2102      	movs	r1, #2
 80008c2:	430a      	orrs	r2, r1
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <MX_GPIO_Init+0x14c>)
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	2202      	movs	r2, #2
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fd3a 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin, GPIO_PIN_RESET);
 80008e0:	4932      	ldr	r1, [pc, #200]	; (80009ac <MX_GPIO_Init+0x150>)
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <MX_GPIO_Init+0x154>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fd34 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0192      	lsls	r2, r2, #6
 80008f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2288      	movs	r2, #136	; 0x88
 80008f8:	0352      	lsls	r2, r2, #13
 80008fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000902:	193b      	adds	r3, r7, r4
 8000904:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <MX_GPIO_Init+0x158>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f000 fbad 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2290      	movs	r2, #144	; 0x90
 8000918:	0352      	lsls	r2, r2, #13
 800091a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000922:	193a      	adds	r2, r7, r4
 8000924:	23a0      	movs	r3, #160	; 0xa0
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fb9c 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin ePD1_BUSY_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|ePD1_BUSY_Pin;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2281      	movs	r2, #129	; 0x81
 8000934:	0052      	lsls	r2, r2, #1
 8000936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	193a      	adds	r2, r7, r4
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fb8b 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2220      	movs	r2, #32
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800096a:	193a      	adds	r2, r7, r4
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fb78 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : ePD1_RESET_Pin ePD1_PWR_ENn_Pin ePD1_D_C_Pin LD_G_Pin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_PWR_ENn_Pin|ePD1_D_C_Pin|LD_G_Pin;
 8000978:	0021      	movs	r1, r4
 800097a:	187b      	adds	r3, r7, r1
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <MX_GPIO_Init+0x150>)
 800097e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	187b      	adds	r3, r7, r1
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <MX_GPIO_Init+0x154>)
 8000996:	0019      	movs	r1, r3
 8000998:	0010      	movs	r0, r2
 800099a:	f000 fb65 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00b      	add	sp, #44	; 0x2c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000
 80009ac:	00000c14 	.word	0x00000c14
 80009b0:	50000400 	.word	0x50000400
 80009b4:	50000800 	.word	0x50000800

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_MspInit+0x24>)
 80009ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x24>)
 80009ce:	2101      	movs	r1, #1
 80009d0:	430a      	orrs	r2, r1
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_MspInit+0x24>)
 80009d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_MspInit+0x24>)
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0549      	lsls	r1, r1, #21
 80009de:	430a      	orrs	r2, r1
 80009e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	240c      	movs	r4, #12
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	2314      	movs	r3, #20
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f002 fd11 	bl	8003426 <memset>
  if(hi2c->Instance==I2C1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x80>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d129      	bne.n	8000a62 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a14:	2102      	movs	r1, #2
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SCL_Pin|MFX_I2C_SDA_Pin;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	22c0      	movs	r2, #192	; 0xc0
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2212      	movs	r2, #18
 8000a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2204      	movs	r2, #4
 8000a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 fb0a 	bl	8001068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	0389      	lsls	r1, r1, #14
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b009      	add	sp, #36	; 0x24
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	50000400 	.word	0x50000400

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2414      	movs	r4, #20
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f002 fccb 	bl	8003426 <memset>
  if(hspi->Instance==SPI1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a41      	ldr	r2, [pc, #260]	; (8000b9c <HAL_SPI_MspInit+0x124>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d14c      	bne.n	8000b34 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	0149      	lsls	r1, r1, #5
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aac:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab4:	4b3a      	ldr	r3, [pc, #232]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac4:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000acc:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	0212      	lsls	r2, r2, #8
 8000ade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000af8:	193a      	adds	r2, r7, r4
 8000afa:	23a0      	movs	r3, #160	; 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fab1 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2202      	movs	r2, #2
 8000b12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <HAL_SPI_MspInit+0x12c>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fa9b 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b32:	e02e      	b.n	8000b92 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <HAL_SPI_MspInit+0x130>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d129      	bne.n	8000b92 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	01c9      	lsls	r1, r1, #7
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000b52:	2102      	movs	r1, #2
 8000b54:	430a      	orrs	r2, r1
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_SPI_MspInit+0x128>)
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	4013      	ands	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NFC_NSS_Pin|NFC_SCK_Pin|NFC_MISO_Pin|NFC_MOSI_Pin;
 8000b64:	2114      	movs	r1, #20
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	22f0      	movs	r2, #240	; 0xf0
 8000b6a:	0212      	lsls	r2, r2, #8
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_SPI_MspInit+0x12c>)
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	f000 fa6b 	bl	8001068 <HAL_GPIO_Init>
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b00b      	add	sp, #44	; 0x2c
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	50000400 	.word	0x50000400
 8000ba8:	40003800 	.word	0x40003800

08000bac <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b08b      	sub	sp, #44	; 0x2c
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	2414      	movs	r4, #20
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2314      	movs	r3, #20
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f002 fc31 	bl	8003426 <memset>
  if(htsc->Instance==TSC)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a41      	ldr	r2, [pc, #260]	; (8000cd0 <HAL_TSC_MspInit+0x124>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d17c      	bne.n	8000cc8 <HAL_TSC_MspInit+0x11c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0249      	lsls	r1, r1, #9
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	631a      	str	r2, [r3, #48]	; 0x30
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bee:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c06:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000c08:	2102      	movs	r1, #2
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_TSC_MspInit+0x128>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2244      	movs	r2, #68	; 0x44
 8000c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2202      	movs	r2, #2
 8000c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2203      	movs	r2, #3
 8000c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	193a      	adds	r2, r7, r4
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 fa11 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2288      	movs	r2, #136	; 0x88
 8000c4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2212      	movs	r2, #18
 8000c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2203      	movs	r2, #3
 8000c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	193a      	adds	r2, r7, r4
 8000c66:	23a0      	movs	r3, #160	; 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f9fb 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_TSC_MspInit+0x12c>)
 8000c94:	0019      	movs	r1, r3
 8000c96:	0010      	movs	r0, r2
 8000c98:	f000 f9e6 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2212      	movs	r2, #18
 8000ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_TSC_MspInit+0x12c>)
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	f000 f9d0 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b00b      	add	sp, #44	; 0x2c
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	40024000 	.word	0x40024000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	50000400 	.word	0x50000400

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	240c      	movs	r4, #12
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2314      	movs	r3, #20
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f002 fb99 	bl	8003426 <memset>
  if(huart->Instance==USART1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0x80>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12a      	bne.n	8000d54 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	01c9      	lsls	r1, r1, #7
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4013      	ands	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	22c0      	movs	r2, #192	; 0xc0
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2202      	movs	r2, #2
 8000d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2204      	movs	r2, #4
 8000d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	187a      	adds	r2, r7, r1
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f98a 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b009      	add	sp, #36	; 0x24
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_PCD_MspInit+0x28>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d106      	bne.n	8000d84 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_PCD_MspInit+0x2c>)
 8000d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_PCD_MspInit+0x2c>)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0409      	lsls	r1, r1, #16
 8000d80:	430a      	orrs	r2, r1
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005c00 	.word	0x40005c00
 8000d90:	40021000 	.word	0x40021000

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f886 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fff7 	bl	8000dc2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	; (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f002 fb1d 	bl	8003438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb53 	bl	80004a8 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e10:	08003514 	.word	0x08003514
  ldr r2, =_sbss
 8000e14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e18:	200004f0 	.word	0x200004f0

08000e1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_COMP_IRQHandler>
	...

08000e20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x3c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_Init+0x3c>)
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f811 	bl	8000e60 <HAL_InitTick>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e001      	b.n	8000e4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4a:	f7ff fdbb 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_InitTick+0x5c>)
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_InitTick+0x60>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	0019      	movs	r1, r3
 8000e72:	23fa      	movs	r3, #250	; 0xfa
 8000e74:	0098      	lsls	r0, r3, #2
 8000e76:	f7ff f947 	bl	8000108 <__udivsi3>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	0020      	movs	r0, r4
 8000e80:	f7ff f942 	bl	8000108 <__udivsi3>
 8000e84:	0003      	movs	r3, r0
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f8e1 	bl	800104e <HAL_SYSTICK_Config>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e00f      	b.n	8000eb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d80b      	bhi.n	8000eb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	425b      	negs	r3, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 f8be 	bl	8001024 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_InitTick+0x64>)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b003      	add	sp, #12
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	18d2      	adds	r2, r2, r3
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_IncTick+0x20>)
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	200004ec 	.word	0x200004ec

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_GetTick+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	200004ec 	.word	0x200004ec

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	0002      	movs	r2, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b7f      	cmp	r3, #127	; 0x7f
 8000f14:	d828      	bhi.n	8000f68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <__NVIC_SetPriority+0xd4>)
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	33c0      	adds	r3, #192	; 0xc0
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	589b      	ldr	r3, [r3, r2]
 8000f26:	1dfa      	adds	r2, r7, #7
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	400a      	ands	r2, r1
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	21ff      	movs	r1, #255	; 0xff
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	019b      	lsls	r3, r3, #6
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	401a      	ands	r2, r3
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	4003      	ands	r3, r0
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <__NVIC_SetPriority+0xd4>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	33c0      	adds	r3, #192	; 0xc0
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f66:	e031      	b.n	8000fcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <__NVIC_SetPriority+0xd8>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0019      	movs	r1, r3
 8000f70:	230f      	movs	r3, #15
 8000f72:	400b      	ands	r3, r1
 8000f74:	3b08      	subs	r3, #8
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3306      	adds	r3, #6
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	1dfa      	adds	r2, r7, #7
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	0011      	movs	r1, r2
 8000f88:	2203      	movs	r2, #3
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	21ff      	movs	r1, #255	; 0xff
 8000f90:	4091      	lsls	r1, r2
 8000f92:	000a      	movs	r2, r1
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	401a      	ands	r2, r3
 8000f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	2303      	movs	r3, #3
 8000faa:	4003      	ands	r3, r0
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <__NVIC_SetPriority+0xd8>)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	001c      	movs	r4, r3
 8000fb8:	230f      	movs	r3, #15
 8000fba:	4023      	ands	r3, r4
 8000fbc:	3b08      	subs	r3, #8
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	18c3      	adds	r3, r0, r3
 8000fc8:	3304      	adds	r3, #4
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	045b      	lsls	r3, r3, #17
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d301      	bcc.n	8000ff4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e010      	b.n	8001016 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SysTick_Config+0x44>)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	425b      	negs	r3, r3
 8001000:	2103      	movs	r1, #3
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff7c 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x44>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x44>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	210f      	movs	r1, #15
 8001030:	187b      	adds	r3, r7, r1
 8001032:	1c02      	adds	r2, r0, #0
 8001034:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	187b      	adds	r3, r7, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ffbf 	bl	8000fdc <SysTick_Config>
 800105e:	0003      	movs	r3, r0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800107e:	e14f      	b.n	8001320 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4091      	lsls	r1, r2
 800108a:	000a      	movs	r2, r1
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d100      	bne.n	8001098 <HAL_GPIO_Init+0x30>
 8001096:	e140      	b.n	800131a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d005      	beq.n	80010b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	2201      	movs	r2, #1
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2203      	movs	r2, #3
 8001118:	4013      	ands	r3, r2
 800111a:	2b03      	cmp	r3, #3
 800111c:	d017      	beq.n	800114e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	4013      	ands	r3, r2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	58d3      	ldr	r3, [r2, r3]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2207      	movs	r2, #7
 800116c:	4013      	ands	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2107      	movs	r1, #7
 8001186:	400b      	ands	r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	401a      	ands	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	029b      	lsls	r3, r3, #10
 80011de:	4013      	ands	r3, r2
 80011e0:	d100      	bne.n	80011e4 <HAL_GPIO_Init+0x17c>
 80011e2:	e09a      	b.n	800131a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80011e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_GPIO_Init+0x2d4>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	589b      	ldr	r3, [r3, r2]
 80011fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	429a      	cmp	r2, r3
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x1ea>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a47      	ldr	r2, [pc, #284]	; (8001340 <HAL_GPIO_Init+0x2d8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x1e6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a46      	ldr	r2, [pc, #280]	; (8001344 <HAL_GPIO_Init+0x2dc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x1e2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a45      	ldr	r2, [pc, #276]	; (8001348 <HAL_GPIO_Init+0x2e0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x1de>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a44      	ldr	r2, [pc, #272]	; (800134c <HAL_GPIO_Init+0x2e4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x1da>
 800123e:	2305      	movs	r3, #5
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001242:	2306      	movs	r3, #6
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x1ec>
 8001252:	2300      	movs	r3, #0
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	2103      	movs	r1, #3
 8001258:	400a      	ands	r2, r1
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <HAL_GPIO_Init+0x2d4>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	035b      	lsls	r3, r3, #13
 800128a:	4013      	ands	r3, r2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	039b      	lsls	r3, r3, #14
 80012b4:	4013      	ands	r3, r2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	4013      	ands	r3, r2
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	40da      	lsrs	r2, r3
 8001328:	1e13      	subs	r3, r2, #0
 800132a:	d000      	beq.n	800132e <HAL_GPIO_Init+0x2c6>
 800132c:	e6a8      	b.n	8001080 <HAL_GPIO_Init+0x18>
  }
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b006      	add	sp, #24
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	50000400 	.word	0x50000400
 8001344:	50000800 	.word	0x50000800
 8001348:	50000c00 	.word	0x50000c00
 800134c:	50001c00 	.word	0x50001c00
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	0008      	movs	r0, r1
 800135e:	0011      	movs	r1, r2
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	1c7b      	adds	r3, r7, #1
 8001368:	1c0a      	adds	r2, r1, #0
 800136a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136c:	1c7b      	adds	r3, r7, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001374:	1cbb      	adds	r3, r7, #2
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e082      	b.n	80014a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	2100      	movs	r1, #0
 80013b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fb17 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2241      	movs	r2, #65	; 0x41
 80013c2:	2124      	movs	r1, #36	; 0x24
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4934      	ldr	r1, [pc, #208]	; (80014b0 <HAL_I2C_Init+0x120>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4931      	ldr	r1, [pc, #196]	; (80014b4 <HAL_I2C_Init+0x124>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0209      	lsls	r1, r1, #8
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e007      	b.n	800141e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2184      	movs	r1, #132	; 0x84
 8001418:	0209      	lsls	r1, r1, #8
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d104      	bne.n	8001430 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	491f      	ldr	r1, [pc, #124]	; (80014b8 <HAL_I2C_Init+0x128>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	491a      	ldr	r1, [pc, #104]	; (80014b4 <HAL_I2C_Init+0x124>)
 800144c:	400a      	ands	r2, r1
 800144e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	431a      	orrs	r2, r3
 800145a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69d9      	ldr	r1, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2241      	movs	r2, #65	; 0x41
 8001494:	2120      	movs	r1, #32
 8001496:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2242      	movs	r2, #66	; 0x42
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	f0ffffff 	.word	0xf0ffffff
 80014b4:	ffff7fff 	.word	0xffff7fff
 80014b8:	02008000 	.word	0x02008000

080014bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d138      	bne.n	8001544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2240      	movs	r2, #64	; 0x40
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014dc:	2302      	movs	r3, #2
 80014de:	e032      	b.n	8001546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2241      	movs	r2, #65	; 0x41
 80014ec:	2124      	movs	r1, #36	; 0x24
 80014ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4911      	ldr	r1, [pc, #68]	; (8001550 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2241      	movs	r2, #65	; 0x41
 8001534:	2120      	movs	r1, #32
 8001536:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	2100      	movs	r1, #0
 800153e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001544:	2302      	movs	r3, #2
  }
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	ffffefff 	.word	0xffffefff

08001554 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2241      	movs	r2, #65	; 0x41
 8001562:	5c9b      	ldrb	r3, [r3, r2]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b20      	cmp	r3, #32
 8001568:	d139      	bne.n	80015de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	5c9b      	ldrb	r3, [r3, r2]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001574:	2302      	movs	r3, #2
 8001576:	e033      	b.n	80015e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2240      	movs	r2, #64	; 0x40
 800157c:	2101      	movs	r1, #1
 800157e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2241      	movs	r2, #65	; 0x41
 8001584:	2124      	movs	r1, #36	; 0x24
 8001586:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2241      	movs	r2, #65	; 0x41
 80015ce:	2120      	movs	r1, #32
 80015d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015de:	2302      	movs	r3, #2
  }
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	fffff0ff 	.word	0xfffff0ff

080015ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af06      	add	r7, sp, #24
 80015f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0f0      	b.n	80017e0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a79      	ldr	r2, [pc, #484]	; (80017e8 <HAL_PCD_Init+0x1fc>)
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	23aa      	movs	r3, #170	; 0xaa
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	2100      	movs	r1, #0
 8001612:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fba4 	bl	8000d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a72      	ldr	r2, [pc, #456]	; (80017e8 <HAL_PCD_Init+0x1fc>)
 8001620:	2103      	movs	r1, #3
 8001622:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0018      	movs	r0, r3
 800162a:	f001 febb 	bl	80033a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	230f      	movs	r3, #15
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e049      	b.n	80016cc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001638:	200f      	movs	r0, #15
 800163a:	183b      	adds	r3, r7, r0
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	0013      	movs	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	189b      	adds	r3, r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	18cb      	adds	r3, r1, r3
 800164c:	3301      	adds	r3, #1
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001652:	183b      	adds	r3, r7, r0
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	0013      	movs	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	189b      	adds	r3, r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	183a      	adds	r2, r7, r0
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001668:	183b      	adds	r3, r7, r0
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	0013      	movs	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	189b      	adds	r3, r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	18cb      	adds	r3, r1, r3
 800167a:	3303      	adds	r3, #3
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001680:	183b      	adds	r3, r7, r0
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	0013      	movs	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	189b      	adds	r3, r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	18cb      	adds	r3, r1, r3
 8001690:	3338      	adds	r3, #56	; 0x38
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001696:	183b      	adds	r3, r7, r0
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	0013      	movs	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	189b      	adds	r3, r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	18cb      	adds	r3, r1, r3
 80016a6:	333c      	adds	r3, #60	; 0x3c
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	0013      	movs	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	189b      	adds	r3, r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	18cb      	adds	r3, r1, r3
 80016bc:	3340      	adds	r3, #64	; 0x40
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	3201      	adds	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	210f      	movs	r1, #15
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3ae      	bcc.n	8001638 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e056      	b.n	8001790 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e2:	240f      	movs	r4, #15
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	236a      	movs	r3, #106	; 0x6a
 80016ec:	33ff      	adds	r3, #255	; 0xff
 80016ee:	0019      	movs	r1, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	189b      	adds	r3, r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	18c3      	adds	r3, r0, r3
 80016fa:	185b      	adds	r3, r3, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	23b4      	movs	r3, #180	; 0xb4
 8001708:	0059      	lsls	r1, r3, #1
 800170a:	0013      	movs	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	189b      	adds	r3, r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	18c3      	adds	r3, r0, r3
 8001714:	185b      	adds	r3, r3, r1
 8001716:	193a      	adds	r2, r7, r4
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800171c:	193b      	adds	r3, r7, r4
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	236c      	movs	r3, #108	; 0x6c
 8001724:	33ff      	adds	r3, #255	; 0xff
 8001726:	0019      	movs	r1, r3
 8001728:	0013      	movs	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	189b      	adds	r3, r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	18c3      	adds	r3, r0, r3
 8001732:	185b      	adds	r3, r3, r1
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	23bc      	movs	r3, #188	; 0xbc
 8001740:	0059      	lsls	r1, r3, #1
 8001742:	0013      	movs	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	189b      	adds	r3, r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	18c3      	adds	r3, r0, r3
 800174c:	185b      	adds	r3, r3, r1
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	23be      	movs	r3, #190	; 0xbe
 800175a:	0059      	lsls	r1, r3, #1
 800175c:	0013      	movs	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	189b      	adds	r3, r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	18c3      	adds	r3, r0, r3
 8001766:	185b      	adds	r3, r3, r1
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	0059      	lsls	r1, r3, #1
 8001776:	0013      	movs	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	189b      	adds	r3, r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	18c3      	adds	r3, r0, r3
 8001780:	185b      	adds	r3, r3, r1
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001786:	193b      	adds	r3, r7, r4
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	193b      	adds	r3, r7, r4
 800178c:	3201      	adds	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	d3a1      	bcc.n	80016e2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	466a      	mov	r2, sp
 80017a6:	0011      	movs	r1, r2
 80017a8:	001a      	movs	r2, r3
 80017aa:	3210      	adds	r2, #16
 80017ac:	ca70      	ldmia	r2!, {r4, r5, r6}
 80017ae:	c170      	stmia	r1!, {r4, r5, r6}
 80017b0:	ca30      	ldmia	r2!, {r4, r5}
 80017b2:	c130      	stmia	r1!, {r4, r5}
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f001 fe0d 	bl	80033d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2224      	movs	r2, #36	; 0x24
 80017c2:	2100      	movs	r1, #0
 80017c4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_PCD_Init+0x1fc>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d103      	bne.n	80017de <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 f807 	bl	80017ec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b005      	add	sp, #20
 80017e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e8:	000002a9 	.word	0x000002a9

080017ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	23ba      	movs	r3, #186	; 0xba
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	2101      	movs	r1, #1
 8001802:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	23b8      	movs	r3, #184	; 0xb8
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	2100      	movs	r1, #0
 800180c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2254      	movs	r2, #84	; 0x54
 8001812:	5a9b      	ldrh	r3, [r3, r2]
 8001814:	b29b      	uxth	r3, r3
 8001816:	2201      	movs	r2, #1
 8001818:	4313      	orrs	r3, r2
 800181a:	b299      	uxth	r1, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2254      	movs	r2, #84	; 0x54
 8001820:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2254      	movs	r2, #84	; 0x54
 8001826:	5a9b      	ldrh	r3, [r3, r2]
 8001828:	b29b      	uxth	r3, r3
 800182a:	2202      	movs	r2, #2
 800182c:	4313      	orrs	r3, r2
 800182e:	b299      	uxth	r1, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2254      	movs	r2, #84	; 0x54
 8001834:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	f000 fbaf 	bl	8001fb2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001854:	4bcf      	ldr	r3, [pc, #828]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
 800185c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185e:	4bcd      	ldr	r3, [pc, #820]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	4013      	ands	r3, r2
 8001868:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d100      	bne.n	8001876 <HAL_RCC_OscConfig+0x36>
 8001874:	e07e      	b.n	8001974 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d007      	beq.n	800188c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d112      	bne.n	80018a8 <HAL_RCC_OscConfig+0x68>
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	025b      	lsls	r3, r3, #9
 8001888:	429a      	cmp	r2, r3
 800188a:	d10d      	bne.n	80018a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4bc1      	ldr	r3, [pc, #772]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	4013      	ands	r3, r2
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x5a>
 8001898:	e06b      	b.n	8001972 <HAL_RCC_OscConfig+0x132>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d167      	bne.n	8001972 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f000 fb85 	bl	8001fb2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_OscConfig+0x84>
 80018b4:	4bb7      	ldr	r3, [pc, #732]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4bb6      	ldr	r3, [pc, #728]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	0249      	lsls	r1, r1, #9
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e027      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	23a0      	movs	r3, #160	; 0xa0
 80018ca:	02db      	lsls	r3, r3, #11
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d10e      	bne.n	80018ee <HAL_RCC_OscConfig+0xae>
 80018d0:	4bb0      	ldr	r3, [pc, #704]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4baf      	ldr	r3, [pc, #700]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	02c9      	lsls	r1, r1, #11
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4bad      	ldr	r3, [pc, #692]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4bac      	ldr	r3, [pc, #688]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0249      	lsls	r1, r1, #9
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e012      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018ee:	4ba9      	ldr	r3, [pc, #676]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4ba8      	ldr	r3, [pc, #672]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018f4:	49a8      	ldr	r1, [pc, #672]	; (8001b98 <HAL_RCC_OscConfig+0x358>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	4ba6      	ldr	r3, [pc, #664]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	025b      	lsls	r3, r3, #9
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4ba2      	ldr	r3, [pc, #648]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4ba1      	ldr	r3, [pc, #644]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 800190e:	49a3      	ldr	r1, [pc, #652]	; (8001b9c <HAL_RCC_OscConfig+0x35c>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fae6 	bl	8000eec <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001924:	e009      	b.n	800193a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff fae1 	bl	8000eec <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	; 0x64
 8001932:	d902      	bls.n	800193a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	f000 fb3c 	bl	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193a:	4b96      	ldr	r3, [pc, #600]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d0ef      	beq.n	8001926 <HAL_RCC_OscConfig+0xe6>
 8001946:	e015      	b.n	8001974 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fad0 	bl	8000eec <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001952:	f7ff facb 	bl	8000eec <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e326      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001964:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x112>
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001972:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x140>
 800197e:	e08b      	b.n	8001a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d13e      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1d0>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d13b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001998:	4b7e      	ldr	r3, [pc, #504]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2204      	movs	r2, #4
 800199e:	4013      	ands	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_RCC_OscConfig+0x16c>
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e302      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b79      	ldr	r3, [pc, #484]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a7b      	ldr	r2, [pc, #492]	; (8001ba0 <HAL_RCC_OscConfig+0x360>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	021a      	lsls	r2, r3, #8
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019c2:	4b74      	ldr	r3, [pc, #464]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2209      	movs	r2, #9
 80019c8:	4393      	bics	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d4:	f000 fc40 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 80019d8:	0001      	movs	r1, r0
 80019da:	4b6e      	ldr	r3, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	220f      	movs	r2, #15
 80019e2:	4013      	ands	r3, r2
 80019e4:	4a6f      	ldr	r2, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x364>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	000a      	movs	r2, r1
 80019ea:	40da      	lsrs	r2, r3
 80019ec:	4b6e      	ldr	r3, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0x368>)
 80019ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80019f0:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x36c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2513      	movs	r5, #19
 80019f6:	197c      	adds	r4, r7, r5
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fa31 	bl	8000e60 <HAL_InitTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a02:	197b      	adds	r3, r7, r5
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d046      	beq.n	8001a98 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	e2d0      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d027      	beq.n	8001a66 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2209      	movs	r2, #9
 8001a1c:	4393      	bics	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa60 	bl	8000eec <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fa5b 	bl	8000eec <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e2b6      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d0f1      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a53      	ldr	r2, [pc, #332]	; (8001ba0 <HAL_RCC_OscConfig+0x360>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	021a      	lsls	r2, r3, #8
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	e018      	b.n	8001a98 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	438a      	bics	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa3b 	bl	8000eec <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fa36 	bl	8000eec <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e291      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	4013      	ands	r3, r2
 8001a96:	d1f1      	bne.n	8001a7c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d100      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x264>
 8001aa2:	e0a1      	b.n	8001be8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d140      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x282>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e277      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0x370>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	0a19      	lsrs	r1, r3, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	061a      	lsls	r2, r3, #24
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	0b5b      	lsrs	r3, r3, #13
 8001af0:	3301      	adds	r3, #1
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	0212      	lsls	r2, r2, #8
 8001af6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	210f      	movs	r1, #15
 8001b00:	400b      	ands	r3, r1
 8001b02:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <HAL_RCC_OscConfig+0x364>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_OscConfig+0x368>)
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x36c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2513      	movs	r5, #19
 8001b12:	197c      	adds	r4, r7, r5
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff f9a3 	bl	8000e60 <HAL_InitTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b1e:	197b      	adds	r3, r7, r5
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d060      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001b26:	197b      	adds	r3, r7, r5
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	e242      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d03f      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0049      	lsls	r1, r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff f9d3 	bl	8000eec <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f9ce 	bl	8000eec <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e229      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x370>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	0a19      	lsrs	r1, r3, #8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	061a      	lsls	r2, r3, #24
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <HAL_RCC_OscConfig+0x354>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e029      	b.n	8001be8 <HAL_RCC_OscConfig+0x3a8>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	fffeffff 	.word	0xfffeffff
 8001b9c:	fffbffff 	.word	0xfffbffff
 8001ba0:	ffffe0ff 	.word	0xffffe0ff
 8001ba4:	08003498 	.word	0x08003498
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bb4:	4bbd      	ldr	r3, [pc, #756]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4bbc      	ldr	r3, [pc, #752]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001bba:	49bd      	ldr	r1, [pc, #756]	; (8001eb0 <HAL_RCC_OscConfig+0x670>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f994 	bl	8000eec <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bca:	f7ff f98f 	bl	8000eec <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1ea      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bdc:	4bb3      	ldr	r3, [pc, #716]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2208      	movs	r2, #8
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d019      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4bac      	ldr	r3, [pc, #688]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bfe:	4bab      	ldr	r3, [pc, #684]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff f971 	bl	8000eec <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff f96c 	bl	8000eec <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1c7      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c22:	4ba2      	ldr	r3, [pc, #648]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f1      	beq.n	8001c10 <HAL_RCC_OscConfig+0x3d0>
 8001c2c:	e018      	b.n	8001c60 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b9f      	ldr	r3, [pc, #636]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c32:	4b9e      	ldr	r3, [pc, #632]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c34:	2101      	movs	r1, #1
 8001c36:	438a      	bics	r2, r1
 8001c38:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f957 	bl	8000eec <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff f952 	bl	8000eec <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1ad      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c56:	4b95      	ldr	r3, [pc, #596]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d1f1      	bne.n	8001c44 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	4013      	ands	r3, r2
 8001c68:	d100      	bne.n	8001c6c <HAL_RCC_OscConfig+0x42c>
 8001c6a:	e0ae      	b.n	8001dca <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6c:	2027      	movs	r0, #39	; 0x27
 8001c6e:	183b      	adds	r3, r7, r0
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c74:	4b8d      	ldr	r3, [pc, #564]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	055b      	lsls	r3, r3, #21
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c84:	4b89      	ldr	r3, [pc, #548]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0549      	lsls	r1, r1, #21
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b87      	ldr	r3, [pc, #540]	; (8001eb4 <HAL_RCC_OscConfig+0x674>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d11a      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca0:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_RCC_OscConfig+0x674>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCC_OscConfig+0x674>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0049      	lsls	r1, r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff f91d 	bl	8000eec <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7ff f918 	bl	8000eec <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e173      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b7a      	ldr	r3, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x674>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4b2>
 8001ce2:	4b72      	ldr	r3, [pc, #456]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce6:	4b71      	ldr	r3, [pc, #452]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0049      	lsls	r1, r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf0:	e031      	b.n	8001d56 <HAL_RCC_OscConfig+0x516>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x4d4>
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cfe:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d00:	496b      	ldr	r1, [pc, #428]	; (8001eb0 <HAL_RCC_OscConfig+0x670>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	651a      	str	r2, [r3, #80]	; 0x50
 8001d06:	4b69      	ldr	r3, [pc, #420]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0a:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d0c:	496a      	ldr	r1, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x678>)
 8001d0e:	400a      	ands	r2, r1
 8001d10:	651a      	str	r2, [r3, #80]	; 0x50
 8001d12:	e020      	b.n	8001d56 <HAL_RCC_OscConfig+0x516>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	23a0      	movs	r3, #160	; 0xa0
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10e      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4fe>
 8001d20:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	00c9      	lsls	r1, r1, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d32:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0049      	lsls	r1, r1, #1
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0x516>
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d42:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d44:	495a      	ldr	r1, [pc, #360]	; (8001eb0 <HAL_RCC_OscConfig+0x670>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	651a      	str	r2, [r3, #80]	; 0x50
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d4e:	4b57      	ldr	r3, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d50:	4959      	ldr	r1, [pc, #356]	; (8001eb8 <HAL_RCC_OscConfig+0x678>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8c5 	bl	8000eec <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f8c0 	bl	8000eec <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_OscConfig+0x67c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e11a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0ef      	beq.n	8001d68 <HAL_RCC_OscConfig+0x528>
 8001d88:	e014      	b.n	8001db4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f8af 	bl	8000eec <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d92:	e009      	b.n	8001da8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7ff f8aa 	bl	8000eec <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a47      	ldr	r2, [pc, #284]	; (8001ebc <HAL_RCC_OscConfig+0x67c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e104      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001daa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d1ef      	bne.n	8001d94 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db4:	2327      	movs	r3, #39	; 0x27
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001dc4:	493e      	ldr	r1, [pc, #248]	; (8001ec0 <HAL_RCC_OscConfig+0x680>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d049      	beq.n	8001e68 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d026      	beq.n	8001e2a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ddc:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34
 8001df4:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_RCC_OscConfig+0x684>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_RCC_OscConfig+0x684>)
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	0189      	lsls	r1, r1, #6
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff f873 	bl	8000eec <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e0c:	f7ff f86e 	bl	8000eec <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0c9      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d0f1      	beq.n	8001e0c <HAL_RCC_OscConfig+0x5cc>
 8001e28:	e01e      	b.n	8001e68 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCC_OscConfig+0x684>)
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_OscConfig+0x684>)
 8001e3c:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_OscConfig+0x688>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff f853 	bl	8000eec <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e4c:	f7ff f84e 	bl	8000eec <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0a9      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d1f1      	bne.n	8001e4c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d100      	bne.n	8001e72 <HAL_RCC_OscConfig+0x632>
 8001e70:	e09e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_OscConfig+0x63a>
 8001e78:	e077      	b.n	8001f6a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d158      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_OscConfig+0x66c>)
 8001e88:	4910      	ldr	r1, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x68c>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f82d 	bl	8000eec <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e96:	e01b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f828 	bl	8000eec <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d914      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e083      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	fffffeff 	.word	0xfffffeff
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	fffffbff 	.word	0xfffffbff
 8001ebc:	00001388 	.word	0x00001388
 8001ec0:	efffffff 	.word	0xefffffff
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	ffffdfff 	.word	0xffffdfff
 8001ecc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	049b      	lsls	r3, r3, #18
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1dd      	bne.n	8001e98 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a37      	ldr	r2, [pc, #220]	; (8001fc0 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0449      	lsls	r1, r1, #17
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ffef 	bl	8000eec <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe ffea 	bl	8000eec <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e045      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	049b      	lsls	r3, r3, #18
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x6d4>
 8001f32:	e03d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCC_OscConfig+0x784>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe ffd4 	bl	8000eec <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe ffcf 	bl	8000eec <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e02a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	049b      	lsls	r3, r3, #18
 8001f64:	4013      	ands	r3, r2
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x70a>
 8001f68:	e022      	b.n	8001fb0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_OscConfig+0x77c>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	025b      	lsls	r3, r3, #9
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10f      	bne.n	8001fac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	23f0      	movs	r3, #240	; 0xf0
 8001f90:	039b      	lsls	r3, r3, #14
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b00a      	add	sp, #40	; 0x28
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	ff02ffff 	.word	0xff02ffff
 8001fc4:	feffffff 	.word	0xfeffffff

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e128      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b96      	ldr	r3, [pc, #600]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d91e      	bls.n	8002028 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b93      	ldr	r3, [pc, #588]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	4b90      	ldr	r3, [pc, #576]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ff76 	bl	8000eec <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	e009      	b.n	800201a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7fe ff71 	bl	8000eec <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a8a      	ldr	r2, [pc, #552]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e109      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b87      	ldr	r3, [pc, #540]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d1ee      	bne.n	8002006 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002032:	4b83      	ldr	r3, [pc, #524]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	22f0      	movs	r2, #240	; 0xf0
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d100      	bne.n	8002052 <HAL_RCC_ClockConfig+0x8a>
 8002050:	e089      	b.n	8002166 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205a:	4b79      	ldr	r3, [pc, #484]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4013      	ands	r3, r2
 8002064:	d120      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0e1      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	049b      	lsls	r3, r3, #18
 800207a:	4013      	ands	r3, r2
 800207c:	d114      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0d5      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2204      	movs	r2, #4
 8002090:	4013      	ands	r3, r2
 8002092:	d109      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0ca      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002098:	4b69      	ldr	r3, [pc, #420]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0c2      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a8:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2203      	movs	r2, #3
 80020ae:	4393      	bics	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe ff16 	bl	8000eec <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d111      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020cc:	e009      	b.n	80020e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7fe ff0d 	bl	8000eec <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0a5      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e2:	4b57      	ldr	r3, [pc, #348]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	220c      	movs	r2, #12
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d1ef      	bne.n	80020ce <HAL_RCC_ClockConfig+0x106>
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d111      	bne.n	800211c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f8:	e009      	b.n	800210e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7fe fef7 	bl	8000eec <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a4d      	ldr	r2, [pc, #308]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e08f      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	220c      	movs	r2, #12
 8002114:	4013      	ands	r3, r2
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d1ef      	bne.n	80020fa <HAL_RCC_ClockConfig+0x132>
 800211a:	e024      	b.n	8002166 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d11b      	bne.n	800215c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002124:	e009      	b.n	800213a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002126:	f7fe fee1 	bl	8000eec <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4a42      	ldr	r2, [pc, #264]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e079      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	220c      	movs	r2, #12
 8002140:	4013      	ands	r3, r2
 8002142:	2b04      	cmp	r3, #4
 8002144:	d1ef      	bne.n	8002126 <HAL_RCC_ClockConfig+0x15e>
 8002146:	e00e      	b.n	8002166 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7fe fed0 	bl	8000eec <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a3a      	ldr	r2, [pc, #232]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e068      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800215c:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	4013      	ands	r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d21e      	bcs.n	80021b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4393      	bics	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002186:	f7fe feb1 	bl	8000eec <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	e009      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7fe feac 	bl	8000eec <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_RCC_ClockConfig+0x274>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e044      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_ClockConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1ee      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2204      	movs	r2, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a20      	ldr	r2, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x27c>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2208      	movs	r2, #8
 80021d6:	4013      	ands	r3, r2
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <HAL_RCC_ClockConfig+0x280>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	00da      	lsls	r2, r3, #3
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f0:	f000 f832 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 80021f4:	0001      	movs	r1, r0
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_ClockConfig+0x278>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	091b      	lsrs	r3, r3, #4
 80021fc:	220f      	movs	r2, #15
 80021fe:	4013      	ands	r3, r2
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x284>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	000a      	movs	r2, r1
 8002206:	40da      	lsrs	r2, r3
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_ClockConfig+0x288>)
 800220a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_ClockConfig+0x28c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	250b      	movs	r5, #11
 8002212:	197c      	adds	r4, r7, r5
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe fe23 	bl	8000e60 <HAL_InitTick>
 800221a:	0003      	movs	r3, r0
 800221c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800221e:	197b      	adds	r3, r7, r5
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002226:	197b      	adds	r3, r7, r5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	e000      	b.n	800222e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40022000 	.word	0x40022000
 800223c:	00001388 	.word	0x00001388
 8002240:	40021000 	.word	0x40021000
 8002244:	fffff8ff 	.word	0xfffff8ff
 8002248:	ffffc7ff 	.word	0xffffc7ff
 800224c:	08003498 	.word	0x08003498
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b08e      	sub	sp, #56	; 0x38
 800225c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_GetSysClockFreq+0x138>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002266:	230c      	movs	r3, #12
 8002268:	4013      	ands	r3, r2
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d014      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x40>
 800226e:	d900      	bls.n	8002272 <HAL_RCC_GetSysClockFreq+0x1a>
 8002270:	e07b      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x112>
 8002272:	2b04      	cmp	r3, #4
 8002274:	d002      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x24>
 8002276:	2b08      	cmp	r3, #8
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x3a>
 800227a:	e076      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800227c:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_RCC_GetSysClockFreq+0x138>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2210      	movs	r2, #16
 8002282:	4013      	ands	r3, r2
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800228a:	e07c      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800228c:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_RCC_GetSysClockFreq+0x140>)
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002290:	e079      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002292:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCC_GetSysClockFreq+0x144>)
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002296:	e076      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	0c9a      	lsrs	r2, r3, #18
 800229c:	230f      	movs	r3, #15
 800229e:	401a      	ands	r2, r3
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x148>)
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	0d9a      	lsrs	r2, r3, #22
 80022aa:	2303      	movs	r3, #3
 80022ac:	4013      	ands	r3, r2
 80022ae:	3301      	adds	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_RCC_GetSysClockFreq+0x138>)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	025b      	lsls	r3, r3, #9
 80022ba:	4013      	ands	r3, r2
 80022bc:	d01a      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	4a35      	ldr	r2, [pc, #212]	; (800239c <HAL_RCC_GetSysClockFreq+0x144>)
 80022c8:	2300      	movs	r3, #0
 80022ca:	69b8      	ldr	r0, [r7, #24]
 80022cc:	69f9      	ldr	r1, [r7, #28]
 80022ce:	f7fd ffc7 	bl	8000260 <__aeabi_lmul>
 80022d2:	0002      	movs	r2, r0
 80022d4:	000b      	movs	r3, r1
 80022d6:	0010      	movs	r0, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f7fd ff9b 	bl	8000220 <__aeabi_uldivmod>
 80022ea:	0002      	movs	r2, r0
 80022ec:	000b      	movs	r3, r1
 80022ee:	0013      	movs	r3, r2
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
 80022f2:	e037      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_GetSysClockFreq+0x138>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2210      	movs	r2, #16
 80022fa:	4013      	ands	r3, r2
 80022fc:	d01a      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002308:	2300      	movs	r3, #0
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	f7fd ffa7 	bl	8000260 <__aeabi_lmul>
 8002312:	0002      	movs	r2, r0
 8002314:	000b      	movs	r3, r1
 8002316:	0010      	movs	r0, r2
 8002318:	0019      	movs	r1, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f7fd ff7b 	bl	8000220 <__aeabi_uldivmod>
 800232a:	0002      	movs	r2, r0
 800232c:	000b      	movs	r3, r1
 800232e:	0013      	movs	r3, r2
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
 8002332:	e017      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	0018      	movs	r0, r3
 8002338:	2300      	movs	r3, #0
 800233a:	0019      	movs	r1, r3
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_RCC_GetSysClockFreq+0x140>)
 800233e:	2300      	movs	r3, #0
 8002340:	f7fd ff8e 	bl	8000260 <__aeabi_lmul>
 8002344:	0002      	movs	r2, r0
 8002346:	000b      	movs	r3, r1
 8002348:	0010      	movs	r0, r2
 800234a:	0019      	movs	r1, r3
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	001c      	movs	r4, r3
 8002350:	2300      	movs	r3, #0
 8002352:	001d      	movs	r5, r3
 8002354:	0022      	movs	r2, r4
 8002356:	002b      	movs	r3, r5
 8002358:	f7fd ff62 	bl	8000220 <__aeabi_uldivmod>
 800235c:	0002      	movs	r2, r0
 800235e:	000b      	movs	r3, r1
 8002360:	0013      	movs	r3, r2
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002368:	e00d      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_GetSysClockFreq+0x138>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0b5b      	lsrs	r3, r3, #13
 8002370:	2207      	movs	r2, #7
 8002372:	4013      	ands	r3, r2
 8002374:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	3301      	adds	r3, #1
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0212      	lsls	r2, r2, #8
 800237e:	409a      	lsls	r2, r3
 8002380:	0013      	movs	r3, r2
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002384:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b00e      	add	sp, #56	; 0x38
 800238e:	bdb0      	pop	{r4, r5, r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	003d0900 	.word	0x003d0900
 8002398:	00f42400 	.word	0x00f42400
 800239c:	007a1200 	.word	0x007a1200
 80023a0:	080034b0 	.word	0x080034b0

080023a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	20000000 	.word	0x20000000

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023bc:	f7ff fff2 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c0:	0001      	movs	r1, r0
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	2207      	movs	r2, #7
 80023ca:	4013      	ands	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	40d9      	lsrs	r1, r3
 80023d2:	000b      	movs	r3, r1
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080034a8 	.word	0x080034a8

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e8:	f7ff ffdc 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023ec:	0001      	movs	r1, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	0adb      	lsrs	r3, r3, #11
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	40d9      	lsrs	r1, r3
 80023fe:	000b      	movs	r3, r1
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000
 800240c:	080034a8 	.word	0x080034a8

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002418:	2317      	movs	r3, #23
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2220      	movs	r2, #32
 8002426:	4013      	ands	r3, r2
 8002428:	d106      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4013      	ands	r3, r2
 8002434:	d100      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002436:	e104      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002438:	4bb1      	ldr	r3, [pc, #708]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800243a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	055b      	lsls	r3, r3, #21
 8002440:	4013      	ands	r3, r2
 8002442:	d10a      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4bae      	ldr	r3, [pc, #696]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002448:	4bad      	ldr	r3, [pc, #692]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	0549      	lsls	r1, r1, #21
 800244e:	430a      	orrs	r2, r1
 8002450:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4baa      	ldr	r3, [pc, #680]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d11a      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4ba7      	ldr	r3, [pc, #668]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4ba6      	ldr	r3, [pc, #664]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0049      	lsls	r1, r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002474:	f7fe fd3a 	bl	8000eec <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e008      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247e:	f7fe fd35 	bl	8000eec <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e133      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b9c      	ldr	r3, [pc, #624]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4013      	ands	r3, r2
 800249a:	d0f0      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800249c:	4b98      	ldr	r3, [pc, #608]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	23c0      	movs	r3, #192	; 0xc0
 80024a2:	039b      	lsls	r3, r3, #14
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	23c0      	movs	r3, #192	; 0xc0
 80024ae:	039b      	lsls	r3, r3, #14
 80024b0:	4013      	ands	r3, r2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	23c0      	movs	r3, #192	; 0xc0
 80024be:	039b      	lsls	r3, r3, #14
 80024c0:	4013      	ands	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d013      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	23c0      	movs	r3, #192	; 0xc0
 80024ce:	029b      	lsls	r3, r3, #10
 80024d0:	401a      	ands	r2, r3
 80024d2:	23c0      	movs	r3, #192	; 0xc0
 80024d4:	029b      	lsls	r3, r3, #10
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10a      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	401a      	ands	r2, r3
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d101      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e103      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024f0:	4b83      	ldr	r3, [pc, #524]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f4:	23c0      	movs	r3, #192	; 0xc0
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d049      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d004      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2220      	movs	r2, #32
 8002518:	4013      	ands	r3, r2
 800251a:	d10d      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	4013      	ands	r3, r2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d034      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4013      	ands	r3, r2
 8002536:	d02e      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002538:	4b71      	ldr	r3, [pc, #452]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002542:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	0309      	lsls	r1, r1, #12
 800254c:	430a      	orrs	r2, r1
 800254e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002554:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002556:	496d      	ldr	r1, [pc, #436]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002558:	400a      	ands	r2, r1
 800255a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d014      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fcbe 	bl	8000eec <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002574:	e009      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fcb9 	bl	8000eec <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a63      	ldr	r2, [pc, #396]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0b6      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800258a:	4b5d      	ldr	r3, [pc, #372]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800258c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d0ef      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	23c0      	movs	r3, #192	; 0xc0
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	401a      	ands	r2, r3
 80025ac:	23c0      	movs	r3, #192	; 0xc0
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025b4:	4b52      	ldr	r3, [pc, #328]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	039b      	lsls	r3, r3, #14
 80025c6:	401a      	ands	r2, r3
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	23c0      	movs	r3, #192	; 0xc0
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	401a      	ands	r2, r3
 80025dc:	4b48      	ldr	r3, [pc, #288]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2220      	movs	r2, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d01f      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	23c0      	movs	r3, #192	; 0xc0
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	401a      	ands	r2, r3
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d10c      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80025fe:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	23c0      	movs	r3, #192	; 0xc0
 800260e:	039b      	lsls	r3, r3, #14
 8002610:	401a      	ands	r2, r3
 8002612:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	401a      	ands	r2, r3
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002628:	430a      	orrs	r2, r1
 800262a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800262c:	2317      	movs	r3, #23
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263a:	4b31      	ldr	r3, [pc, #196]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800263c:	4936      	ldr	r1, [pc, #216]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800263e:	400a      	ands	r2, r1
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	2203      	movs	r2, #3
 8002652:	4393      	bics	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800265c:	430a      	orrs	r2, r1
 800265e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	220c      	movs	r2, #12
 8002670:	4393      	bics	r3, r2
 8002672:	0019      	movs	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800267a:	430a      	orrs	r2, r1
 800267c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2204      	movs	r2, #4
 8002684:	4013      	ands	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4a23      	ldr	r2, [pc, #140]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002698:	430a      	orrs	r2, r1
 800269a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	4013      	ands	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026b6:	430a      	orrs	r2, r1
 80026b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	4013      	ands	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1a      	ldr	r2, [r3, #32]
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d4:	430a      	orrs	r2, r1
 80026d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	4013      	ands	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	fffcffff 	.word	0xfffcffff
 800270c:	fff7ffff 	.word	0xfff7ffff
 8002710:	00001388 	.word	0x00001388
 8002714:	ffcfffff 	.word	0xffcfffff
 8002718:	efffffff 	.word	0xefffffff
 800271c:	fffff3ff 	.word	0xfffff3ff
 8002720:	ffffcfff 	.word	0xffffcfff
 8002724:	fbffffff 	.word	0xfbffffff
 8002728:	fff3ffff 	.word	0xfff3ffff

0800272c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e083      	b.n	8002846 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	2382      	movs	r3, #130	; 0x82
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	429a      	cmp	r2, r3
 8002750:	d009      	beq.n	8002766 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	61da      	str	r2, [r3, #28]
 8002758:	e005      	b.n	8002766 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2251      	movs	r2, #81	; 0x51
 8002770:	5c9b      	ldrb	r3, [r3, r2]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2250      	movs	r2, #80	; 0x50
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0018      	movs	r0, r3
 8002784:	f7fe f978 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2251      	movs	r2, #81	; 0x51
 800278c:	2102      	movs	r1, #2
 800278e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	438a      	bics	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	2382      	movs	r3, #130	; 0x82
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	401a      	ands	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	2384      	movs	r3, #132	; 0x84
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	400b      	ands	r3, r1
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68d9      	ldr	r1, [r3, #12]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	400b      	ands	r3, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2102      	movs	r1, #2
 80027c8:	400b      	ands	r3, r1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	2101      	movs	r1, #1
 80027d2:	400b      	ands	r3, r1
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6999      	ldr	r1, [r3, #24]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	400b      	ands	r3, r1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	2138      	movs	r1, #56	; 0x38
 80027e8:	400b      	ands	r3, r1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	0011      	movs	r1, r2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	019b      	lsls	r3, r3, #6
 8002800:	401a      	ands	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	2204      	movs	r2, #4
 8002812:	4013      	ands	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2210      	movs	r2, #16
 800281c:	401a      	ands	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4907      	ldr	r1, [pc, #28]	; (8002850 <HAL_SPI_Init+0x124>)
 8002832:	400a      	ands	r2, r1
 8002834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2251      	movs	r2, #81	; 0x51
 8002840:	2101      	movs	r1, #1
 8002842:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	fffff7ff 	.word	0xfffff7ff

08002854 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e074      	b.n	8002950 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223c      	movs	r2, #60	; 0x3c
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223d      	movs	r2, #61	; 0x3d
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7fe f995 	bl	8000bac <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223c      	movs	r2, #60	; 0x3c
 8002886:	2102      	movs	r1, #2
 8002888:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80028a0:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80028a8:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80028ae:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 80028b4:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 80028ba:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 80028c0:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 80028c6:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7b1b      	ldrb	r3, [r3, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d108      	bne.n	80028ea <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0249      	lsls	r1, r1, #9
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	43d2      	mvns	r2, r2
 8002900:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800291a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	0010      	movs	r0, r2
 8002926:	f000 f817 	bl	8002958 <TSC_extract_groups>
 800292a:	0003      	movs	r3, r0
 800292c:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2103      	movs	r1, #3
 800293a:	438a      	bics	r2, r1
 800293c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2203      	movs	r2, #3
 8002944:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	223c      	movs	r2, #60	; 0x3c
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b003      	add	sp, #12
 8002956:	bd90      	pop	{r4, r7, pc}

08002958 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	e011      	b.n	800298e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	409a      	lsls	r2, r3
 8002972:	0013      	movs	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4013      	ands	r3, r2
 8002978:	d006      	beq.n	8002988 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800297a:	2201      	movs	r2, #1
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	409a      	lsls	r2, r3
 8002980:	0013      	movs	r3, r2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b07      	cmp	r3, #7
 8002992:	d9ea      	bls.n	800296a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002994:	68fb      	ldr	r3, [r7, #12]
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e044      	b.n	8002a3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2278      	movs	r2, #120	; 0x78
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7fe f989 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	; 0x24
 80029ce:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 f830 	bl	8002a48 <UART_SetConfig>
 80029e8:	0003      	movs	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e024      	b.n	8002a3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 faa7 	bl	8002f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	490d      	ldr	r1, [pc, #52]	; (8002a44 <HAL_UART_Init+0xa4>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	212a      	movs	r1, #42	; 0x2a
 8002a1e:	438a      	bics	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 fb3f 	bl	80030b8 <UART_CheckIdleState>
 8002a3a:	0003      	movs	r3, r0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	ffffb7ff 	.word	0xffffb7ff

08002a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b08e      	sub	sp, #56	; 0x38
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a50:	231a      	movs	r3, #26
 8002a52:	2218      	movs	r2, #24
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	19db      	adds	r3, r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4ac6      	ldr	r2, [pc, #792]	; (8002d94 <UART_SetConfig+0x34c>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4ac1      	ldr	r2, [pc, #772]	; (8002d98 <UART_SetConfig+0x350>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4abb      	ldr	r2, [pc, #748]	; (8002d9c <UART_SetConfig+0x354>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4ab7      	ldr	r2, [pc, #732]	; (8002da0 <UART_SetConfig+0x358>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4ab3      	ldr	r2, [pc, #716]	; (8002da4 <UART_SetConfig+0x35c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d131      	bne.n	8002b40 <UART_SetConfig+0xf8>
 8002adc:	4bb2      	ldr	r3, [pc, #712]	; (8002da8 <UART_SetConfig+0x360>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d01d      	beq.n	8002b24 <UART_SetConfig+0xdc>
 8002ae8:	d823      	bhi.n	8002b32 <UART_SetConfig+0xea>
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d00c      	beq.n	8002b08 <UART_SetConfig+0xc0>
 8002aee:	d820      	bhi.n	8002b32 <UART_SetConfig+0xea>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <UART_SetConfig+0xb2>
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d00e      	beq.n	8002b16 <UART_SetConfig+0xce>
 8002af8:	e01b      	b.n	8002b32 <UART_SetConfig+0xea>
 8002afa:	231b      	movs	r3, #27
 8002afc:	2218      	movs	r2, #24
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	19db      	adds	r3, r3, r7
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e09c      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b08:	231b      	movs	r3, #27
 8002b0a:	2218      	movs	r2, #24
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e095      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2218      	movs	r2, #24
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	19db      	adds	r3, r3, r7
 8002b1e:	2204      	movs	r2, #4
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e08e      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b24:	231b      	movs	r3, #27
 8002b26:	2218      	movs	r2, #24
 8002b28:	189b      	adds	r3, r3, r2
 8002b2a:	19db      	adds	r3, r3, r7
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e087      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b32:	231b      	movs	r3, #27
 8002b34:	2218      	movs	r2, #24
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e080      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a99      	ldr	r2, [pc, #612]	; (8002dac <UART_SetConfig+0x364>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d131      	bne.n	8002bae <UART_SetConfig+0x166>
 8002b4a:	4b97      	ldr	r3, [pc, #604]	; (8002da8 <UART_SetConfig+0x360>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	220c      	movs	r2, #12
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d01d      	beq.n	8002b92 <UART_SetConfig+0x14a>
 8002b56:	d823      	bhi.n	8002ba0 <UART_SetConfig+0x158>
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d00c      	beq.n	8002b76 <UART_SetConfig+0x12e>
 8002b5c:	d820      	bhi.n	8002ba0 <UART_SetConfig+0x158>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <UART_SetConfig+0x120>
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00e      	beq.n	8002b84 <UART_SetConfig+0x13c>
 8002b66:	e01b      	b.n	8002ba0 <UART_SetConfig+0x158>
 8002b68:	231b      	movs	r3, #27
 8002b6a:	2218      	movs	r2, #24
 8002b6c:	189b      	adds	r3, r3, r2
 8002b6e:	19db      	adds	r3, r3, r7
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e065      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b76:	231b      	movs	r3, #27
 8002b78:	2218      	movs	r2, #24
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	19db      	adds	r3, r3, r7
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e05e      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b84:	231b      	movs	r3, #27
 8002b86:	2218      	movs	r2, #24
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	19db      	adds	r3, r3, r7
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e057      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002b92:	231b      	movs	r3, #27
 8002b94:	2218      	movs	r2, #24
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	19db      	adds	r3, r3, r7
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e050      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002ba0:	231b      	movs	r3, #27
 8002ba2:	2218      	movs	r2, #24
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	19db      	adds	r3, r3, r7
 8002ba8:	2210      	movs	r2, #16
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e049      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <UART_SetConfig+0x354>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d13e      	bne.n	8002c36 <UART_SetConfig+0x1ee>
 8002bb8:	4b7b      	ldr	r3, [pc, #492]	; (8002da8 <UART_SetConfig+0x360>)
 8002bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bbc:	23c0      	movs	r3, #192	; 0xc0
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	22c0      	movs	r2, #192	; 0xc0
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d027      	beq.n	8002c1a <UART_SetConfig+0x1d2>
 8002bca:	22c0      	movs	r2, #192	; 0xc0
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d82a      	bhi.n	8002c28 <UART_SetConfig+0x1e0>
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d011      	beq.n	8002bfe <UART_SetConfig+0x1b6>
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d822      	bhi.n	8002c28 <UART_SetConfig+0x1e0>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <UART_SetConfig+0x1a8>
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <UART_SetConfig+0x1c4>
 8002bee:	e01b      	b.n	8002c28 <UART_SetConfig+0x1e0>
 8002bf0:	231b      	movs	r3, #27
 8002bf2:	2218      	movs	r2, #24
 8002bf4:	189b      	adds	r3, r3, r2
 8002bf6:	19db      	adds	r3, r3, r7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e021      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002bfe:	231b      	movs	r3, #27
 8002c00:	2218      	movs	r2, #24
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	19db      	adds	r3, r3, r7
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e01a      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	2218      	movs	r2, #24
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	2204      	movs	r2, #4
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e013      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002c1a:	231b      	movs	r3, #27
 8002c1c:	2218      	movs	r2, #24
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	19db      	adds	r3, r3, r7
 8002c22:	2208      	movs	r2, #8
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e00c      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002c28:	231b      	movs	r3, #27
 8002c2a:	2218      	movs	r2, #24
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	19db      	adds	r3, r3, r7
 8002c30:	2210      	movs	r2, #16
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e005      	b.n	8002c42 <UART_SetConfig+0x1fa>
 8002c36:	231b      	movs	r3, #27
 8002c38:	2218      	movs	r2, #24
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	2210      	movs	r2, #16
 8002c40:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a55      	ldr	r2, [pc, #340]	; (8002d9c <UART_SetConfig+0x354>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d000      	beq.n	8002c4e <UART_SetConfig+0x206>
 8002c4c:	e084      	b.n	8002d58 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c4e:	231b      	movs	r3, #27
 8002c50:	2218      	movs	r2, #24
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	19db      	adds	r3, r3, r7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d01d      	beq.n	8002c98 <UART_SetConfig+0x250>
 8002c5c:	dc20      	bgt.n	8002ca0 <UART_SetConfig+0x258>
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d015      	beq.n	8002c8e <UART_SetConfig+0x246>
 8002c62:	dc1d      	bgt.n	8002ca0 <UART_SetConfig+0x258>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <UART_SetConfig+0x226>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d005      	beq.n	8002c78 <UART_SetConfig+0x230>
 8002c6c:	e018      	b.n	8002ca0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f7ff fba3 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8002c72:	0003      	movs	r3, r0
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c76:	e01c      	b.n	8002cb2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c78:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <UART_SetConfig+0x360>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d002      	beq.n	8002c88 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c82:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <UART_SetConfig+0x368>)
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c86:	e014      	b.n	8002cb2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002c88:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <UART_SetConfig+0x36c>)
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8c:	e011      	b.n	8002cb2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8e:	f7ff fae3 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002c92:	0003      	movs	r3, r0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c96:	e00c      	b.n	8002cb2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c9e:	e008      	b.n	8002cb2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ca4:	231a      	movs	r3, #26
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	189b      	adds	r3, r3, r2
 8002caa:	19db      	adds	r3, r3, r7
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
        break;
 8002cb0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d100      	bne.n	8002cba <UART_SetConfig+0x272>
 8002cb8:	e132      	b.n	8002f20 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	0013      	movs	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d305      	bcc.n	8002cd6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d906      	bls.n	8002ce4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002cd6:	231a      	movs	r3, #26
 8002cd8:	2218      	movs	r2, #24
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e11d      	b.n	8002f20 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	6939      	ldr	r1, [r7, #16]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	000b      	movs	r3, r1
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	0205      	lsls	r5, r0, #8
 8002cf8:	431d      	orrs	r5, r3
 8002cfa:	000b      	movs	r3, r1
 8002cfc:	021c      	lsls	r4, r3, #8
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68b8      	ldr	r0, [r7, #8]
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	1900      	adds	r0, r0, r4
 8002d10:	4169      	adcs	r1, r5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f7fd fa7e 	bl	8000220 <__aeabi_uldivmod>
 8002d24:	0002      	movs	r2, r0
 8002d26:	000b      	movs	r3, r1
 8002d28:	0013      	movs	r3, r2
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d309      	bcc.n	8002d4a <UART_SetConfig+0x302>
 8002d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	035b      	lsls	r3, r3, #13
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d204      	bcs.n	8002d4a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e0ea      	b.n	8002f20 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002d4a:	231a      	movs	r3, #26
 8002d4c:	2218      	movs	r2, #24
 8002d4e:	189b      	adds	r3, r3, r2
 8002d50:	19db      	adds	r3, r3, r7
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e0e3      	b.n	8002f20 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d000      	beq.n	8002d66 <UART_SetConfig+0x31e>
 8002d64:	e085      	b.n	8002e72 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002d66:	231b      	movs	r3, #27
 8002d68:	2218      	movs	r2, #24
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	19db      	adds	r3, r3, r7
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d837      	bhi.n	8002de4 <UART_SetConfig+0x39c>
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <UART_SetConfig+0x370>)
 8002d78:	18d3      	adds	r3, r2, r3
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7e:	f7ff fb1b 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8002d82:	0003      	movs	r3, r0
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d86:	e036      	b.n	8002df6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d88:	f7ff fb2c 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d90:	e031      	b.n	8002df6 <UART_SetConfig+0x3ae>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	efff69f3 	.word	0xefff69f3
 8002d98:	ffffcfff 	.word	0xffffcfff
 8002d9c:	40004800 	.word	0x40004800
 8002da0:	fffff4ff 	.word	0xfffff4ff
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40004400 	.word	0x40004400
 8002db0:	003d0900 	.word	0x003d0900
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	080034bc 	.word	0x080034bc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dbc:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <UART_SetConfig+0x4f8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d002      	beq.n	8002dcc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	; (8002f44 <UART_SetConfig+0x4fc>)
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002dca:	e014      	b.n	8002df6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <UART_SetConfig+0x500>)
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dd0:	e011      	b.n	8002df6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7ff fa41 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dda:	e00c      	b.n	8002df6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002de2:	e008      	b.n	8002df6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002de8:	231a      	movs	r3, #26
 8002dea:	2218      	movs	r2, #24
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	19db      	adds	r3, r3, r7
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
        break;
 8002df4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d100      	bne.n	8002dfe <UART_SetConfig+0x3b6>
 8002dfc:	e090      	b.n	8002f20 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	005a      	lsls	r2, r3, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	18d2      	adds	r2, r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0019      	movs	r1, r3
 8002e10:	0010      	movs	r0, r2
 8002e12:	f7fd f979 	bl	8000108 <__udivsi3>
 8002e16:	0003      	movs	r3, r0
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d921      	bls.n	8002e64 <UART_SetConfig+0x41c>
 8002e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	025b      	lsls	r3, r3, #9
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d21c      	bcs.n	8002e64 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	200e      	movs	r0, #14
 8002e30:	2418      	movs	r4, #24
 8002e32:	1903      	adds	r3, r0, r4
 8002e34:	19db      	adds	r3, r3, r7
 8002e36:	210f      	movs	r1, #15
 8002e38:	438a      	bics	r2, r1
 8002e3a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2207      	movs	r2, #7
 8002e44:	4013      	ands	r3, r2
 8002e46:	b299      	uxth	r1, r3
 8002e48:	1903      	adds	r3, r0, r4
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	1902      	adds	r2, r0, r4
 8002e4e:	19d2      	adds	r2, r2, r7
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	1902      	adds	r2, r0, r4
 8002e5c:	19d2      	adds	r2, r2, r7
 8002e5e:	8812      	ldrh	r2, [r2, #0]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	e05d      	b.n	8002f20 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e64:	231a      	movs	r3, #26
 8002e66:	2218      	movs	r2, #24
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	19db      	adds	r3, r3, r7
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e056      	b.n	8002f20 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e72:	231b      	movs	r3, #27
 8002e74:	2218      	movs	r2, #24
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	19db      	adds	r3, r3, r7
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d822      	bhi.n	8002ec6 <UART_SetConfig+0x47e>
 8002e80:	009a      	lsls	r2, r3, #2
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <UART_SetConfig+0x504>)
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8a:	f7ff fa95 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e92:	e021      	b.n	8002ed8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7ff faa6 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e9c:	e01c      	b.n	8002ed8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e9e:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <UART_SetConfig+0x4f8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d002      	beq.n	8002eae <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <UART_SetConfig+0x4fc>)
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002eac:	e014      	b.n	8002ed8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <UART_SetConfig+0x500>)
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eb2:	e011      	b.n	8002ed8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb4:	f7ff f9d0 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ebc:	e00c      	b.n	8002ed8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ec4:	e008      	b.n	8002ed8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002eca:	231a      	movs	r3, #26
 8002ecc:	2218      	movs	r2, #24
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
        break;
 8002ed6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d020      	beq.n	8002f20 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	085a      	lsrs	r2, r3, #1
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	18d2      	adds	r2, r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0019      	movs	r1, r3
 8002eee:	0010      	movs	r0, r2
 8002ef0:	f7fd f90a 	bl	8000108 <__udivsi3>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	d90a      	bls.n	8002f14 <UART_SetConfig+0x4cc>
 8002efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d205      	bcs.n	8002f14 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	e005      	b.n	8002f20 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f14:	231a      	movs	r3, #26
 8002f16:	2218      	movs	r2, #24
 8002f18:	189b      	adds	r3, r3, r2
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2200      	movs	r2, #0
 8002f24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f2c:	231a      	movs	r3, #26
 8002f2e:	2218      	movs	r2, #24
 8002f30:	189b      	adds	r3, r3, r2
 8002f32:	19db      	adds	r3, r3, r7
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b00e      	add	sp, #56	; 0x38
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	40021000 	.word	0x40021000
 8002f44:	003d0900 	.word	0x003d0900
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	080034e0 	.word	0x080034e0

08002f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <UART_AdvFeatureConfig+0x144>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a43      	ldr	r2, [pc, #268]	; (8003098 <UART_AdvFeatureConfig+0x148>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a3b      	ldr	r2, [pc, #236]	; (800309c <UART_AdvFeatureConfig+0x14c>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <UART_AdvFeatureConfig+0x150>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <UART_AdvFeatureConfig+0x154>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2220      	movs	r2, #32
 8003008:	4013      	ands	r3, r2
 800300a:	d00b      	beq.n	8003024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <UART_AdvFeatureConfig+0x158>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	4013      	ands	r3, r2
 800302c:	d01d      	beq.n	800306a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <UART_AdvFeatureConfig+0x15c>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	035b      	lsls	r3, r3, #13
 800304e:	429a      	cmp	r2, r3
 8003050:	d10b      	bne.n	800306a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <UART_AdvFeatureConfig+0x160>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	4013      	ands	r3, r2
 8003072:	d00b      	beq.n	800308c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <UART_AdvFeatureConfig+0x164>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fffdffff 	.word	0xfffdffff
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	fffbffff 	.word	0xfffbffff
 80030a0:	ffff7fff 	.word	0xffff7fff
 80030a4:	ffffefff 	.word	0xffffefff
 80030a8:	ffffdfff 	.word	0xffffdfff
 80030ac:	ffefffff 	.word	0xffefffff
 80030b0:	ff9fffff 	.word	0xff9fffff
 80030b4:	fff7ffff 	.word	0xfff7ffff

080030b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b092      	sub	sp, #72	; 0x48
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2284      	movs	r2, #132	; 0x84
 80030c4:	2100      	movs	r1, #0
 80030c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030c8:	f7fd ff10 	bl	8000eec <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2208      	movs	r2, #8
 80030d8:	4013      	ands	r3, r2
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d12c      	bne.n	8003138 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	0391      	lsls	r1, r2, #14
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4a46      	ldr	r2, [pc, #280]	; (8003200 <UART_CheckIdleState+0x148>)
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f000 f88c 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d021      	beq.n	8003138 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f4:	f3ef 8310 	mrs	r3, PRIMASK
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80030fe:	2301      	movs	r3, #1
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	438a      	bics	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2278      	movs	r2, #120	; 0x78
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e05f      	b.n	80031f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2204      	movs	r2, #4
 8003140:	4013      	ands	r3, r2
 8003142:	2b04      	cmp	r3, #4
 8003144:	d146      	bne.n	80031d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	03d1      	lsls	r1, r2, #15
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <UART_CheckIdleState+0x148>)
 8003150:	9200      	str	r2, [sp, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	f000 f858 	bl	8003208 <UART_WaitOnFlagUntilTimeout>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d03b      	beq.n	80031d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315c:	f3ef 8310 	mrs	r3, PRIMASK
 8003160:	60fb      	str	r3, [r7, #12]
  return(result);
 8003162:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
 8003166:	2301      	movs	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f383 8810 	msr	PRIMASK, r3
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4921      	ldr	r1, [pc, #132]	; (8003204 <UART_CheckIdleState+0x14c>)
 800317e:	400a      	ands	r2, r1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318e:	f3ef 8310 	mrs	r3, PRIMASK
 8003192:	61bb      	str	r3, [r7, #24]
  return(result);
 8003194:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
 8003198:	2301      	movs	r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f383 8810 	msr	PRIMASK, r3
}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	438a      	bics	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	2120      	movs	r1, #32
 80031c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2278      	movs	r2, #120	; 0x78
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e011      	b.n	80031f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	2120      	movs	r1, #32
 80031e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2278      	movs	r2, #120	; 0x78
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b010      	add	sp, #64	; 0x40
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	01ffffff 	.word	0x01ffffff
 8003204:	fffffedf 	.word	0xfffffedf

08003208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	e04b      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3301      	adds	r3, #1
 800321e:	d048      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fd fe64 	bl	8000eec <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04b      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2204      	movs	r2, #4
 8003242:	4013      	ands	r3, r2
 8003244:	d035      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	2208      	movs	r2, #8
 800324e:	4013      	ands	r3, r2
 8003250:	2b08      	cmp	r3, #8
 8003252:	d111      	bne.n	8003278 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2208      	movs	r2, #8
 800325a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f83c 	bl	80032dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2284      	movs	r2, #132	; 0x84
 8003268:	2108      	movs	r1, #8
 800326a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2278      	movs	r2, #120	; 0x78
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e02c      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	401a      	ands	r2, r3
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	429a      	cmp	r2, r3
 800328a:	d112      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 f81f 	bl	80032dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2284      	movs	r2, #132	; 0x84
 80032a2:	2120      	movs	r1, #32
 80032a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2278      	movs	r2, #120	; 0x78
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e00f      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	425a      	negs	r2, r3
 80032c2:	4153      	adcs	r3, r2
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	001a      	movs	r2, r3
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d0a4      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e4:	f3ef 8310 	mrs	r3, PRIMASK
 80032e8:	617b      	str	r3, [r7, #20]
  return(result);
 80032ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
 80032ee:	2301      	movs	r3, #1
 80032f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4926      	ldr	r1, [pc, #152]	; (80033a0 <UART_EndRxTransfer+0xc4>)
 8003306:	400a      	ands	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003316:	f3ef 8310 	mrs	r3, PRIMASK
 800331a:	623b      	str	r3, [r7, #32]
  return(result);
 800331c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	633b      	str	r3, [r7, #48]	; 0x30
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	438a      	bics	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334c:	2b01      	cmp	r3, #1
 800334e:	d118      	bne.n	8003382 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003350:	f3ef 8310 	mrs	r3, PRIMASK
 8003354:	60bb      	str	r3, [r7, #8]
  return(result);
 8003356:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335a:	2301      	movs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f383 8810 	msr	PRIMASK, r3
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2110      	movs	r1, #16
 8003372:	438a      	bics	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	2120      	movs	r1, #32
 8003388:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b00e      	add	sp, #56	; 0x38
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	fffffedf 	.word	0xfffffedf

080033a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <USB_DisableGlobalInt+0x30>)
 80033ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	5a9b      	ldrh	r3, [r3, r2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	b292      	uxth	r2, r2
 80033bc:	43d2      	mvns	r2, r2
 80033be:	b292      	uxth	r2, r2
 80033c0:	4013      	ands	r3, r2
 80033c2:	b299      	uxth	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b004      	add	sp, #16
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	0000bf80 	.word	0x0000bf80

080033d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033d8:	b084      	sub	sp, #16
 80033da:	b590      	push	{r4, r7, lr}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	2004      	movs	r0, #4
 80033e4:	2410      	movs	r4, #16
 80033e6:	1900      	adds	r0, r0, r4
 80033e8:	2408      	movs	r4, #8
 80033ea:	46a4      	mov	ip, r4
 80033ec:	44bc      	add	ip, r7
 80033ee:	4460      	add	r0, ip
 80033f0:	6001      	str	r1, [r0, #0]
 80033f2:	6042      	str	r2, [r0, #4]
 80033f4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2240      	movs	r2, #64	; 0x40
 80033fa:	2101      	movs	r1, #1
 80033fc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	2100      	movs	r1, #0
 8003404:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2244      	movs	r2, #68	; 0x44
 800340a:	2100      	movs	r1, #0
 800340c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2250      	movs	r2, #80	; 0x50
 8003412:	2100      	movs	r1, #0
 8003414:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b003      	add	sp, #12
 800341e:	bc90      	pop	{r4, r7}
 8003420:	bc08      	pop	{r3}
 8003422:	b004      	add	sp, #16
 8003424:	4718      	bx	r3

08003426 <memset>:
 8003426:	0003      	movs	r3, r0
 8003428:	1882      	adds	r2, r0, r2
 800342a:	4293      	cmp	r3, r2
 800342c:	d100      	bne.n	8003430 <memset+0xa>
 800342e:	4770      	bx	lr
 8003430:	7019      	strb	r1, [r3, #0]
 8003432:	3301      	adds	r3, #1
 8003434:	e7f9      	b.n	800342a <memset+0x4>
	...

08003438 <__libc_init_array>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	2600      	movs	r6, #0
 800343c:	4c0c      	ldr	r4, [pc, #48]	; (8003470 <__libc_init_array+0x38>)
 800343e:	4d0d      	ldr	r5, [pc, #52]	; (8003474 <__libc_init_array+0x3c>)
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	42a6      	cmp	r6, r4
 8003446:	d109      	bne.n	800345c <__libc_init_array+0x24>
 8003448:	2600      	movs	r6, #0
 800344a:	f000 f819 	bl	8003480 <_init>
 800344e:	4c0a      	ldr	r4, [pc, #40]	; (8003478 <__libc_init_array+0x40>)
 8003450:	4d0a      	ldr	r5, [pc, #40]	; (800347c <__libc_init_array+0x44>)
 8003452:	1b64      	subs	r4, r4, r5
 8003454:	10a4      	asrs	r4, r4, #2
 8003456:	42a6      	cmp	r6, r4
 8003458:	d105      	bne.n	8003466 <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	00b3      	lsls	r3, r6, #2
 800345e:	58eb      	ldr	r3, [r5, r3]
 8003460:	4798      	blx	r3
 8003462:	3601      	adds	r6, #1
 8003464:	e7ee      	b.n	8003444 <__libc_init_array+0xc>
 8003466:	00b3      	lsls	r3, r6, #2
 8003468:	58eb      	ldr	r3, [r5, r3]
 800346a:	4798      	blx	r3
 800346c:	3601      	adds	r6, #1
 800346e:	e7f2      	b.n	8003456 <__libc_init_array+0x1e>
 8003470:	0800350c 	.word	0x0800350c
 8003474:	0800350c 	.word	0x0800350c
 8003478:	08003510 	.word	0x08003510
 800347c:	0800350c 	.word	0x0800350c

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
