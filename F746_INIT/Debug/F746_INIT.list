
F746_INIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012da0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08012f70  08012f70  00022f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013018  08013018  000301c0  2**0
                  CONTENTS
  4 .ARM          00000008  08013018  08013018  00023018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013020  08013020  000301c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013020  08013020  00023020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013024  08013024  00023024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08013028  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  080130a8  00030080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  08013148  00030120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000955c  200001c0  080131e8  000301c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000971c  080131e8  0003971c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003e430  00000000  00000000  00030233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000854a  00000000  00000000  0006e663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000033b8  00000000  00000000  00076bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002807  00000000  00000000  00079f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000368fc  00000000  00000000  0007c76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004585e  00000000  00000000  000b306b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012b4e7  00000000  00000000  000f88c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000dfb0  00000000  00000000  00223db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  00231d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012f58 	.word	0x08012f58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08012f58 	.word	0x08012f58

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	200001dc 	.word	0x200001dc
 8000570:	20000234 	.word	0x20000234

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f002 fc26 	bl	8002dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f84d 	bl	800061c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000582:	f000 f8bd 	bl	8000700 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f001 f87b 	bl	8001680 <MX_GPIO_Init>
  MX_ADC3_Init();
 800058a:	f000 f8eb 	bl	8000764 <MX_ADC3_Init>
  MX_CRC_Init();
 800058e:	f000 f93b 	bl	8000808 <MX_CRC_Init>
  MX_DCMI_Init();
 8000592:	f000 f95b 	bl	800084c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000596:	f000 f98d 	bl	80008b4 <MX_DMA2D_Init>
  MX_ETH_Init();
 800059a:	f000 f9bd 	bl	8000918 <MX_ETH_Init>
  MX_FMC_Init();
 800059e:	f001 f81f 	bl	80015e0 <MX_FMC_Init>
  MX_I2C1_Init();
 80005a2:	f000 fa07 	bl	80009b4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005a6:	f000 fa45 	bl	8000a34 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005aa:	f000 fa83 	bl	8000ab4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005ae:	f000 fb03 	bl	8000bb8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005b2:	f000 fb2d 	bl	8000c10 <MX_RTC_Init>
  MX_SAI2_Init();
 80005b6:	f000 fbcf 	bl	8000d58 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005ba:	f000 fc75 	bl	8000ea8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005be:	f000 fc95 	bl	8000eec <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005c2:	f000 fcc3 	bl	8000f4c <MX_SPI2_Init>
  MX_TIM1_Init();
 80005c6:	f000 fcff 	bl	8000fc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ca:	f000 fda9 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ce:	f000 fe1d 	bl	800120c <MX_TIM3_Init>
  MX_TIM5_Init();
 80005d2:	f000 fe93 	bl	80012fc <MX_TIM5_Init>
  MX_TIM8_Init();
 80005d6:	f000 ff09 	bl	80013ec <MX_TIM8_Init>
  MX_TIM12_Init();
 80005da:	f000 ff5b 	bl	8001494 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80005de:	f000 ff9f 	bl	8001520 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005e2:	f000 ffcd 	bl	8001580 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005e6:	f00d f863 	bl	800d6b0 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0xa0>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00f fd93 	bl	801012c <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <main+0xa4>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f00f fd6b 	bl	80100e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x9c>
 8000612:	bf00      	nop
 8000614:	08012f7c 	.word	0x08012f7c
 8000618:	20000d1c 	.word	0x20000d1c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f012 fbf6 	bl	8012e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f006 fa44 	bl	8006acc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <SystemClock_Config+0xdc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xdc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a26      	ldr	r2, [pc, #152]	; (80006fc <SystemClock_Config+0xe0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xe0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000674:	2309      	movs	r3, #9
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800068c:	2319      	movs	r3, #25
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000690:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800069a:	2309      	movs	r3, #9
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 fb34 	bl	8006d10 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f001 f9c1 	bl	8001a34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b2:	f006 fa1b 	bl	8006aec <HAL_PWREx_EnableOverDrive>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006bc:	f001 f9ba 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2106      	movs	r1, #6
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fdba 	bl	8007258 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ea:	f001 f9a3 	bl	8001a34 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0a2      	sub	sp, #136	; 0x88
 8000704:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2284      	movs	r2, #132	; 0x84
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f012 fb85 	bl	8012e1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <PeriphCommonClock_Config+0x60>)
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000716:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800071c:	2305      	movs	r3, #5
 800071e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000724:	2303      	movs	r3, #3
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800072c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000732:	2300      	movs	r3, #0
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800073a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f006 ff9e 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000752:	f001 f96f 	bl	8001a34 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3788      	adds	r7, #136	; 0x88
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	00b00008 	.word	0x00b00008

08000764 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC3_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_ADC3_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC3_Init+0x98>)
 800077e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000782:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC3_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC3_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC3_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC3_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC3_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_ADC3_Init+0x98>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_ADC3_Init+0xa0>)
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC3_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_ADC3_Init+0x98>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ADC3_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC3_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_ADC3_Init+0x98>)
 80007c6:	f002 fb51 	bl	8002e6c <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007d0:	f001 f930 	bl	8001a34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC3_Init+0x98>)
 80007e6:	f002 fb85 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007f0:	f001 f920 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000046c 	.word	0x2000046c
 8000800:	40012200 	.word	0x40012200
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_CRC_Init+0x3c>)
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <MX_CRC_Init+0x40>)
 8000810:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_CRC_Init+0x3c>)
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_CRC_Init+0x3c>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_CRC_Init+0x3c>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_CRC_Init+0x3c>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_CRC_Init+0x3c>)
 800082c:	2201      	movs	r2, #1
 800082e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_CRC_Init+0x3c>)
 8000832:	f002 fe91 	bl	8003558 <HAL_CRC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800083c:	f001 f8fa 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200004b4 	.word	0x200004b4
 8000848:	40023000 	.word	0x40023000

0800084c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_DCMI_Init+0x60>)
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <MX_DCMI_Init+0x64>)
 8000854:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_DCMI_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_DCMI_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_DCMI_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_DCMI_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_DCMI_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_DCMI_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_DCMI_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_DCMI_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_DCMI_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_DCMI_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_DCMI_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_DCMI_Init+0x60>)
 800089a:	f002 ff47 	bl	800372c <HAL_DCMI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f001 f8c6 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200004d8 	.word	0x200004d8
 80008b0:	50050000 	.word	0x50050000

080008b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_DMA2D_Init+0x60>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008ea:	f003 f833 	bl	8003954 <HAL_DMA2D_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008f4:	f001 f89e 	bl	8001a34 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008f8:	2101      	movs	r1, #1
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_DMA2D_Init+0x5c>)
 80008fc:	f003 f984 	bl	8003c08 <HAL_DMA2D_ConfigLayer>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000906:	f001 f895 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000528 	.word	0x20000528
 8000914:	4002b000 	.word	0x4002b000

08000918 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_ETH_Init+0x84>)
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <MX_ETH_Init+0x88>)
 8000920:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_ETH_Init+0x8c>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_ETH_Init+0x8c>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ETH_Init+0x8c>)
 8000930:	22e1      	movs	r2, #225	; 0xe1
 8000932:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_ETH_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_ETH_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_ETH_Init+0x8c>)
 8000942:	2200      	movs	r2, #0
 8000944:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_ETH_Init+0x84>)
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_ETH_Init+0x8c>)
 800094a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_ETH_Init+0x84>)
 800094e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000952:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_ETH_Init+0x84>)
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <MX_ETH_Init+0x90>)
 8000958:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_ETH_Init+0x84>)
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_ETH_Init+0x94>)
 800095e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_ETH_Init+0x84>)
 8000962:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000966:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_ETH_Init+0x84>)
 800096a:	f003 f9df 	bl	8003d2c <HAL_ETH_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000974:	f001 f85e 	bl	8001a34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000978:	2238      	movs	r2, #56	; 0x38
 800097a:	2100      	movs	r1, #0
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ETH_Init+0x98>)
 800097e:	f012 fa4d 	bl	8012e1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_ETH_Init+0x98>)
 8000984:	2221      	movs	r2, #33	; 0x21
 8000986:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_ETH_Init+0x98>)
 800098a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800098e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_ETH_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000568 	.word	0x20000568
 80009a0:	40028000 	.word	0x40028000
 80009a4:	20000d20 	.word	0x20000d20
 80009a8:	20000120 	.word	0x20000120
 80009ac:	20000080 	.word	0x20000080
 80009b0:	20000434 	.word	0x20000434

080009b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_I2C1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <MX_I2C1_Init+0x7c>)
 80009c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009f0:	f005 fbda 	bl	80061a8 <HAL_I2C_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009fa:	f001 f81b 	bl	8001a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_I2C1_Init+0x74>)
 8000a02:	f005 fc61 	bl	80062c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f001 f812 	bl	8001a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_I2C1_Init+0x74>)
 8000a14:	f005 fca3 	bl	800635e <HAL_I2CEx_ConfigDigitalFilter>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f001 f809 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000618 	.word	0x20000618
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	00c0eaff 	.word	0x00c0eaff

08000a34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_I2C3_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MX_I2C3_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a70:	f005 fb9a 	bl	80061a8 <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 ffdb 	bl	8001a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a82:	f005 fc21 	bl	80062c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 ffd2 	bl	8001a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_I2C3_Init+0x74>)
 8000a94:	f005 fc63 	bl	800635e <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 ffc9 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000066c 	.word	0x2000066c
 8000aac:	40005c00 	.word	0x40005c00
 8000ab0:	00c0eaff 	.word	0x00c0eaff

08000ab4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2234      	movs	r2, #52	; 0x34
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f012 f9ab 	bl	8012e1c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000ac8:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <MX_LTDC_Init+0x100>)
 8000aca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000acc:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ad8:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ade:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ae4:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000aec:	2209      	movs	r2, #9
 8000aee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000af2:	2235      	movs	r2, #53	; 0x35
 8000af4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000af8:	220b      	movs	r2, #11
 8000afa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000afe:	f240 2215 	movw	r2, #533	; 0x215
 8000b02:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b06:	f240 121b 	movw	r2, #283	; 0x11b
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b0e:	f240 2235 	movw	r2, #565	; 0x235
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b14:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b16:	f240 121d 	movw	r2, #285	; 0x11d
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b36:	f005 fc5f 	bl	80063f8 <HAL_LTDC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b40:	f000 ff78 	bl	8001a34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b48:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b4c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b56:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b5c:	23ff      	movs	r3, #255	; 0xff
 8000b5e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b68:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b6e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_LTDC_Init+0xfc>)
 8000b9a:	f005 fdbf 	bl	800671c <HAL_LTDC_ConfigLayer>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000ba4:	f000 ff46 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200006c0 	.word	0x200006c0
 8000bb4:	40016800 	.word	0x40016800

08000bb8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <MX_QUADSPI_Init+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bd6:	2218      	movs	r2, #24
 8000bd8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bdc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000be0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_QUADSPI_Init+0x50>)
 8000bf6:	f005 ffc9 	bl	8006b8c <HAL_QSPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c00:	f000 ff18 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000768 	.word	0x20000768
 8000c0c:	a0001000 	.word	0xa0001000

08000c10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b090      	sub	sp, #64	; 0x40
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2228      	movs	r2, #40	; 0x28
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f012 f8f3 	bl	8012e1c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c38:	4a46      	ldr	r2, [pc, #280]	; (8000d54 <MX_RTC_Init+0x144>)
 8000c3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c44:	227f      	movs	r2, #127	; 0x7f
 8000c46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c48:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c4a:	22ff      	movs	r2, #255	; 0xff
 8000c4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c4e:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c54:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c60:	483b      	ldr	r0, [pc, #236]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c62:	f007 fa41 	bl	80080e8 <HAL_RTC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c6c:	f000 fee2 	bl	8001a34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <MX_RTC_Init+0x140>)
 8000c94:	f007 faac 	bl	80081f0 <HAL_RTC_SetTime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c9e:	f000 fec9 	bl	8001a34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4823      	ldr	r0, [pc, #140]	; (8000d50 <MX_RTC_Init+0x140>)
 8000cc4:	f007 fb2e 	bl	8008324 <HAL_RTC_SetDate>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000cce:	f000 feb1 	bl	8001a34 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <MX_RTC_Init+0x140>)
 8000d0a:	f007 fb8f 	bl	800842c <HAL_RTC_SetAlarm>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000d14:	f000 fe8e 	bl	8001a34 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <MX_RTC_Init+0x140>)
 8000d26:	f007 fb81 	bl	800842c <HAL_RTC_SetAlarm>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000d30:	f000 fe80 	bl	8001a34 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d34:	2202      	movs	r2, #2
 8000d36:	2100      	movs	r1, #0
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_RTC_Init+0x140>)
 8000d3a:	f007 fd43 	bl	80087c4 <HAL_RTCEx_SetTimeStamp>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000d44:	f000 fe76 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3740      	adds	r7, #64	; 0x40
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200007b4 	.word	0x200007b4
 8000d54:	40002800 	.word	0x40002800

08000d58 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d5e:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <MX_SAI2_Init+0x140>)
 8000d60:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d62:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d68:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d6e:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d70:	2240      	movs	r2, #64	; 0x40
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d74:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d7a:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d80:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d86:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d8c:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d98:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000d9a:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <MX_SAI2_Init+0x144>)
 8000d9c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d9e:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000da4:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000daa:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000db0:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000db8:	2208      	movs	r2, #8
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dc2:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000dec:	4829      	ldr	r0, [pc, #164]	; (8000e94 <MX_SAI2_Init+0x13c>)
 8000dee:	f007 fd51 	bl	8008894 <HAL_SAI_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000df8:	f000 fe1c 	bl	8001a34 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000dfe:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <MX_SAI2_Init+0x14c>)
 8000e00:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e10:	2240      	movs	r2, #64	; 0x40
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_SAI2_Init+0x148>)
 8000e82:	f007 fd07 	bl	8008894 <HAL_SAI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e8c:	f000 fdd2 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200007d4 	.word	0x200007d4
 8000e98:	40015c04 	.word	0x40015c04
 8000e9c:	0002ee00 	.word	0x0002ee00
 8000ea0:	20000858 	.word	0x20000858
 8000ea4:	40015c24 	.word	0x40015c24

08000ea8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <MX_SDMMC1_SD_Init+0x40>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eca:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <MX_SDMMC1_SD_Init+0x3c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200008dc 	.word	0x200008dc
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000ef2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000ef6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_SPDIFRX_Init+0x5c>)
 8000f36:	f008 ff39 	bl	8009dac <HAL_SPDIFRX_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f40:	f000 fd78 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000960 	.word	0x20000960

08000f4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <MX_SPI2_Init+0x78>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_SPI2_Init+0x74>)
 8000fac:	f008 ff5a 	bl	8009e64 <HAL_SPI_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 fd3d 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200009ac 	.word	0x200009ac
 8000fc4:	40003800 	.word	0x40003800

08000fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09a      	sub	sp, #104	; 0x68
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	222c      	movs	r2, #44	; 0x2c
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f011 ff0a 	bl	8012e1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <MX_TIM1_Init+0x150>)
 800100a:	4a44      	ldr	r2, [pc, #272]	; (800111c <MX_TIM1_Init+0x154>)
 800100c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <MX_TIM1_Init+0x150>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <MX_TIM1_Init+0x150>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800101a:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <MX_TIM1_Init+0x150>)
 800101c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001020:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <MX_TIM1_Init+0x150>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_TIM1_Init+0x150>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <MX_TIM1_Init+0x150>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001034:	4838      	ldr	r0, [pc, #224]	; (8001118 <MX_TIM1_Init+0x150>)
 8001036:	f008 ffc0 	bl	8009fba <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001040:	f000 fcf8 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800104a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800104e:	4619      	mov	r1, r3
 8001050:	4831      	ldr	r0, [pc, #196]	; (8001118 <MX_TIM1_Init+0x150>)
 8001052:	f009 fb0b 	bl	800a66c <HAL_TIM_ConfigClockSource>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800105c:	f000 fcea 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001060:	482d      	ldr	r0, [pc, #180]	; (8001118 <MX_TIM1_Init+0x150>)
 8001062:	f009 f879 	bl	800a158 <HAL_TIM_PWM_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800106c:	f000 fce2 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800107c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001080:	4619      	mov	r1, r3
 8001082:	4825      	ldr	r0, [pc, #148]	; (8001118 <MX_TIM1_Init+0x150>)
 8001084:	f009 ff7c 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800108e:	f000 fcd1 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM1_Init+0x150>)
 80010b8:	f009 f9c4 	bl	800a444 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010c2:	f000 fcb7 	bl	8001a34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM1_Init+0x150>)
 80010fc:	f009 ffce 	bl	800b09c <HAL_TIMEx_ConfigBreakDeadTime>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001106:	f000 fc95 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM1_Init+0x150>)
 800110c:	f001 fa9a 	bl	8002644 <HAL_TIM_MspPostInit>

}
 8001110:	bf00      	nop
 8001112:	3768      	adds	r7, #104	; 0x68
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000a10 	.word	0x20000a10
 800111c:	40010000 	.word	0x40010000

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08e      	sub	sp, #56	; 0x38
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_TIM2_Init+0xe8>)
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_TIM2_Init+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <MX_TIM2_Init+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <MX_TIM2_Init+0xe8>)
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_TIM2_Init+0xe8>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_TIM2_Init+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117a:	4823      	ldr	r0, [pc, #140]	; (8001208 <MX_TIM2_Init+0xe8>)
 800117c:	f008 ff1d 	bl	8009fba <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001186:	f000 fc55 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001194:	4619      	mov	r1, r3
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <MX_TIM2_Init+0xe8>)
 8001198:	f009 fa68 	bl	800a66c <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011a2:	f000 fc47 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_TIM2_Init+0xe8>)
 80011a8:	f008 ffd6 	bl	800a158 <HAL_TIM_PWM_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011b2:	f000 fc3f 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4810      	ldr	r0, [pc, #64]	; (8001208 <MX_TIM2_Init+0xe8>)
 80011c6:	f009 fedb 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011d0:	f000 fc30 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d4:	2360      	movs	r3, #96	; 0x60
 80011d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM2_Init+0xe8>)
 80011ec:	f009 f92a 	bl	800a444 <HAL_TIM_PWM_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011f6:	f000 fc1d 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM2_Init+0xe8>)
 80011fc:	f001 fa22 	bl	8002644 <HAL_TIM_MspPostInit>

}
 8001200:	bf00      	nop
 8001202:	3738      	adds	r7, #56	; 0x38
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000a5c 	.word	0x20000a5c

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001240:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <MX_TIM3_Init+0xec>)
 8001242:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_TIM3_Init+0xe8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_TIM3_Init+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001264:	4823      	ldr	r0, [pc, #140]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001266:	f008 fea8 	bl	8009fba <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001270:	f000 fbe0 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	4619      	mov	r1, r3
 8001280:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001282:	f009 f9f3 	bl	800a66c <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800128c:	f000 fbd2 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_TIM3_Init+0xe8>)
 8001292:	f008 ff61 	bl	800a158 <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800129c:	f000 fbca 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_TIM3_Init+0xe8>)
 80012b0:	f009 fe66 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012ba:	f000 fbbb 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM3_Init+0xe8>)
 80012d6:	f009 f8b5 	bl	800a444 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012e0:	f000 fba8 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM3_Init+0xe8>)
 80012e6:	f001 f9ad 	bl	8002644 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3738      	adds	r7, #56	; 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000aa8 	.word	0x20000aa8
 80012f8:	40000400 	.word	0x40000400

080012fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001330:	4a2d      	ldr	r2, [pc, #180]	; (80013e8 <MX_TIM5_Init+0xec>)
 8001332:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_TIM5_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001342:	f04f 32ff 	mov.w	r2, #4294967295
 8001346:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MX_TIM5_Init+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001356:	f008 fe30 	bl	8009fba <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001360:	f000 fb68 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	4619      	mov	r1, r3
 8001370:	481c      	ldr	r0, [pc, #112]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001372:	f009 f97b 	bl	800a66c <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800137c:	f000 fb5a 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001380:	4818      	ldr	r0, [pc, #96]	; (80013e4 <MX_TIM5_Init+0xe8>)
 8001382:	f008 fee9 	bl	800a158 <HAL_TIM_PWM_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800138c:	f000 fb52 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_TIM5_Init+0xe8>)
 80013a0:	f009 fdee 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013aa:	f000 fb43 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ae:	2360      	movs	r3, #96	; 0x60
 80013b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	220c      	movs	r2, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM5_Init+0xe8>)
 80013c6:	f009 f83d 	bl	800a444 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013d0:	f000 fb30 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM5_Init+0xe8>)
 80013d6:	f001 f935 	bl	8002644 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	; 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000af4 	.word	0x20000af4
 80013e8:	40000c00 	.word	0x40000c00

080013ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <MX_TIM8_Init+0xa0>)
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <MX_TIM8_Init+0xa4>)
 800140e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_TIM8_Init+0xa0>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_TIM8_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_TIM8_Init+0xa0>)
 800141e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001422:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_TIM8_Init+0xa0>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_TIM8_Init+0xa0>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_TIM8_Init+0xa0>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_TIM8_Init+0xa0>)
 8001438:	f008 fdbf 	bl	8009fba <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001442:	f000 faf7 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <MX_TIM8_Init+0xa0>)
 8001454:	f009 f90a 	bl	800a66c <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800145e:	f000 fae9 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_TIM8_Init+0xa0>)
 8001474:	f009 fd84 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800147e:	f000 fad9 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000b40 	.word	0x20000b40
 8001490:	40010400 	.word	0x40010400

08001494 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_TIM12_Init+0x84>)
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <MX_TIM12_Init+0x88>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM12_Init+0x84>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_TIM12_Init+0x84>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_TIM12_Init+0x84>)
 80014c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_TIM12_Init+0x84>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_TIM12_Init+0x84>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <MX_TIM12_Init+0x84>)
 80014d4:	f008 fe40 	bl	800a158 <HAL_TIM_PWM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80014de:	f000 faa9 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
 80014e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <MX_TIM12_Init+0x84>)
 80014fa:	f008 ffa3 	bl	800a444 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001504:	f000 fa96 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <MX_TIM12_Init+0x84>)
 800150a:	f001 f89b 	bl	8002644 <HAL_TIM_MspPostInit>

}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000b8c 	.word	0x20000b8c
 800151c:	40001800 	.word	0x40001800

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <MX_USART1_UART_Init+0x5c>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART1_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART1_UART_Init+0x58>)
 8001564:	f009 fe36 	bl	800b1d4 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800156e:	f000 fa61 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000bd8 	.word	0x20000bd8
 800157c:	40011000 	.word	0x40011000

08001580 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <MX_USART6_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART6_UART_Init+0x58>)
 80015c4:	f009 fe06 	bl	800b1d4 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 fa31 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000c60 	.word	0x20000c60
 80015dc:	40011400 	.word	0x40011400

080015e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_FMC_Init+0x98>)
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <MX_FMC_Init+0x9c>)
 80015fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_FMC_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_FMC_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_FMC_Init+0x98>)
 800160c:	2204      	movs	r2, #4
 800160e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_FMC_Init+0x98>)
 8001612:	2210      	movs	r2, #16
 8001614:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_FMC_Init+0x98>)
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_FMC_Init+0x98>)
 800161e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001622:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_FMC_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_FMC_Init+0x98>)
 800162c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001630:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_FMC_Init+0x98>)
 8001634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_FMC_Init+0x98>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001644:	2307      	movs	r3, #7
 8001646:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001648:	2304      	movs	r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800164c:	2307      	movs	r3, #7
 800164e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001650:	2303      	movs	r3, #3
 8001652:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_FMC_Init+0x98>)
 8001662:	f008 fb6e 	bl	8009d42 <HAL_SDRAM_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800166c:	f000 f9e2 	bl	8001a34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000ce8 	.word	0x20000ce8
 800167c:	a0000140 	.word	0xa0000140

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b090      	sub	sp, #64	; 0x40
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001696:	4bb0      	ldr	r3, [pc, #704]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4aaf      	ldr	r2, [pc, #700]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4bad      	ldr	r3, [pc, #692]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ae:	4baa      	ldr	r3, [pc, #680]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4aa9      	ldr	r2, [pc, #676]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4ba7      	ldr	r3, [pc, #668]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4ba4      	ldr	r3, [pc, #656]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4aa3      	ldr	r2, [pc, #652]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4ba1      	ldr	r3, [pc, #644]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	4b9e      	ldr	r3, [pc, #632]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a9d      	ldr	r2, [pc, #628]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b9b      	ldr	r3, [pc, #620]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b98      	ldr	r3, [pc, #608]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a97      	ldr	r2, [pc, #604]	; (8001958 <MX_GPIO_Init+0x2d8>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b95      	ldr	r3, [pc, #596]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b92      	ldr	r3, [pc, #584]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a91      	ldr	r2, [pc, #580]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001726:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a8b      	ldr	r2, [pc, #556]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800173e:	4b86      	ldr	r3, [pc, #536]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a85      	ldr	r2, [pc, #532]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b83      	ldr	r3, [pc, #524]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001756:	4b80      	ldr	r3, [pc, #512]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800175c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176e:	4b7a      	ldr	r3, [pc, #488]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a79      	ldr	r2, [pc, #484]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b77      	ldr	r3, [pc, #476]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a73      	ldr	r2, [pc, #460]	; (8001958 <MX_GPIO_Init+0x2d8>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b71      	ldr	r3, [pc, #452]	; (8001958 <MX_GPIO_Init+0x2d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2120      	movs	r1, #32
 80017a2:	486e      	ldr	r0, [pc, #440]	; (800195c <MX_GPIO_Init+0x2dc>)
 80017a4:	f002 ffac 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	210c      	movs	r1, #12
 80017ac:	486c      	ldr	r0, [pc, #432]	; (8001960 <MX_GPIO_Init+0x2e0>)
 80017ae:	f002 ffa7 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2108      	movs	r1, #8
 80017b6:	486b      	ldr	r0, [pc, #428]	; (8001964 <MX_GPIO_Init+0x2e4>)
 80017b8:	f002 ffa2 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c2:	4867      	ldr	r0, [pc, #412]	; (8001960 <MX_GPIO_Init+0x2e0>)
 80017c4:	f002 ff9c 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ce:	4866      	ldr	r0, [pc, #408]	; (8001968 <MX_GPIO_Init+0x2e8>)
 80017d0:	f002 ff96 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	21c8      	movs	r1, #200	; 0xc8
 80017d8:	4864      	ldr	r0, [pc, #400]	; (800196c <MX_GPIO_Init+0x2ec>)
 80017da:	f002 ff91 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017de:	2308      	movs	r3, #8
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	485f      	ldr	r0, [pc, #380]	; (8001970 <MX_GPIO_Init+0x2f0>)
 80017f2:	f002 fdc1 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017f6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001808:	230a      	movs	r3, #10
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4858      	ldr	r0, [pc, #352]	; (8001974 <MX_GPIO_Init+0x2f4>)
 8001814:	f002 fdb0 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	4852      	ldr	r0, [pc, #328]	; (8001978 <MX_GPIO_Init+0x2f8>)
 800182e:	f002 fda3 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001832:	2340      	movs	r3, #64	; 0x40
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001836:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001844:	4619      	mov	r1, r3
 8001846:	4845      	ldr	r0, [pc, #276]	; (800195c <MX_GPIO_Init+0x2dc>)
 8001848:	f002 fd96 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800184c:	2320      	movs	r3, #32
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001860:	4619      	mov	r1, r3
 8001862:	483e      	ldr	r0, [pc, #248]	; (800195c <MX_GPIO_Init+0x2dc>)
 8001864:	f002 fd88 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001868:	f241 030c 	movw	r3, #4108	; 0x100c
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	4837      	ldr	r0, [pc, #220]	; (8001960 <MX_GPIO_Init+0x2e0>)
 8001882:	f002 fd79 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	4838      	ldr	r0, [pc, #224]	; (800197c <MX_GPIO_Init+0x2fc>)
 800189c:	f002 fd6c 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80018a0:	2308      	movs	r3, #8
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b4:	4619      	mov	r1, r3
 80018b6:	482b      	ldr	r0, [pc, #172]	; (8001964 <MX_GPIO_Init+0x2e4>)
 80018b8:	f002 fd5e 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018bc:	2310      	movs	r3, #16
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4823      	ldr	r0, [pc, #140]	; (800195c <MX_GPIO_Init+0x2dc>)
 80018d0:	f002 fd52 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018d4:	f248 0304 	movw	r3, #32772	; 0x8004
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	481f      	ldr	r0, [pc, #124]	; (8001968 <MX_GPIO_Init+0x2e8>)
 80018ea:	f002 fd45 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	4818      	ldr	r0, [pc, #96]	; (8001968 <MX_GPIO_Init+0x2e8>)
 8001908:	f002 fd36 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001912:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	480f      	ldr	r0, [pc, #60]	; (8001960 <MX_GPIO_Init+0x2e0>)
 8001924:	f002 fd28 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001928:	2310      	movs	r3, #16
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001938:	230a      	movs	r3, #10
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <MX_GPIO_Init+0x2e8>)
 8001944:	f002 fd18 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001948:	23c8      	movs	r3, #200	; 0xc8
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
 8001954:	e014      	b.n	8001980 <MX_GPIO_Init+0x300>
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40022000 	.word	0x40022000
 8001964:	40022800 	.word	0x40022800
 8001968:	40021c00 	.word	0x40021c00
 800196c:	40021800 	.word	0x40021800
 8001970:	40021000 	.word	0x40021000
 8001974:	40020400 	.word	0x40020400
 8001978:	40022400 	.word	0x40022400
 800197c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	4819      	ldr	r0, [pc, #100]	; (80019f0 <MX_GPIO_Init+0x370>)
 800198c:	f002 fcf4 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001990:	2305      	movs	r3, #5
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019a0:	230a      	movs	r3, #10
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4812      	ldr	r0, [pc, #72]	; (80019f4 <MX_GPIO_Init+0x374>)
 80019ac:	f002 fce4 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019b0:	2304      	movs	r3, #4
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	480b      	ldr	r0, [pc, #44]	; (80019f0 <MX_GPIO_Init+0x370>)
 80019c4:	f002 fcd8 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019c8:	2328      	movs	r3, #40	; 0x28
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019d8:	230a      	movs	r3, #10
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_GPIO_Init+0x378>)
 80019e4:	f002 fcc8 	bl	8004378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e8:	bf00      	nop
 80019ea:	3740      	adds	r7, #64	; 0x40
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020000 	.word	0x40020000

080019fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a04:	f010 fe58 	bl	80126b8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f00e fbdb 	bl	80101c4 <osDelay>
 8001a0e:	e7fb      	b.n	8001a08 <StartDefaultTask+0xc>

08001a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a22:	f001 f9df 	bl	8002de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40001000 	.word	0x40001000

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	210f      	movs	r1, #15
 8001a7a:	f06f 0001 	mvn.w	r0, #1
 8001a7e:	f001 fd41 	bl	8003504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <HAL_ADC_MspInit+0xa4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d13c      	bne.n	8001b2c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_ADC_MspInit+0xa8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001afa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001afe:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b00:	2303      	movs	r3, #3
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480b      	ldr	r0, [pc, #44]	; (8001b3c <HAL_ADC_MspInit+0xac>)
 8001b10:	f002 fc32 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b14:	2301      	movs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <HAL_ADC_MspInit+0xb0>)
 8001b28:	f002 fc26 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012200 	.word	0x40012200
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40021400 	.word	0x40021400
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_CRC_MspInit+0x38>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10b      	bne.n	8001b6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_CRC_MspInit+0x3c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_CRC_MspInit+0x3c>)
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_CRC_MspInit+0x3c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023000 	.word	0x40023000
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_DCMI_MspInit+0x160>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f040 809a 	bne.w	8001cdc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	4a4e      	ldr	r2, [pc, #312]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6353      	str	r3, [r2, #52]	; 0x34
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	623b      	str	r3, [r7, #32]
 8001bbe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc0:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a48      	ldr	r2, [pc, #288]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bde:	f043 0308 	orr.w	r3, r3, #8
 8001be2:	6313      	str	r3, [r2, #48]	; 0x30
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a3c      	ldr	r2, [pc, #240]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a30      	ldr	r2, [pc, #192]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_DCMI_MspInit+0x164>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c38:	2360      	movs	r3, #96	; 0x60
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c48:	230d      	movs	r3, #13
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4826      	ldr	r0, [pc, #152]	; (8001cec <HAL_DCMI_MspInit+0x168>)
 8001c54:	f002 fb90 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c68:	230d      	movs	r3, #13
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	481f      	ldr	r0, [pc, #124]	; (8001cf0 <HAL_DCMI_MspInit+0x16c>)
 8001c74:	f002 fb80 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c8a:	230d      	movs	r3, #13
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <HAL_DCMI_MspInit+0x170>)
 8001c96:	f002 fb6f 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c9a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cac:	230d      	movs	r3, #13
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4810      	ldr	r0, [pc, #64]	; (8001cf8 <HAL_DCMI_MspInit+0x174>)
 8001cb8:	f002 fb5e 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cbc:	2350      	movs	r3, #80	; 0x50
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ccc:	230d      	movs	r3, #13
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <HAL_DCMI_MspInit+0x178>)
 8001cd8:	f002 fb4e 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3738      	adds	r7, #56	; 0x38
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	50050000 	.word	0x50050000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021800 	.word	0x40021800
 8001cf8:	40021c00 	.word	0x40021c00
 8001cfc:	40020000 	.word	0x40020000

08001d00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_DMA2D_MspInit+0x44>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_DMA2D_MspInit+0x48>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_DMA2D_MspInit+0x48>)
 8001d18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_DMA2D_MspInit+0x48>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	205a      	movs	r0, #90	; 0x5a
 8001d30:	f001 fbe8 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d34:	205a      	movs	r0, #90	; 0x5a
 8001d36:	f001 fc01 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	4002b000 	.word	0x4002b000
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08e      	sub	sp, #56	; 0x38
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a3f      	ldr	r2, [pc, #252]	; (8001e68 <HAL_ETH_MspInit+0x11c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d178      	bne.n	8001e60 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a3e      	ldr	r2, [pc, #248]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a32      	ldr	r2, [pc, #200]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_ETH_MspInit+0x120>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001dfe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e10:	230b      	movs	r3, #11
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4815      	ldr	r0, [pc, #84]	; (8001e70 <HAL_ETH_MspInit+0x124>)
 8001e1c:	f002 faac 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e20:	2332      	movs	r3, #50	; 0x32
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e30:	230b      	movs	r3, #11
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480e      	ldr	r0, [pc, #56]	; (8001e74 <HAL_ETH_MspInit+0x128>)
 8001e3c:	f002 fa9c 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e40:	2386      	movs	r3, #134	; 0x86
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e50:	230b      	movs	r3, #11
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_ETH_MspInit+0x12c>)
 8001e5c:	f002 fa8c 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3738      	adds	r7, #56	; 0x38
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40028000 	.word	0x40028000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40021800 	.word	0x40021800
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0ac      	sub	sp, #176	; 0xb0
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e94:	f107 0318 	add.w	r3, r7, #24
 8001e98:	2284      	movs	r2, #132	; 0x84
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f010 ffbd 	bl	8012e1c <memset>
  if(hi2c->Instance==I2C1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a44      	ldr	r2, [pc, #272]	; (8001fb8 <HAL_I2C_MspInit+0x13c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d13d      	bne.n	8001f28 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001eac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0318 	add.w	r3, r7, #24
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fbe4 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ec6:	f7ff fdb5 	bl	8001a34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eea:	2312      	movs	r3, #18
 8001eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001efc:	2304      	movs	r3, #4
 8001efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f06:	4619      	mov	r1, r3
 8001f08:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <HAL_I2C_MspInit+0x144>)
 8001f0a:	f002 fa35 	bl	8004378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f26:	e042      	b.n	8001fae <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <HAL_I2C_MspInit+0x148>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d13d      	bne.n	8001fae <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3e:	f107 0318 	add.w	r3, r7, #24
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 fba0 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001f4e:	f7ff fd71 	bl	8001a34 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f72:	2312      	movs	r3, #18
 8001f74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f84:	2304      	movs	r3, #4
 8001f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <HAL_I2C_MspInit+0x14c>)
 8001f92:	f002 f9f1 	bl	8004378 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_I2C_MspInit+0x140>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	37b0      	adds	r7, #176	; 0xb0
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40005c00 	.word	0x40005c00
 8001fc8:	40021c00 	.word	0x40021c00

08001fcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_LTDC_MspInit+0x174>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f040 80a3 	bne.w	8002136 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ff0:	4b54      	ldr	r3, [pc, #336]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	4a53      	ldr	r2, [pc, #332]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8001ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ffa:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffc:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a4d      	ldr	r2, [pc, #308]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002020:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a47      	ldr	r2, [pc, #284]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b45      	ldr	r3, [pc, #276]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a41      	ldr	r2, [pc, #260]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002050:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a35      	ldr	r2, [pc, #212]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b33      	ldr	r3, [pc, #204]	; (8002144 <HAL_LTDC_MspInit+0x178>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002080:	2310      	movs	r3, #16
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002090:	230e      	movs	r3, #14
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	482b      	ldr	r0, [pc, #172]	; (8002148 <HAL_LTDC_MspInit+0x17c>)
 800209c:	f002 f96c 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020a0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b2:	230e      	movs	r3, #14
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <HAL_LTDC_MspInit+0x180>)
 80020be:	f002 f95b 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020c2:	23f7      	movs	r3, #247	; 0xf7
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020d2:	230e      	movs	r3, #14
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	481c      	ldr	r0, [pc, #112]	; (8002150 <HAL_LTDC_MspInit+0x184>)
 80020de:	f002 f94b 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020f4:	2309      	movs	r3, #9
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4815      	ldr	r0, [pc, #84]	; (8002154 <HAL_LTDC_MspInit+0x188>)
 8002100:	f002 f93a 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002104:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002116:	230e      	movs	r3, #14
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_LTDC_MspInit+0x18c>)
 8002122:	f002 f929 	bl	8004378 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2105      	movs	r1, #5
 800212a:	2058      	movs	r0, #88	; 0x58
 800212c:	f001 f9ea 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002130:	2058      	movs	r0, #88	; 0x58
 8002132:	f001 fa03 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3738      	adds	r7, #56	; 0x38
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40016800 	.word	0x40016800
 8002144:	40023800 	.word	0x40023800
 8002148:	40021000 	.word	0x40021000
 800214c:	40022400 	.word	0x40022400
 8002150:	40022800 	.word	0x40022800
 8002154:	40021800 	.word	0x40021800
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_QSPI_MspInit+0x10c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d170      	bne.n	8002260 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_QSPI_MspInit+0x110>)
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	4a3a      	ldr	r2, [pc, #232]	; (800226c <HAL_QSPI_MspInit+0x110>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6393      	str	r3, [r2, #56]	; 0x38
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_QSPI_MspInit+0x110>)
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002196:	4b35      	ldr	r3, [pc, #212]	; (800226c <HAL_QSPI_MspInit+0x110>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a34      	ldr	r2, [pc, #208]	; (800226c <HAL_QSPI_MspInit+0x110>)
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_QSPI_MspInit+0x110>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021de:	2304      	movs	r3, #4
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021ee:	2309      	movs	r3, #9
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	481d      	ldr	r0, [pc, #116]	; (8002270 <HAL_QSPI_MspInit+0x114>)
 80021fa:	f002 f8bd 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80021fe:	2340      	movs	r3, #64	; 0x40
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800220e:	230a      	movs	r3, #10
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <HAL_QSPI_MspInit+0x118>)
 800221a:	f002 f8ad 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800221e:	2304      	movs	r3, #4
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800222e:	2309      	movs	r3, #9
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	480e      	ldr	r0, [pc, #56]	; (8002274 <HAL_QSPI_MspInit+0x118>)
 800223a:	f002 f89d 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800223e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002250:	2309      	movs	r3, #9
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <HAL_QSPI_MspInit+0x11c>)
 800225c:	f002 f88c 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3730      	adds	r7, #48	; 0x30
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	a0001000 	.word	0xa0001000
 800226c:	40023800 	.word	0x40023800
 8002270:	40021000 	.word	0x40021000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020c00 	.word	0x40020c00

0800227c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b0a4      	sub	sp, #144	; 0x90
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2284      	movs	r2, #132	; 0x84
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f010 fdc5 	bl	8012e1c <memset>
  if(hrtc->Instance==RTC)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_RTC_MspInit+0x54>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d114      	bne.n	80022c6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800229c:	2320      	movs	r3, #32
 800229e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4618      	mov	r0, r3
 80022ac:	f005 f9ec 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022b6:	f7ff fbbd 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RTC_MspInit+0x58>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_RTC_MspInit+0x58>)
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3790      	adds	r7, #144	; 0x90
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40002800 	.word	0x40002800
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <HAL_SD_MspInit+0xb4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d144      	bne.n	8002384 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_SD_MspInit+0xb8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a24      	ldr	r2, [pc, #144]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_SD_MspInit+0xb8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_SD_MspInit+0xb8>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002342:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002346:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002354:	230c      	movs	r3, #12
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <HAL_SD_MspInit+0xbc>)
 8002360:	f002 f80a 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002364:	2304      	movs	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002374:	230c      	movs	r3, #12
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4619      	mov	r1, r3
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <HAL_SD_MspInit+0xc0>)
 8002380:	f001 fffa 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40023800 	.word	0x40023800
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00

0800239c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0aa      	sub	sp, #168	; 0xa8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	2284      	movs	r2, #132	; 0x84
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f010 fd2d 	bl	8012e1c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80023ca:	d143      	bne.n	8002454 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80023cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80023d2:	2364      	movs	r3, #100	; 0x64
 80023d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80023d6:	2302      	movs	r3, #2
 80023d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023da:	2302      	movs	r3, #2
 80023dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80023de:	2302      	movs	r3, #2
 80023e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 f94c 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80023f6:	f7ff fb1d 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_SPDIFRX_MspInit+0xc0>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_SPDIFRX_MspInit+0xc0>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_SPDIFRX_MspInit+0xc0>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_SPDIFRX_MspInit+0xc0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_SPDIFRX_MspInit+0xc0>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_SPDIFRX_MspInit+0xc0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002442:	2308      	movs	r3, #8
 8002444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800244c:	4619      	mov	r1, r3
 800244e:	4804      	ldr	r0, [pc, #16]	; (8002460 <HAL_SPDIFRX_MspInit+0xc4>)
 8002450:	f001 ff92 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002454:	bf00      	nop
 8002456:	37a8      	adds	r7, #168	; 0xa8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40020c00 	.word	0x40020c00

08002464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <HAL_SPI_MspInit+0xb4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d144      	bne.n	8002510 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_SPI_MspInit+0xb8>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a24      	ldr	r2, [pc, #144]	; (800251c <HAL_SPI_MspInit+0xb8>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_SPI_MspInit+0xb8>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_SPI_MspInit+0xb8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_SPI_MspInit+0xb8>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_SPI_MspInit+0xb8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_SPI_MspInit+0xb8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_SPI_MspInit+0xb8>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_SPI_MspInit+0xb8>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80024ce:	2302      	movs	r3, #2
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024de:	2305      	movs	r3, #5
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <HAL_SPI_MspInit+0xbc>)
 80024ea:	f001 ff45 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80024ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002500:	2305      	movs	r3, #5
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <HAL_SPI_MspInit+0xc0>)
 800250c:	f001 ff34 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	3728      	adds	r7, #40	; 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40003800 	.word	0x40003800
 800251c:	40023800 	.word	0x40023800
 8002520:	40022000 	.word	0x40022000
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2e      	ldr	r2, [pc, #184]	; (80025f0 <HAL_TIM_Base_MspInit+0xc8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10c      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a2d      	ldr	r2, [pc, #180]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002552:	e046      	b.n	80025e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255c:	d10c      	bne.n	8002578 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]
}
 8002576:	e034      	b.n	80025e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_TIM_Base_MspInit+0xd0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10c      	bne.n	800259c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
}
 800259a:	e022      	b.n	80025e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_TIM_Base_MspInit+0xd4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10c      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
}
 80025be:	e010      	b.n	80025e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_TIM_Base_MspInit+0xd8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10b      	bne.n	80025e2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_TIM_Base_MspInit+0xcc>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	bf00      	nop
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000c00 	.word	0x40000c00
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_TIM_PWM_MspInit+0x38>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10b      	bne.n	800262e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_TIM_PWM_MspInit+0x3c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <HAL_TIM_PWM_MspInit+0x3c>)
 800261c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_TIM_PWM_MspInit+0x3c>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40001800 	.word	0x40001800
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_TIM_MspPostInit+0x178>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d11d      	bne.n	80026a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800267e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	484a      	ldr	r0, [pc, #296]	; (80027c4 <HAL_TIM_MspPostInit+0x180>)
 800269c:	f001 fe6c 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80026a0:	e087      	b.n	80027b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d11d      	bne.n	80026e8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a43      	ldr	r2, [pc, #268]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80026c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026d6:	2301      	movs	r3, #1
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4838      	ldr	r0, [pc, #224]	; (80027c4 <HAL_TIM_MspPostInit+0x180>)
 80026e2:	f001 fe49 	bl	8004378 <HAL_GPIO_Init>
}
 80026e6:	e064      	b.n	80027b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <HAL_TIM_MspPostInit+0x184>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11c      	bne.n	800272c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a32      	ldr	r2, [pc, #200]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800270a:	2310      	movs	r3, #16
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800271a:	2302      	movs	r3, #2
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	4829      	ldr	r0, [pc, #164]	; (80027cc <HAL_TIM_MspPostInit+0x188>)
 8002726:	f001 fe27 	bl	8004378 <HAL_GPIO_Init>
}
 800272a:	e042      	b.n	80027b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <HAL_TIM_MspPostInit+0x18c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11c      	bne.n	8002770 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800274e:	2301      	movs	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800275e:	2302      	movs	r3, #2
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002762:	f107 031c 	add.w	r3, r7, #28
 8002766:	4619      	mov	r1, r3
 8002768:	481a      	ldr	r0, [pc, #104]	; (80027d4 <HAL_TIM_MspPostInit+0x190>)
 800276a:	f001 fe05 	bl	8004378 <HAL_GPIO_Init>
}
 800276e:	e020      	b.n	80027b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_TIM_MspPostInit+0x194>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d11b      	bne.n	80027b2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_TIM_MspPostInit+0x17c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002792:	2340      	movs	r3, #64	; 0x40
 8002794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027a2:	2309      	movs	r3, #9
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	480b      	ldr	r0, [pc, #44]	; (80027dc <HAL_TIM_MspPostInit+0x198>)
 80027ae:	f001 fde3 	bl	8004378 <HAL_GPIO_Init>
}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	; 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40000c00 	.word	0x40000c00
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40001800 	.word	0x40001800
 80027dc:	40021c00 	.word	0x40021c00

080027e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0ae      	sub	sp, #184	; 0xb8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f8:	f107 0320 	add.w	r3, r7, #32
 80027fc:	2284      	movs	r2, #132	; 0x84
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f010 fb0b 	bl	8012e1c <memset>
  if(huart->Instance==USART1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a53      	ldr	r2, [pc, #332]	; (8002958 <HAL_UART_MspInit+0x178>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d15d      	bne.n	80028cc <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002810:	2340      	movs	r3, #64	; 0x40
 8002812:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002814:	2300      	movs	r3, #0
 8002816:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002818:	f107 0320 	add.w	r3, r7, #32
 800281c:	4618      	mov	r0, r3
 800281e:	f004 ff33 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002828:	f7ff f904 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800282c:	4b4b      	ldr	r3, [pc, #300]	; (800295c <HAL_UART_MspInit+0x17c>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4a4a      	ldr	r2, [pc, #296]	; (800295c <HAL_UART_MspInit+0x17c>)
 8002832:	f043 0310 	orr.w	r3, r3, #16
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	4b48      	ldr	r3, [pc, #288]	; (800295c <HAL_UART_MspInit+0x17c>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002844:	4b45      	ldr	r3, [pc, #276]	; (800295c <HAL_UART_MspInit+0x17c>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a44      	ldr	r2, [pc, #272]	; (800295c <HAL_UART_MspInit+0x17c>)
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_UART_MspInit+0x17c>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	4b3f      	ldr	r3, [pc, #252]	; (800295c <HAL_UART_MspInit+0x17c>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4a3e      	ldr	r2, [pc, #248]	; (800295c <HAL_UART_MspInit+0x17c>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6313      	str	r3, [r2, #48]	; 0x30
 8002868:	4b3c      	ldr	r3, [pc, #240]	; (800295c <HAL_UART_MspInit+0x17c>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800288c:	2307      	movs	r3, #7
 800288e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002896:	4619      	mov	r1, r3
 8002898:	4831      	ldr	r0, [pc, #196]	; (8002960 <HAL_UART_MspInit+0x180>)
 800289a:	f001 fd6d 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800289e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b8:	2307      	movs	r3, #7
 80028ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4827      	ldr	r0, [pc, #156]	; (8002964 <HAL_UART_MspInit+0x184>)
 80028c6:	f001 fd57 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028ca:	e040      	b.n	800294e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <HAL_UART_MspInit+0x188>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d13b      	bne.n	800294e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028dc:	2300      	movs	r3, #0
 80028de:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e0:	f107 0320 	add.w	r3, r7, #32
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 fecf 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80028f0:	f7ff f8a0 	bl	8001a34 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_UART_MspInit+0x17c>)
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_UART_MspInit+0x17c>)
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_UART_MspInit+0x17c>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_UART_MspInit+0x17c>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_UART_MspInit+0x17c>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_UART_MspInit+0x17c>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002924:	23c0      	movs	r3, #192	; 0xc0
 8002926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800293c:	2308      	movs	r3, #8
 800293e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002942:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002946:	4619      	mov	r1, r3
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <HAL_UART_MspInit+0x18c>)
 800294a:	f001 fd15 	bl	8004378 <HAL_GPIO_Init>
}
 800294e:	bf00      	nop
 8002950:	37b8      	adds	r7, #184	; 0xb8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40011000 	.word	0x40011000
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400
 8002964:	40020000 	.word	0x40020000
 8002968:	40011400 	.word	0x40011400
 800296c:	40020800 	.word	0x40020800

08002970 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_FMC_MspInit+0x100>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d16d      	bne.n	8002a68 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800298c:	4b38      	ldr	r3, [pc, #224]	; (8002a70 <HAL_FMC_MspInit+0x100>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_FMC_MspInit+0x104>)
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	4a37      	ldr	r2, [pc, #220]	; (8002a74 <HAL_FMC_MspInit+0x104>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6393      	str	r3, [r2, #56]	; 0x38
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_FMC_MspInit+0x104>)
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80029aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029ae:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029bc:	230c      	movs	r3, #12
 80029be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	482c      	ldr	r0, [pc, #176]	; (8002a78 <HAL_FMC_MspInit+0x108>)
 80029c6:	f001 fcd7 	bl	8004378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80029ca:	f248 1333 	movw	r3, #33075	; 0x8133
 80029ce:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029dc:	230c      	movs	r3, #12
 80029de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4825      	ldr	r0, [pc, #148]	; (8002a7c <HAL_FMC_MspInit+0x10c>)
 80029e6:	f001 fcc7 	bl	8004378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80029ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029ee:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029fc:	230c      	movs	r3, #12
 80029fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	481e      	ldr	r0, [pc, #120]	; (8002a80 <HAL_FMC_MspInit+0x110>)
 8002a06:	f001 fcb7 	bl	8004378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002a0a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a0e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4817      	ldr	r0, [pc, #92]	; (8002a84 <HAL_FMC_MspInit+0x114>)
 8002a26:	f001 fca7 	bl	8004378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a2a:	2328      	movs	r3, #40	; 0x28
 8002a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4811      	ldr	r0, [pc, #68]	; (8002a88 <HAL_FMC_MspInit+0x118>)
 8002a44:	f001 fc98 	bl	8004378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a48:	2308      	movs	r3, #8
 8002a4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a58:	230c      	movs	r3, #12
 8002a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480a      	ldr	r0, [pc, #40]	; (8002a8c <HAL_FMC_MspInit+0x11c>)
 8002a62:	f001 fc89 	bl	8004378 <HAL_GPIO_Init>
 8002a66:	e000      	b.n	8002a6a <HAL_FMC_MspInit+0xfa>
    return;
 8002a68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000d28 	.word	0x20000d28
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021400 	.word	0x40021400
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40020800 	.word	0x40020800

08002a90 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a98:	f7ff ff6a 	bl	8002970 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <HAL_SAI_MspInit+0xbc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d124      	bne.n	8002b00 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_SAI_MspInit+0xc0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_SAI_MspInit+0xc4>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_SAI_MspInit+0xc4>)
 8002ac4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_SAI_MspInit+0xc4>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_SAI_MspInit+0xc0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <HAL_SAI_MspInit+0xc0>)
 8002ade:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002ae0:	23f0      	movs	r3, #240	; 0xf0
 8002ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002af0:	230a      	movs	r3, #10
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	481c      	ldr	r0, [pc, #112]	; (8002b6c <HAL_SAI_MspInit+0xc8>)
 8002afc:	f001 fc3c 	bl	8004378 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_SAI_MspInit+0xcc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d125      	bne.n	8002b56 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_SAI_MspInit+0xc0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10b      	bne.n	8002b2a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_SAI_MspInit+0xc4>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <HAL_SAI_MspInit+0xc4>)
 8002b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_SAI_MspInit+0xc4>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_SAI_MspInit+0xc0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_SAI_MspInit+0xc0>)
 8002b32:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b46:	230a      	movs	r3, #10
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4808      	ldr	r0, [pc, #32]	; (8002b74 <HAL_SAI_MspInit+0xd0>)
 8002b52:	f001 fc11 	bl	8004378 <HAL_GPIO_Init>

    }
}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40015c04 	.word	0x40015c04
 8002b64:	20000d2c 	.word	0x20000d2c
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40015c24 	.word	0x40015c24
 8002b74:	40021800 	.word	0x40021800

08002b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_InitTick+0xe0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a32      	ldr	r2, [pc, #200]	; (8002c58 <HAL_InitTick+0xe0>)
 8002b8e:	f043 0310 	orr.w	r3, r3, #16
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_InitTick+0xe0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ba0:	f107 0210 	add.w	r2, r7, #16
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fd3a 	bl	8007624 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bba:	f004 fd0b 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	6378      	str	r0, [r7, #52]	; 0x34
 8002bc0:	e004      	b.n	8002bcc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bc2:	f004 fd07 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_InitTick+0xe4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9b      	lsrs	r3, r3, #18
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_InitTick+0xe8>)
 8002bdc:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <HAL_InitTick+0xec>)
 8002bde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_InitTick+0xe8>)
 8002be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_InitTick+0xe8>)
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_InitTick+0xe8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_InitTick+0xe8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_InitTick+0xe8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <HAL_InitTick+0xe8>)
 8002c02:	f007 f9da 	bl	8009fba <HAL_TIM_Base_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11b      	bne.n	8002c4c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c14:	4812      	ldr	r0, [pc, #72]	; (8002c60 <HAL_InitTick+0xe8>)
 8002c16:	f007 fa27 	bl	800a068 <HAL_TIM_Base_Start_IT>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c28:	2036      	movs	r0, #54	; 0x36
 8002c2a:	f000 fc87 	bl	800353c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d808      	bhi.n	8002c46 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c34:	2200      	movs	r2, #0
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	2036      	movs	r0, #54	; 0x36
 8002c3a:	f000 fc63 	bl	8003504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_InitTick+0xf0>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e002      	b.n	8002c4c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3738      	adds	r7, #56	; 0x38
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	20000d30 	.word	0x20000d30
 8002c64:	40001000 	.word	0x40001000
 8002c68:	20000004 	.word	0x20000004

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <TIM6_DAC_IRQHandler+0x10>)
 8002c9e:	f007 fab2 	bl	800a206 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000d30 	.word	0x20000d30

08002cac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <OTG_FS_IRQHandler+0x10>)
 8002cb2:	f001 ffa9 	bl	8004c08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200092d0 	.word	0x200092d0

08002cc0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <LTDC_IRQHandler+0x10>)
 8002cc6:	f003 fc67 	bl	8006598 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200006c0 	.word	0x200006c0

08002cd4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <DMA2D_IRQHandler+0x10>)
 8002cda:	f000 fe85 	bl	80039e8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000528 	.word	0x20000528

08002ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <_sbrk+0x5c>)
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <_sbrk+0x60>)
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <_sbrk+0x64>)
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <_sbrk+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <_sbrk+0x64>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d207      	bcs.n	8002d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d18:	f010 f898 	bl	8012e4c <__errno>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e009      	b.n	8002d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_sbrk+0x64>)
 8002d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20050000 	.word	0x20050000
 8002d48:	00000400 	.word	0x00000400
 8002d4c:	20000d7c 	.word	0x20000d7c
 8002d50:	20009720 	.word	0x20009720

08002d54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <SystemInit+0x20>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <SystemInit+0x20>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d7c:	480d      	ldr	r0, [pc, #52]	; (8002db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d7e:	490e      	ldr	r1, [pc, #56]	; (8002db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d94:	4c0b      	ldr	r4, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002da2:	f7ff ffd7 	bl	8002d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da6:	f010 f857 	bl	8012e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002daa:	f7fd fbe3 	bl	8000574 <main>
  bx  lr    
 8002dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002db0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002dbc:	08013028 	.word	0x08013028
  ldr r2, =_sbss
 8002dc0:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002dc4:	2000971c 	.word	0x2000971c

08002dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC_IRQHandler>

08002dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 fb8d 	bl	80034ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7ff fecf 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dda:	f7fe fe31 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000008 	.word	0x20000008
 8002e08:	20000d80 	.word	0x20000d80

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000d80 	.word	0x20000d80

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e031      	b.n	8002ee6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fe00 	bl	8001a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_ADC_Init+0x84>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f970 	bl	80031a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ed6:	e001      	b.n	8002edc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	ffffeefd 	.word	0xffffeefd

08002ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e136      	b.n	800317e <HAL_ADC_ConfigChannel+0x28a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d93a      	bls.n	8002f96 <HAL_ADC_ConfigChannel+0xa2>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f28:	d035      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68d9      	ldr	r1, [r3, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b1e      	subs	r3, #30
 8002f40:	2207      	movs	r2, #7
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a8d      	ldr	r2, [pc, #564]	; (800318c <HAL_ADC_ConfigChannel+0x298>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68d9      	ldr	r1, [r3, #12]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f6e:	e035      	b.n	8002fdc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68d9      	ldr	r1, [r3, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4403      	add	r3, r0
 8002f88:	3b1e      	subs	r3, #30
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f94:	e022      	b.n	8002fdc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6919      	ldr	r1, [r3, #16]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	2207      	movs	r2, #7
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6919      	ldr	r1, [r3, #16]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4603      	mov	r3, r0
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4403      	add	r3, r0
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d824      	bhi.n	800302e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b05      	subs	r3, #5
 8002ff6:	221f      	movs	r2, #31
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b05      	subs	r3, #5
 8003020:	fa00 f203 	lsl.w	r2, r0, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
 800302c:	e04c      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d824      	bhi.n	8003080 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b23      	subs	r3, #35	; 0x23
 8003048:	221f      	movs	r2, #31
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	400a      	ands	r2, r1
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b23      	subs	r3, #35	; 0x23
 8003072:	fa00 f203 	lsl.w	r2, r0, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
 800307e:	e023      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b41      	subs	r3, #65	; 0x41
 8003092:	221f      	movs	r2, #31
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43da      	mvns	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b41      	subs	r3, #65	; 0x41
 80030bc:	fa00 f203 	lsl.w	r2, r0, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a30      	ldr	r2, [pc, #192]	; (8003190 <HAL_ADC_ConfigChannel+0x29c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10a      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1f4>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80030e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a28      	ldr	r2, [pc, #160]	; (8003190 <HAL_ADC_ConfigChannel+0x29c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10f      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d10b      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a25      	ldr	r2, [pc, #148]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003100:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003104:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003106:	4b23      	ldr	r3, [pc, #140]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a22      	ldr	r2, [pc, #136]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 800310c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003110:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_ADC_ConfigChannel+0x29c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d12b      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x280>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_ADC_ConfigChannel+0x298>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <HAL_ADC_ConfigChannel+0x23a>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b11      	cmp	r3, #17
 800312c:	d122      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800312e:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003134:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003138:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_ADC_ConfigChannel+0x2a0>)
 8003140:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003144:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a10      	ldr	r2, [pc, #64]	; (800318c <HAL_ADC_ConfigChannel+0x298>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d111      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_ADC_ConfigChannel+0x2a4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_ADC_ConfigChannel+0x2a8>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9a      	lsrs	r2, r3, #18
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003166:	e002      	b.n	800316e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	10000012 	.word	0x10000012
 8003190:	40012000 	.word	0x40012000
 8003194:	40012300 	.word	0x40012300
 8003198:	20000000 	.word	0x20000000
 800319c:	431bde83 	.word	0x431bde83

080031a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031a8:	4b78      	ldr	r3, [pc, #480]	; (800338c <ADC_Init+0x1ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a77      	ldr	r2, [pc, #476]	; (800338c <ADC_Init+0x1ec>)
 80031ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031b4:	4b75      	ldr	r3, [pc, #468]	; (800338c <ADC_Init+0x1ec>)
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4973      	ldr	r1, [pc, #460]	; (800338c <ADC_Init+0x1ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	4a58      	ldr	r2, [pc, #352]	; (8003390 <ADC_Init+0x1f0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003242:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e00f      	b.n	800329a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0202 	bic.w	r2, r2, #2
 80032a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	005a      	lsls	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	3b01      	subs	r3, #1
 80032f4:	035a      	lsls	r2, r3, #13
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e007      	b.n	8003310 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	3b01      	subs	r3, #1
 800332c:	051a      	lsls	r2, r3, #20
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003352:	025a      	lsls	r2, r3, #9
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	029a      	lsls	r2, r3, #10
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012300 	.word	0x40012300
 8003390:	0f000001 	.word	0x0f000001

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00
 80033d8:	05fa0000 	.word	0x05fa0000

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff4c 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003516:	f7ff ff61 	bl	80033dc <__NVIC_GetPriorityGrouping>
 800351a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f7ff ffb1 	bl	8003488 <NVIC_EncodePriority>
 8003526:	4602      	mov	r2, r0
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff80 	bl	8003434 <__NVIC_SetPriority>
}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff54 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e054      	b.n	8003614 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7f5b      	ldrb	r3, [r3, #29]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fae2 	bl	8001b44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_CRC_Init+0xc4>)
 8003594:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0218 	bic.w	r2, r2, #24
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	e00c      	b.n	80035c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f834 	bl	8003620 <HAL_CRCEx_Polynomial_Set>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e028      	b.n	8003614 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	795b      	ldrb	r3, [r3, #5]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f04f 32ff 	mov.w	r2, #4294967295
 80035d2:	611a      	str	r2, [r3, #16]
 80035d4:	e004      	b.n	80035e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6912      	ldr	r2, [r2, #16]
 80035de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	04c11db7 	.word	0x04c11db7

08003620 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003630:	231f      	movs	r3, #31
 8003632:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003634:	bf00      	nop
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	613a      	str	r2, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_CRCEx_Polynomial_Set+0x34>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b18      	cmp	r3, #24
 8003658:	d846      	bhi.n	80036e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_CRCEx_Polynomial_Set+0x40>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	080036ef 	.word	0x080036ef
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036e9 	.word	0x080036e9
 800366c:	080036e9 	.word	0x080036e9
 8003670:	080036e9 	.word	0x080036e9
 8003674:	080036e9 	.word	0x080036e9
 8003678:	080036e9 	.word	0x080036e9
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080036dd 	.word	0x080036dd
 8003684:	080036e9 	.word	0x080036e9
 8003688:	080036e9 	.word	0x080036e9
 800368c:	080036e9 	.word	0x080036e9
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036e9 	.word	0x080036e9
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036d1 	.word	0x080036d1
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036e9 	.word	0x080036e9
 80036b0:	080036e9 	.word	0x080036e9
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	080036e9 	.word	0x080036e9
 80036bc:	080036e9 	.word	0x080036e9
 80036c0:	080036c5 	.word	0x080036c5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d913      	bls.n	80036f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036ce:	e010      	b.n	80036f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b07      	cmp	r3, #7
 80036d4:	d90f      	bls.n	80036f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036da:	e00c      	b.n	80036f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	d90b      	bls.n	80036fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80036e6:	e008      	b.n	80036fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	e006      	b.n	80036fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036ee:	bf00      	nop
 80036f0:	e004      	b.n	80036fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 0118 	bic.w	r1, r3, #24
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800371e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e069      	b.n	8003812 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe fa1a 	bl	8001b84 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_DCMI_Init+0xf0>)
 8003772:	400b      	ands	r3, r1
 8003774:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6819      	ldr	r1, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800378a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003796:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037ba:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d112      	bne.n	80037f2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	7f1b      	ldrb	r3, [r3, #28]
 80037d0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7f5b      	ldrb	r3, [r3, #29]
 80037d6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037d8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7f9b      	ldrb	r3, [r3, #30]
 80037de:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80037e0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7fdb      	ldrb	r3, [r3, #31]
 80037e8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80037ee:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037f0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 021e 	orr.w	r2, r2, #30
 8003800:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	ffe0f007 	.word	0xffe0f007

08003820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_DMA_Start_IT+0x26>
 8003842:	2302      	movs	r3, #2
 8003844:	e048      	b.n	80038d8 <HAL_DMA_Start_IT+0xb8>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d137      	bne.n	80038ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f842 	bl	80038f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	223f      	movs	r2, #63	; 0x3f
 800387a:	409a      	lsls	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0216 	orr.w	r2, r2, #22
 800388e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800389e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e005      	b.n	80038d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
 80038d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d108      	bne.n	8003938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003936:	e007      	b.n	8003948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e039      	b.n	80039da <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f9c0 	bl	8001d00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	f023 0107 	bic.w	r1, r3, #7
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_DMA2D_Init+0x90>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68d1      	ldr	r1, [r2, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	ffffc000 	.word	0xffffc000

080039e8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d026      	beq.n	8003a58 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a22:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d026      	beq.n	8003ab0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d021      	beq.n	8003ab0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2220      	movs	r2, #32
 8003a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d026      	beq.n	8003b08 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d021      	beq.n	8003b08 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	f043 0204 	orr.w	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d013      	beq.n	8003b3a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2204      	movs	r2, #4
 8003b32:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f853 	bl	8003be0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d024      	beq.n	8003b8e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01f      	beq.n	8003b8e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2202      	movs	r2, #2
 8003b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01f      	beq.n	8003bd8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f80e 	bl	8003bf4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_DMA2D_ConfigLayer+0x20>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e079      	b.n	8003d1c <HAL_DMA2D_ConfigLayer+0x114>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c52:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c54:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b0a      	cmp	r3, #10
 8003c5c:	d003      	beq.n	8003c66 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b09      	cmp	r3, #9
 8003c64:	d107      	bne.n	8003c76 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e005      	b.n	8003c82 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d120      	bne.n	8003cca <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	ea02 0103 	and.w	r1, r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b0a      	cmp	r3, #10
 8003cb0:	d003      	beq.n	8003cba <HAL_DMA2D_ConfigLayer+0xb2>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	d127      	bne.n	8003d0a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cc8:	e01f      	b.n	8003d0a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	ea02 0103 	and.w	r1, r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b0a      	cmp	r3, #10
 8003cf2:	d003      	beq.n	8003cfc <HAL_DMA2D_ConfigLayer+0xf4>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b09      	cmp	r3, #9
 8003cfa:	d106      	bne.n	8003d0a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d08:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	ff03000f 	.word	0xff03000f

08003d2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06a      	b.n	8003e14 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2223      	movs	r2, #35	; 0x23
 8003d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd fffb 	bl	8001d4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_ETH_Init+0xf0>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a30      	ldr	r2, [pc, #192]	; (8003e1c <HAL_ETH_Init+0xf0>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <HAL_ETH_Init+0xf0>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d6e:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <HAL_ETH_Init+0xf4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_ETH_Init+0xf4>)
 8003d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d78:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_ETH_Init+0xf4>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	4927      	ldr	r1, [pc, #156]	; (8003e20 <HAL_ETH_Init+0xf4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_ETH_Init+0xf4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003da2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da4:	f7ff f832 	bl	8002e0c <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003daa:	e011      	b.n	8003dd0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dac:	f7ff f82e 	bl	8002e0c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dba:	d909      	bls.n	8003dd0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	22e0      	movs	r2, #224	; 0xe0
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e021      	b.n	8003e14 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e4      	bne.n	8003dac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f958 	bl	8004098 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9ff 	bl	80041ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa55 	bl	800429e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f9bd 	bl	800417c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800

08003e24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <ETH_SetMACConfig+0x15c>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	7c1b      	ldrb	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <ETH_SetMACConfig+0x28>
 8003e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e4a:	e000      	b.n	8003e4e <ETH_SetMACConfig+0x2a>
 8003e4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	7c5b      	ldrb	r3, [r3, #17]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <ETH_SetMACConfig+0x38>
 8003e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e5a:	e000      	b.n	8003e5e <ETH_SetMACConfig+0x3a>
 8003e5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	7fdb      	ldrb	r3, [r3, #31]
 8003e6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003e6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	7f92      	ldrb	r2, [r2, #30]
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d102      	bne.n	8003e82 <ETH_SetMACConfig+0x5e>
 8003e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e80:	e000      	b.n	8003e84 <ETH_SetMACConfig+0x60>
 8003e82:	2200      	movs	r2, #0
                        macconf->Speed |
 8003e84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	7f1b      	ldrb	r3, [r3, #28]
 8003e8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003e8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003e92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	d102      	bne.n	8003eac <ETH_SetMACConfig+0x88>
 8003ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eaa:	e000      	b.n	8003eae <ETH_SetMACConfig+0x8a>
 8003eac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003eae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	7bdb      	ldrb	r3, [r3, #15]
 8003eb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003eb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ebc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f7fe ffa0 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d101      	bne.n	8003f12 <ETH_SetMACConfig+0xee>
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	e000      	b.n	8003f14 <ETH_SetMACConfig+0xf0>
 8003f12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003f22:	2a01      	cmp	r2, #1
 8003f24:	d101      	bne.n	8003f2a <ETH_SetMACConfig+0x106>
 8003f26:	2208      	movs	r2, #8
 8003f28:	e000      	b.n	8003f2c <ETH_SetMACConfig+0x108>
 8003f2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003f34:	2a01      	cmp	r2, #1
 8003f36:	d101      	bne.n	8003f3c <ETH_SetMACConfig+0x118>
 8003f38:	2204      	movs	r2, #4
 8003f3a:	e000      	b.n	8003f3e <ETH_SetMACConfig+0x11a>
 8003f3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003f46:	2a01      	cmp	r2, #1
 8003f48:	d101      	bne.n	8003f4e <ETH_SetMACConfig+0x12a>
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	e000      	b.n	8003f50 <ETH_SetMACConfig+0x12c>
 8003f4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f50:	4313      	orrs	r3, r2
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7fe ff5b 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	619a      	str	r2, [r3, #24]
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	ff20810f 	.word	0xff20810f

08003f84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <ETH_SetDMAConfig+0x110>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	7b1b      	ldrb	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <ETH_SetDMAConfig+0x2c>
 8003faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fae:	e000      	b.n	8003fb2 <ETH_SetDMAConfig+0x2e>
 8003fb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	7b5b      	ldrb	r3, [r3, #13]
 8003fb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003fb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	7f52      	ldrb	r2, [r2, #29]
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	d102      	bne.n	8003fc8 <ETH_SetDMAConfig+0x44>
 8003fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fc6:	e000      	b.n	8003fca <ETH_SetDMAConfig+0x46>
 8003fc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003fca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	7b9b      	ldrb	r3, [r3, #14]
 8003fd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003fd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003fd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	7f1b      	ldrb	r3, [r3, #28]
 8003fde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003fe0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	7f9b      	ldrb	r3, [r3, #30]
 8003fe6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003fe8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004008:	461a      	mov	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800401a:	2001      	movs	r0, #1
 800401c:	f7fe ff02 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004028:	461a      	mov	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	791b      	ldrb	r3, [r3, #4]
 8004032:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004038:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800403e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004044:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800404c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800404e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004056:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800405c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800406a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004078:	2001      	movs	r0, #1
 800407a:	f7fe fed3 	bl	8002e24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	f8de3f23 	.word	0xf8de3f23

08004098 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b0a6      	sub	sp, #152	; 0x98
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80040ac:	2300      	movs	r3, #0
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040d4:	2300      	movs	r3, #0
 80040d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80040fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004106:	2300      	movs	r3, #0
 8004108:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800410c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004110:	4619      	mov	r1, r3
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fe86 	bl	8003e24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004118:	2301      	movs	r3, #1
 800411a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800411c:	2301      	movs	r3, #1
 800411e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004126:	2301      	movs	r3, #1
 8004128:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800413a:	2300      	movs	r3, #0
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004144:	2301      	movs	r3, #1
 8004146:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800414c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800414e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004152:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004158:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004160:	2300      	movs	r3, #0
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ff08 	bl	8003f84 <ETH_SetDMAConfig>
}
 8004174:	bf00      	nop
 8004176:	3798      	adds	r7, #152	; 0x98
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3305      	adds	r3, #5
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	3204      	adds	r2, #4
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <ETH_MACAddressConfig+0x68>)
 800419e:	4413      	add	r3, r2
 80041a0:	461a      	mov	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3303      	adds	r3, #3
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	061a      	lsls	r2, r3, #24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3302      	adds	r3, #2
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3301      	adds	r3, #1
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	4313      	orrs	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <ETH_MACAddressConfig+0x6c>)
 80041ce:	4413      	add	r3, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40028040 	.word	0x40028040
 80041e8:	40028044 	.word	0x40028044

080041ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e03e      	b.n	8004278 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68d9      	ldr	r1, [r3, #12]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2200      	movs	r2, #0
 8004216:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2200      	movs	r2, #0
 8004222:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	3206      	adds	r2, #6
 800422c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d80c      	bhi.n	800425c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	461a      	mov	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e004      	b.n	8004266 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d9bd      	bls.n	80041fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	611a      	str	r2, [r3, #16]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e046      	b.n	800433a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6919      	ldr	r1, [r3, #16]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	440b      	add	r3, r1
 80042bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2200      	movs	r2, #0
 80042da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80042f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	3212      	adds	r2, #18
 8004306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d80c      	bhi.n	800432a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6919      	ldr	r1, [r3, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e004      	b.n	8004334 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	461a      	mov	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d9b5      	bls.n	80042ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436a:	60da      	str	r2, [r3, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e175      	b.n	8004684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004398:	2201      	movs	r2, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f040 8164 	bne.w	800467e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d005      	beq.n	80043ce <HAL_GPIO_Init+0x56>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d130      	bne.n	8004430 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	2203      	movs	r2, #3
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004404:	2201      	movs	r2, #1
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 0201 	and.w	r2, r3, #1
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	2b03      	cmp	r3, #3
 800443a:	d017      	beq.n	800446c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d123      	bne.n	80044c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	08da      	lsrs	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3208      	adds	r2, #8
 8004480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	220f      	movs	r2, #15
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	08da      	lsrs	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3208      	adds	r2, #8
 80044ba:	69b9      	ldr	r1, [r7, #24]
 80044bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0203 	and.w	r2, r3, #3
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80be 	beq.w	800467e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004502:	4b66      	ldr	r3, [pc, #408]	; (800469c <HAL_GPIO_Init+0x324>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	4a65      	ldr	r2, [pc, #404]	; (800469c <HAL_GPIO_Init+0x324>)
 8004508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800450c:	6453      	str	r3, [r2, #68]	; 0x44
 800450e:	4b63      	ldr	r3, [pc, #396]	; (800469c <HAL_GPIO_Init+0x324>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800451a:	4a61      	ldr	r2, [pc, #388]	; (80046a0 <HAL_GPIO_Init+0x328>)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	3302      	adds	r3, #2
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_GPIO_Init+0x32c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d037      	beq.n	80045b6 <HAL_GPIO_Init+0x23e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a57      	ldr	r2, [pc, #348]	; (80046a8 <HAL_GPIO_Init+0x330>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d031      	beq.n	80045b2 <HAL_GPIO_Init+0x23a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a56      	ldr	r2, [pc, #344]	; (80046ac <HAL_GPIO_Init+0x334>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d02b      	beq.n	80045ae <HAL_GPIO_Init+0x236>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a55      	ldr	r2, [pc, #340]	; (80046b0 <HAL_GPIO_Init+0x338>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d025      	beq.n	80045aa <HAL_GPIO_Init+0x232>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a54      	ldr	r2, [pc, #336]	; (80046b4 <HAL_GPIO_Init+0x33c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01f      	beq.n	80045a6 <HAL_GPIO_Init+0x22e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a53      	ldr	r2, [pc, #332]	; (80046b8 <HAL_GPIO_Init+0x340>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d019      	beq.n	80045a2 <HAL_GPIO_Init+0x22a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a52      	ldr	r2, [pc, #328]	; (80046bc <HAL_GPIO_Init+0x344>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_GPIO_Init+0x226>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a51      	ldr	r2, [pc, #324]	; (80046c0 <HAL_GPIO_Init+0x348>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00d      	beq.n	800459a <HAL_GPIO_Init+0x222>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a50      	ldr	r2, [pc, #320]	; (80046c4 <HAL_GPIO_Init+0x34c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <HAL_GPIO_Init+0x21e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a4f      	ldr	r2, [pc, #316]	; (80046c8 <HAL_GPIO_Init+0x350>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_GPIO_Init+0x21a>
 800458e:	2309      	movs	r3, #9
 8004590:	e012      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 8004592:	230a      	movs	r3, #10
 8004594:	e010      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 8004596:	2308      	movs	r3, #8
 8004598:	e00e      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 800459a:	2307      	movs	r3, #7
 800459c:	e00c      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 800459e:	2306      	movs	r3, #6
 80045a0:	e00a      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 80045a2:	2305      	movs	r3, #5
 80045a4:	e008      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 80045a6:	2304      	movs	r3, #4
 80045a8:	e006      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 80045aa:	2303      	movs	r3, #3
 80045ac:	e004      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e002      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_GPIO_Init+0x240>
 80045b6:	2300      	movs	r3, #0
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	f002 0203 	and.w	r2, r2, #3
 80045be:	0092      	lsls	r2, r2, #2
 80045c0:	4093      	lsls	r3, r2
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045c8:	4935      	ldr	r1, [pc, #212]	; (80046a0 <HAL_GPIO_Init+0x328>)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	089b      	lsrs	r3, r3, #2
 80045ce:	3302      	adds	r3, #2
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045d6:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <HAL_GPIO_Init+0x354>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045fa:	4a34      	ldr	r2, [pc, #208]	; (80046cc <HAL_GPIO_Init+0x354>)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004600:	4b32      	ldr	r3, [pc, #200]	; (80046cc <HAL_GPIO_Init+0x354>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004624:	4a29      	ldr	r2, [pc, #164]	; (80046cc <HAL_GPIO_Init+0x354>)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_GPIO_Init+0x354>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800464e:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_GPIO_Init+0x354>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_GPIO_Init+0x354>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <HAL_GPIO_Init+0x354>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3301      	adds	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b0f      	cmp	r3, #15
 8004688:	f67f ae86 	bls.w	8004398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	40013800 	.word	0x40013800
 80046a4:	40020000 	.word	0x40020000
 80046a8:	40020400 	.word	0x40020400
 80046ac:	40020800 	.word	0x40020800
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40021400 	.word	0x40021400
 80046bc:	40021800 	.word	0x40021800
 80046c0:	40021c00 	.word	0x40021c00
 80046c4:	40022000 	.word	0x40022000
 80046c8:	40022400 	.word	0x40022400
 80046cc:	40013c00 	.word	0x40013c00

080046d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e001      	b.n	80046f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	807b      	strh	r3, [r7, #2]
 800470c:	4613      	mov	r3, r2
 800470e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004710:	787b      	ldrb	r3, [r7, #1]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004716:	887a      	ldrh	r2, [r7, #2]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800471c:	e003      	b.n	8004726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	041a      	lsls	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	619a      	str	r2, [r3, #24]
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004734:	b08f      	sub	sp, #60	; 0x3c
 8004736:	af0a      	add	r7, sp, #40	; 0x28
 8004738:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e054      	b.n	80047ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f00d fffe 	bl	8012760 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f008 f80d 	bl	800c7a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	687e      	ldr	r6, [r7, #4]
 8004790:	466d      	mov	r5, sp
 8004792:	f106 0410 	add.w	r4, r6, #16
 8004796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800479a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800479c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800479e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80047a6:	1d33      	adds	r3, r6, #4
 80047a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047aa:	6838      	ldr	r0, [r7, #0]
 80047ac:	f007 ff90 	bl	800c6d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f008 f804 	bl	800c7c4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	687e      	ldr	r6, [r7, #4]
 80047c4:	466d      	mov	r5, sp
 80047c6:	f106 0410 	add.w	r4, r6, #16
 80047ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80047da:	1d33      	adds	r3, r6, #4
 80047dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047de:	6838      	ldr	r0, [r7, #0]
 80047e0:	f008 f9ac 	bl	800cb3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047f6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80047f6:	b590      	push	{r4, r7, lr}
 80047f8:	b089      	sub	sp, #36	; 0x24
 80047fa:	af04      	add	r7, sp, #16
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	4608      	mov	r0, r1
 8004800:	4611      	mov	r1, r2
 8004802:	461a      	mov	r2, r3
 8004804:	4603      	mov	r3, r0
 8004806:	70fb      	strb	r3, [r7, #3]
 8004808:	460b      	mov	r3, r1
 800480a:	70bb      	strb	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_HCD_HC_Init+0x28>
 800481a:	2302      	movs	r3, #2
 800481c:	e076      	b.n	800490c <HAL_HCD_HC_Init+0x116>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	333d      	adds	r3, #61	; 0x3d
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3338      	adds	r3, #56	; 0x38
 8004846:	787a      	ldrb	r2, [r7, #1]
 8004848:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	212c      	movs	r1, #44	; 0x2c
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	3340      	adds	r3, #64	; 0x40
 8004858:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800485a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3339      	adds	r3, #57	; 0x39
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	212c      	movs	r1, #44	; 0x2c
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	333f      	adds	r3, #63	; 0x3f
 800487c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004880:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	78ba      	ldrb	r2, [r7, #2]
 8004886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800488a:	b2d0      	uxtb	r0, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	333a      	adds	r3, #58	; 0x3a
 8004898:	4602      	mov	r2, r0
 800489a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800489c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da09      	bge.n	80048b8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	333b      	adds	r3, #59	; 0x3b
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e008      	b.n	80048ca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	212c      	movs	r1, #44	; 0x2c
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	333b      	adds	r3, #59	; 0x3b
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	212c      	movs	r1, #44	; 0x2c
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	4413      	add	r3, r2
 80048d6:	333c      	adds	r3, #60	; 0x3c
 80048d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80048dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	787c      	ldrb	r4, [r7, #1]
 80048e4:	78ba      	ldrb	r2, [r7, #2]
 80048e6:	78f9      	ldrb	r1, [r7, #3]
 80048e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4623      	mov	r3, r4
 80048fa:	f008 fa99 	bl	800ce30 <USB_HC_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}

08004914 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_HCD_HC_Halt+0x1e>
 800492e:	2302      	movs	r3, #2
 8004930:	e00f      	b.n	8004952 <HAL_HCD_HC_Halt+0x3e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f008 fce9 	bl	800d31a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	70fb      	strb	r3, [r7, #3]
 800496e:	460b      	mov	r3, r1
 8004970:	70bb      	strb	r3, [r7, #2]
 8004972:	4613      	mov	r3, r2
 8004974:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	333b      	adds	r3, #59	; 0x3b
 8004984:	78ba      	ldrb	r2, [r7, #2]
 8004986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	333f      	adds	r3, #63	; 0x3f
 8004996:	787a      	ldrb	r2, [r7, #1]
 8004998:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800499a:	7c3b      	ldrb	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d112      	bne.n	80049c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3342      	adds	r3, #66	; 0x42
 80049ae:	2203      	movs	r2, #3
 80049b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	333d      	adds	r3, #61	; 0x3d
 80049c0:	7f3a      	ldrb	r2, [r7, #28]
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e008      	b.n	80049d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	3342      	adds	r3, #66	; 0x42
 80049d4:	2202      	movs	r2, #2
 80049d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80049d8:	787b      	ldrb	r3, [r7, #1]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	f200 80c6 	bhi.w	8004b6c <HAL_HCD_HC_SubmitRequest+0x210>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004b59 	.word	0x08004b59
 80049f0:	08004a5d 	.word	0x08004a5d
 80049f4:	08004adb 	.word	0x08004adb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80049f8:	7c3b      	ldrb	r3, [r7, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f040 80b8 	bne.w	8004b70 <HAL_HCD_HC_SubmitRequest+0x214>
 8004a00:	78bb      	ldrb	r3, [r7, #2]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 80b4 	bne.w	8004b70 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004a08:	8b3b      	ldrh	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3355      	adds	r3, #85	; 0x55
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3355      	adds	r3, #85	; 0x55
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	3342      	adds	r3, #66	; 0x42
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a46:	e093      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3342      	adds	r3, #66	; 0x42
 8004a56:	2202      	movs	r2, #2
 8004a58:	701a      	strb	r2, [r3, #0]
      break;
 8004a5a:	e089      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a5c:	78bb      	ldrb	r3, [r7, #2]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3355      	adds	r3, #85	; 0x55
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3342      	adds	r3, #66	; 0x42
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a88:	e073      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	212c      	movs	r1, #44	; 0x2c
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	3342      	adds	r3, #66	; 0x42
 8004a98:	2202      	movs	r2, #2
 8004a9a:	701a      	strb	r2, [r3, #0]
      break;
 8004a9c:	e069      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	212c      	movs	r1, #44	; 0x2c
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3354      	adds	r3, #84	; 0x54
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3342      	adds	r3, #66	; 0x42
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
      break;
 8004ac4:	e055      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	212c      	movs	r1, #44	; 0x2c
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3342      	adds	r3, #66	; 0x42
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	701a      	strb	r2, [r3, #0]
      break;
 8004ad8:	e04b      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004ada:	78bb      	ldrb	r3, [r7, #2]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11d      	bne.n	8004b1c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3355      	adds	r3, #85	; 0x55
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3342      	adds	r3, #66	; 0x42
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b06:	e034      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3342      	adds	r3, #66	; 0x42
 8004b16:	2202      	movs	r2, #2
 8004b18:	701a      	strb	r2, [r3, #0]
      break;
 8004b1a:	e02a      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3354      	adds	r3, #84	; 0x54
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3342      	adds	r3, #66	; 0x42
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
      break;
 8004b42:	e016      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	212c      	movs	r1, #44	; 0x2c
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3342      	adds	r3, #66	; 0x42
 8004b52:	2202      	movs	r2, #2
 8004b54:	701a      	strb	r2, [r3, #0]
      break;
 8004b56:	e00c      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3342      	adds	r3, #66	; 0x42
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b6c:	bf00      	nop
 8004b6e:	e000      	b.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b70:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	212c      	movs	r1, #44	; 0x2c
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3344      	adds	r3, #68	; 0x44
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	8b3a      	ldrh	r2, [r7, #24]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	202c      	movs	r0, #44	; 0x2c
 8004b8c:	fb00 f303 	mul.w	r3, r0, r3
 8004b90:	440b      	add	r3, r1
 8004b92:	334c      	adds	r3, #76	; 0x4c
 8004b94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3360      	adds	r3, #96	; 0x60
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	212c      	movs	r1, #44	; 0x2c
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3350      	adds	r3, #80	; 0x50
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3339      	adds	r3, #57	; 0x39
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3361      	adds	r3, #97	; 0x61
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	222c      	movs	r2, #44	; 0x2c
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	3338      	adds	r3, #56	; 0x38
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	18d1      	adds	r1, r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f008 fa3c 	bl	800d074 <USB_HC_StartXfer>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop

08004c08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f007 ff4a 	bl	800cab8 <USB_GetMode>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 80f6 	bne.w	8004e18 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f007 ff0d 	bl	800ca50 <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80ec 	beq.w	8004e16 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f007 ff04 	bl	800ca50 <USB_ReadInterrupts>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c52:	d104      	bne.n	8004c5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f007 fef4 	bl	800ca50 <USB_ReadInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c72:	d104      	bne.n	8004c7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f007 fee4 	bl	800ca50 <USB_ReadInterrupts>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c92:	d104      	bne.n	8004c9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f007 fed4 	bl	800ca50 <USB_ReadInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d103      	bne.n	8004cba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f007 fec6 	bl	800ca50 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cce:	d11c      	bne.n	8004d0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004cd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004cea:	2110      	movs	r1, #16
 8004cec:	6938      	ldr	r0, [r7, #16]
 8004cee:	f007 fdb5 	bl	800c85c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004cf2:	6938      	ldr	r0, [r7, #16]
 8004cf4:	f007 fde6 	bl	800c8c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f007 ffd0 	bl	800cca4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f00d fd9d 	bl	8012844 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f007 fe9e 	bl	800ca50 <USB_ReadInterrupts>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d1e:	d102      	bne.n	8004d26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 f9ce 	bl	80060c2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f007 fe90 	bl	800ca50 <USB_ReadInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d106      	bne.n	8004d48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f00d fd66 	bl	801280c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2208      	movs	r2, #8
 8004d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f007 fe7f 	bl	800ca50 <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d101      	bne.n	8004d60 <HAL_HCD_IRQHandler+0x158>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_HCD_IRQHandler+0x15a>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0210 	bic.w	r2, r2, #16
 8004d74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 f8d1 	bl	8005f1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0210 	orr.w	r2, r2, #16
 8004d8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f007 fe5d 	bl	800ca50 <USB_ReadInterrupts>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da0:	d13a      	bne.n	8004e18 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f008 faa6 	bl	800d2f8 <USB_HC_ReadInterrupt>
 8004dac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e025      	b.n	8004e00 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d018      	beq.n	8004dfa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dde:	d106      	bne.n	8004dee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8ab 	bl	8004f42 <HCD_HC_IN_IRQHandler>
 8004dec:	e005      	b.n	8004dfa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fcc6 	bl	8005786 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3d4      	bcc.n	8004db4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e12:	615a      	str	r2, [r3, #20]
 8004e14:	e000      	b.n	8004e18 <HAL_HCD_IRQHandler+0x210>
      return;
 8004e16:	bf00      	nop
    }
  }
}
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_HCD_Start+0x16>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e013      	b.n	8004e5c <HAL_HCD_Start+0x3e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2101      	movs	r1, #1
 8004e42:	4618      	mov	r0, r3
 8004e44:	f007 ff92 	bl	800cd6c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f007 fc97 	bl	800c780 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_HCD_Stop+0x16>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e00d      	b.n	8004e96 <HAL_HCD_Stop+0x32>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f008 fb80 	bl	800d58c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f007 ff34 	bl	800cd18 <USB_ResetPort>
 8004eb0:	4603      	mov	r3, r0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	212c      	movs	r1, #44	; 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3360      	adds	r3, #96	; 0x60
 8004ed4:	781b      	ldrb	r3, [r3, #0]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3350      	adds	r3, #80	; 0x50
 8004efc:	681b      	ldr	r3, [r3, #0]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f007 ff78 	bl	800ce0c <USB_GetCurrentFrame>
 8004f1c:	4603      	mov	r3, r0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f007 ff53 	bl	800cdde <USB_GetHostSpeed>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f007 fd85 	bl	800ca76 <USB_ReadChInterrupts>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d11a      	bne.n	8004fac <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	2304      	movs	r3, #4
 8004f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3361      	adds	r3, #97	; 0x61
 8004f96:	2207      	movs	r2, #7
 8004f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f008 f9b8 	bl	800d31a <USB_HC_Halt>
 8004faa:	e0a2      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f007 fd5d 	bl	800ca76 <USB_ReadChInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc6:	d11b      	bne.n	8005000 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	212c      	movs	r1, #44	; 0x2c
 8004fe2:	fb01 f303 	mul.w	r3, r1, r3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3361      	adds	r3, #97	; 0x61
 8004fea:	2208      	movs	r2, #8
 8004fec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f008 f98e 	bl	800d31a <USB_HC_Halt>
 8004ffe:	e078      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f007 fd33 	bl	800ca76 <USB_ReadChInterrupts>
 8005010:	4603      	mov	r3, r0
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b08      	cmp	r3, #8
 8005018:	d11a      	bne.n	8005050 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	461a      	mov	r2, r3
 8005028:	2308      	movs	r3, #8
 800502a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3361      	adds	r3, #97	; 0x61
 800503a:	2206      	movs	r2, #6
 800503c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f008 f966 	bl	800d31a <USB_HC_Halt>
 800504e:	e050      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f007 fd0b 	bl	800ca76 <USB_ReadChInterrupts>
 8005060:	4603      	mov	r3, r0
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506a:	d11b      	bne.n	80050a4 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	461a      	mov	r2, r3
 800507a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	212c      	movs	r1, #44	; 0x2c
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	4413      	add	r3, r2
 800508c:	3361      	adds	r3, #97	; 0x61
 800508e:	2209      	movs	r2, #9
 8005090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f008 f93c 	bl	800d31a <USB_HC_Halt>
 80050a2:	e026      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f007 fce1 	bl	800ca76 <USB_ReadChInterrupts>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d119      	bne.n	80050f2 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	461a      	mov	r2, r3
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	212c      	movs	r1, #44	; 0x2c
 80050d6:	fb01 f303 	mul.w	r3, r1, r3
 80050da:	4413      	add	r3, r2
 80050dc:	3361      	adds	r3, #97	; 0x61
 80050de:	2207      	movs	r2, #7
 80050e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f008 f914 	bl	800d31a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	4611      	mov	r1, r2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f007 fcba 	bl	800ca76 <USB_ReadChInterrupts>
 8005102:	4603      	mov	r3, r0
 8005104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510c:	d112      	bne.n	8005134 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f008 f8fe 	bl	800d31a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	461a      	mov	r2, r3
 800512c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	e325      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f007 fc99 	bl	800ca76 <USB_ReadChInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	f040 80e8 	bne.w	8005320 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	461a      	mov	r2, r3
 800515e:	2320      	movs	r3, #32
 8005160:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d019      	beq.n	800519e <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	3348      	adds	r3, #72	; 0x48
 8005178:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	0159      	lsls	r1, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	440b      	add	r3, r1
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800518c:	1ad2      	subs	r2, r2, r3
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	202c      	movs	r0, #44	; 0x2c
 8005194:	fb00 f303 	mul.w	r3, r0, r3
 8005198:	440b      	add	r3, r1
 800519a:	3350      	adds	r3, #80	; 0x50
 800519c:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	212c      	movs	r1, #44	; 0x2c
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	3361      	adds	r3, #97	; 0x61
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	335c      	adds	r3, #92	; 0x5c
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	461a      	mov	r2, r3
 80051d0:	2301      	movs	r3, #1
 80051d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	333f      	adds	r3, #63	; 0x3f
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	333f      	adds	r3, #63	; 0x3f
 80051f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d111      	bne.n	8005220 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f008 f887 	bl	800d31a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005218:	461a      	mov	r2, r3
 800521a:	2310      	movs	r3, #16
 800521c:	6093      	str	r3, [r2, #8]
 800521e:	e03a      	b.n	8005296 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	333f      	adds	r3, #63	; 0x3f
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d009      	beq.n	8005248 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	333f      	adds	r3, #63	; 0x3f
 8005242:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005244:	2b01      	cmp	r3, #1
 8005246:	d126      	bne.n	8005296 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005266:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	212c      	movs	r1, #44	; 0x2c
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	4413      	add	r3, r2
 8005274:	3360      	adds	r3, #96	; 0x60
 8005276:	2201      	movs	r2, #1
 8005278:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	b2d9      	uxtb	r1, r3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	202c      	movs	r0, #44	; 0x2c
 8005284:	fb00 f303 	mul.w	r3, r0, r3
 8005288:	4413      	add	r3, r2
 800528a:	3360      	adds	r3, #96	; 0x60
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f00d fae5 	bl	8012860 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d12b      	bne.n	80052f6 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	212c      	movs	r1, #44	; 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	3348      	adds	r3, #72	; 0x48
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	202c      	movs	r0, #44	; 0x2c
 80052b4:	fb00 f202 	mul.w	r2, r0, r2
 80052b8:	440a      	add	r2, r1
 80052ba:	3240      	adds	r2, #64	; 0x40
 80052bc:	8812      	ldrh	r2, [r2, #0]
 80052be:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 825a 	beq.w	8005780 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	212c      	movs	r1, #44	; 0x2c
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	3354      	adds	r3, #84	; 0x54
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f083 0301 	eor.w	r3, r3, #1
 80052e0:	b2d8      	uxtb	r0, r3
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	212c      	movs	r1, #44	; 0x2c
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	3354      	adds	r3, #84	; 0x54
 80052f0:	4602      	mov	r2, r0
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e244      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	212c      	movs	r1, #44	; 0x2c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f083 0301 	eor.w	r3, r3, #1
 800530a:	b2d8      	uxtb	r0, r3
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	3354      	adds	r3, #84	; 0x54
 800531a:	4602      	mov	r2, r0
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e22f      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f007 fba3 	bl	800ca76 <USB_ReadChInterrupts>
 8005330:	4603      	mov	r3, r0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b20      	cmp	r3, #32
 8005338:	d109      	bne.n	800534e <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	461a      	mov	r2, r3
 8005348:	2320      	movs	r3, #32
 800534a:	6093      	str	r3, [r2, #8]
 800534c:	e218      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f007 fb8c 	bl	800ca76 <USB_ReadChInterrupts>
 800535e:	4603      	mov	r3, r0
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	f040 816b 	bne.w	8005640 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	461a      	mov	r2, r3
 8005378:	2302      	movs	r3, #2
 800537a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3361      	adds	r3, #97	; 0x61
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d112      	bne.n	80053b6 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	212c      	movs	r1, #44	; 0x2c
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	3361      	adds	r3, #97	; 0x61
 800539e:	2202      	movs	r2, #2
 80053a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	212c      	movs	r1, #44	; 0x2c
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	3360      	adds	r3, #96	; 0x60
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e135      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	212c      	movs	r1, #44	; 0x2c
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	3361      	adds	r3, #97	; 0x61
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d112      	bne.n	80053f0 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	212c      	movs	r1, #44	; 0x2c
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	4413      	add	r3, r2
 80053d6:	3361      	adds	r3, #97	; 0x61
 80053d8:	2202      	movs	r2, #2
 80053da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	3360      	adds	r3, #96	; 0x60
 80053ea:	2205      	movs	r2, #5
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e118      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	3361      	adds	r3, #97	; 0x61
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b07      	cmp	r3, #7
 8005402:	d009      	beq.n	8005418 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	212c      	movs	r1, #44	; 0x2c
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	3361      	adds	r3, #97	; 0x61
 8005412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005414:	2b09      	cmp	r3, #9
 8005416:	d159      	bne.n	80054cc <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	212c      	movs	r1, #44	; 0x2c
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	3361      	adds	r3, #97	; 0x61
 8005426:	2202      	movs	r2, #2
 8005428:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	212c      	movs	r1, #44	; 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	335c      	adds	r3, #92	; 0x5c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	202c      	movs	r0, #44	; 0x2c
 8005442:	fb00 f303 	mul.w	r3, r0, r3
 8005446:	440b      	add	r3, r1
 8005448:	335c      	adds	r3, #92	; 0x5c
 800544a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	212c      	movs	r1, #44	; 0x2c
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	4413      	add	r3, r2
 8005458:	335c      	adds	r3, #92	; 0x5c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d912      	bls.n	8005486 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	212c      	movs	r1, #44	; 0x2c
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	335c      	adds	r3, #92	; 0x5c
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	212c      	movs	r1, #44	; 0x2c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	3360      	adds	r3, #96	; 0x60
 8005480:	2204      	movs	r2, #4
 8005482:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005484:	e0cd      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	212c      	movs	r1, #44	; 0x2c
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	3360      	adds	r3, #96	; 0x60
 8005494:	2202      	movs	r2, #2
 8005496:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054ae:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054b6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054ca:	e0aa      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3361      	adds	r3, #97	; 0x61
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d109      	bne.n	80054f4 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3361      	adds	r3, #97	; 0x61
 80054ee:	2202      	movs	r2, #2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e096      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3361      	adds	r3, #97	; 0x61
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d109      	bne.n	800551c <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3361      	adds	r3, #97	; 0x61
 8005516:	2202      	movs	r2, #2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	e082      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	212c      	movs	r1, #44	; 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	3361      	adds	r3, #97	; 0x61
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b04      	cmp	r3, #4
 800552e:	d13f      	bne.n	80055b0 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	212c      	movs	r1, #44	; 0x2c
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	3361      	adds	r3, #97	; 0x61
 800553e:	2202      	movs	r2, #2
 8005540:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	212c      	movs	r1, #44	; 0x2c
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	3360      	adds	r3, #96	; 0x60
 8005550:	2202      	movs	r2, #2
 8005552:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	212c      	movs	r1, #44	; 0x2c
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	4413      	add	r3, r2
 8005560:	333f      	adds	r3, #63	; 0x3f
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	212c      	movs	r1, #44	; 0x2c
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	333f      	adds	r3, #63	; 0x3f
 8005576:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005578:	2b02      	cmp	r3, #2
 800557a:	d152      	bne.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005592:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800559a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e038      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3361      	adds	r3, #97	; 0x61
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d123      	bne.n	800560c <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	212c      	movs	r1, #44	; 0x2c
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	3361      	adds	r3, #97	; 0x61
 80055d2:	2202      	movs	r2, #2
 80055d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	335c      	adds	r3, #92	; 0x5c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	202c      	movs	r0, #44	; 0x2c
 80055ee:	fb00 f303 	mul.w	r3, r0, r3
 80055f2:	440b      	add	r3, r1
 80055f4:	335c      	adds	r3, #92	; 0x5c
 80055f6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	212c      	movs	r1, #44	; 0x2c
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	4413      	add	r3, r2
 8005604:	3360      	adds	r3, #96	; 0x60
 8005606:	2204      	movs	r2, #4
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e00a      	b.n	8005622 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	212c      	movs	r1, #44	; 0x2c
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	3361      	adds	r3, #97	; 0x61
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b02      	cmp	r3, #2
 800561e:	f000 80ae 	beq.w	800577e <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	b2d9      	uxtb	r1, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	202c      	movs	r0, #44	; 0x2c
 800562c:	fb00 f303 	mul.w	r3, r0, r3
 8005630:	4413      	add	r3, r2
 8005632:	3360      	adds	r3, #96	; 0x60
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f00d f911 	bl	8012860 <HAL_HCD_HC_NotifyURBChange_Callback>
 800563e:	e09f      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f007 fa13 	bl	800ca76 <USB_ReadChInterrupts>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d123      	bne.n	80056a2 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	461a      	mov	r2, r3
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	3361      	adds	r3, #97	; 0x61
 800567a:	2205      	movs	r2, #5
 800567c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	212c      	movs	r1, #44	; 0x2c
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	4413      	add	r3, r2
 800568a:	335c      	adds	r3, #92	; 0x5c
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f007 fe3d 	bl	800d31a <USB_HC_Halt>
 80056a0:	e06e      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f007 f9e2 	bl	800ca76 <USB_ReadChInterrupts>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d161      	bne.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	212c      	movs	r1, #44	; 0x2c
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	333f      	adds	r3, #63	; 0x3f
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d11a      	bne.n	8005706 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	212c      	movs	r1, #44	; 0x2c
 80056d6:	fb01 f303 	mul.w	r3, r1, r3
 80056da:	4413      	add	r3, r2
 80056dc:	335c      	adds	r3, #92	; 0x5c
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	212c      	movs	r1, #44	; 0x2c
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	3361      	adds	r3, #97	; 0x61
 80056f0:	2204      	movs	r2, #4
 80056f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f007 fe0b 	bl	800d31a <USB_HC_Halt>
 8005704:	e031      	b.n	800576a <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	333f      	adds	r3, #63	; 0x3f
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	212c      	movs	r1, #44	; 0x2c
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	333f      	adds	r3, #63	; 0x3f
 8005728:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800572a:	2b02      	cmp	r3, #2
 800572c:	d11d      	bne.n	800576a <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	212c      	movs	r1, #44	; 0x2c
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	335c      	adds	r3, #92	; 0x5c
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d110      	bne.n	800576a <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	212c      	movs	r1, #44	; 0x2c
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	4413      	add	r3, r2
 8005754:	3361      	adds	r3, #97	; 0x61
 8005756:	2204      	movs	r2, #4
 8005758:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f007 fdd8 	bl	800d31a <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	461a      	mov	r2, r3
 8005778:	2310      	movs	r3, #16
 800577a:	6093      	str	r3, [r2, #8]
 800577c:	e000      	b.n	8005780 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800577e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f007 f963 	bl	800ca76 <USB_ReadChInterrupts>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d11a      	bne.n	80057f0 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	461a      	mov	r2, r3
 80057c8:	2304      	movs	r3, #4
 80057ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	212c      	movs	r1, #44	; 0x2c
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	4413      	add	r3, r2
 80057d8:	3361      	adds	r3, #97	; 0x61
 80057da:	2207      	movs	r2, #7
 80057dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f007 fd96 	bl	800d31a <USB_HC_Halt>
 80057ee:	e393      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f007 f93b 	bl	800ca76 <USB_ReadChInterrupts>
 8005800:	4603      	mov	r3, r0
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b20      	cmp	r3, #32
 8005808:	d137      	bne.n	800587a <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	461a      	mov	r2, r3
 8005818:	2320      	movs	r3, #32
 800581a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	212c      	movs	r1, #44	; 0x2c
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	4413      	add	r3, r2
 8005828:	333d      	adds	r3, #61	; 0x3d
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	f040 8373 	bne.w	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	212c      	movs	r1, #44	; 0x2c
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	333d      	adds	r3, #61	; 0x3d
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	212c      	movs	r1, #44	; 0x2c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	3360      	adds	r3, #96	; 0x60
 8005852:	2202      	movs	r2, #2
 8005854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	212c      	movs	r1, #44	; 0x2c
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	3361      	adds	r3, #97	; 0x61
 8005864:	2203      	movs	r2, #3
 8005866:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f007 fd51 	bl	800d31a <USB_HC_Halt>
 8005878:	e34e      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f007 f8f6 	bl	800ca76 <USB_ReadChInterrupts>
 800588a:	4603      	mov	r3, r0
 800588c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005894:	d112      	bne.n	80058bc <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a2:	461a      	mov	r2, r3
 80058a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	4611      	mov	r1, r2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f007 fd30 	bl	800d31a <USB_HC_Halt>
 80058ba:	e32d      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f007 f8d5 	bl	800ca76 <USB_ReadChInterrupts>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d142      	bne.n	800595c <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	212c      	movs	r1, #44	; 0x2c
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	335c      	adds	r3, #92	; 0x5c
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f007 f8bf 	bl	800ca76 <USB_ReadChInterrupts>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d111      	bne.n	8005926 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	212c      	movs	r1, #44	; 0x2c
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	4413      	add	r3, r2
 800590e:	333d      	adds	r3, #61	; 0x3d
 8005910:	2201      	movs	r2, #1
 8005912:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	461a      	mov	r2, r3
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	2301      	movs	r3, #1
 8005936:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	212c      	movs	r1, #44	; 0x2c
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	3361      	adds	r3, #97	; 0x61
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f007 fce0 	bl	800d31a <USB_HC_Halt>
 800595a:	e2dd      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f007 f885 	bl	800ca76 <USB_ReadChInterrupts>
 800596c:	4603      	mov	r3, r0
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d12c      	bne.n	80059d0 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	212c      	movs	r1, #44	; 0x2c
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	3361      	adds	r3, #97	; 0x61
 8005984:	2205      	movs	r2, #5
 8005986:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	212c      	movs	r1, #44	; 0x2c
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	4413      	add	r3, r2
 8005994:	333d      	adds	r3, #61	; 0x3d
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	212c      	movs	r1, #44	; 0x2c
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	335c      	adds	r3, #92	; 0x5c
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	4611      	mov	r1, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f007 fcaf 	bl	800d31a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	461a      	mov	r2, r3
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	6093      	str	r3, [r2, #8]
 80059ce:	e2a3      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f007 f84b 	bl	800ca76 <USB_ReadChInterrupts>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d11a      	bne.n	8005a20 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f6:	461a      	mov	r2, r3
 80059f8:	2308      	movs	r3, #8
 80059fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3361      	adds	r3, #97	; 0x61
 8005a0a:	2206      	movs	r2, #6
 8005a0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f007 fc7e 	bl	800d31a <USB_HC_Halt>
 8005a1e:	e27b      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	4611      	mov	r1, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f007 f823 	bl	800ca76 <USB_ReadChInterrupts>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b10      	cmp	r3, #16
 8005a38:	d140      	bne.n	8005abc <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	212c      	movs	r1, #44	; 0x2c
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	335c      	adds	r3, #92	; 0x5c
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	212c      	movs	r1, #44	; 0x2c
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	3361      	adds	r3, #97	; 0x61
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	212c      	movs	r1, #44	; 0x2c
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	333d      	adds	r3, #61	; 0x3d
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d112      	bne.n	8005a98 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	212c      	movs	r1, #44	; 0x2c
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	333c      	adds	r3, #60	; 0x3c
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d108      	bne.n	8005a98 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	212c      	movs	r1, #44	; 0x2c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	333d      	adds	r3, #61	; 0x3d
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f007 fc39 	bl	800d31a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2310      	movs	r3, #16
 8005ab8:	6093      	str	r3, [r2, #8]
 8005aba:	e22d      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f006 ffd5 	bl	800ca76 <USB_ReadChInterrupts>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d164      	bne.n	8005ba0 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d111      	bne.n	8005b02 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	212c      	movs	r1, #44	; 0x2c
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	4413      	add	r3, r2
 8005aea:	3361      	adds	r3, #97	; 0x61
 8005aec:	2207      	movs	r2, #7
 8005aee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f007 fc0d 	bl	800d31a <USB_HC_Halt>
 8005b00:	e044      	b.n	8005b8c <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	212c      	movs	r1, #44	; 0x2c
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	335c      	adds	r3, #92	; 0x5c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	202c      	movs	r0, #44	; 0x2c
 8005b1a:	fb00 f303 	mul.w	r3, r0, r3
 8005b1e:	440b      	add	r3, r1
 8005b20:	335c      	adds	r3, #92	; 0x5c
 8005b22:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	212c      	movs	r1, #44	; 0x2c
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	335c      	adds	r3, #92	; 0x5c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d920      	bls.n	8005b7a <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	212c      	movs	r1, #44	; 0x2c
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	4413      	add	r3, r2
 8005b44:	335c      	adds	r3, #92	; 0x5c
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	212c      	movs	r1, #44	; 0x2c
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	3360      	adds	r3, #96	; 0x60
 8005b58:	2204      	movs	r2, #4
 8005b5a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	b2d9      	uxtb	r1, r3
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	202c      	movs	r0, #44	; 0x2c
 8005b66:	fb00 f303 	mul.w	r3, r0, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3360      	adds	r3, #96	; 0x60
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f00c fe74 	bl	8012860 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b78:	e008      	b.n	8005b8c <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	212c      	movs	r1, #44	; 0x2c
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	4413      	add	r3, r2
 8005b86:	3360      	adds	r3, #96	; 0x60
 8005b88:	2202      	movs	r2, #2
 8005b8a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	6093      	str	r3, [r2, #8]
 8005b9e:	e1bb      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f006 ff63 	bl	800ca76 <USB_ReadChInterrupts>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d11b      	bne.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	212c      	movs	r1, #44	; 0x2c
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3361      	adds	r3, #97	; 0x61
 8005bca:	2209      	movs	r2, #9
 8005bcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f007 fb9e 	bl	800d31a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	461a      	mov	r2, r3
 8005bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf0:	6093      	str	r3, [r2, #8]
 8005bf2:	e191      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f006 ff39 	bl	800ca76 <USB_ReadChInterrupts>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	f040 8184 	bne.w	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2302      	movs	r3, #2
 8005c20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	212c      	movs	r1, #44	; 0x2c
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3361      	adds	r3, #97	; 0x61
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	f040 8087 	bne.w	8005d46 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	212c      	movs	r1, #44	; 0x2c
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	3361      	adds	r3, #97	; 0x61
 8005c46:	2202      	movs	r2, #2
 8005c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	212c      	movs	r1, #44	; 0x2c
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	3360      	adds	r3, #96	; 0x60
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	212c      	movs	r1, #44	; 0x2c
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	333f      	adds	r3, #63	; 0x3f
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d00a      	beq.n	8005c86 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	212c      	movs	r1, #44	; 0x2c
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	333f      	adds	r3, #63	; 0x3f
 8005c7e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	f040 8139 	bne.w	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d113      	bne.n	8005cb6 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	212c      	movs	r1, #44	; 0x2c
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	3355      	adds	r3, #85	; 0x55
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f083 0301 	eor.w	r3, r3, #1
 8005ca2:	b2d8      	uxtb	r0, r3
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	212c      	movs	r1, #44	; 0x2c
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	3355      	adds	r3, #85	; 0x55
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	f040 811c 	bne.w	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	212c      	movs	r1, #44	; 0x2c
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	334c      	adds	r3, #76	; 0x4c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8111 	beq.w	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	212c      	movs	r1, #44	; 0x2c
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	334c      	adds	r3, #76	; 0x4c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	202c      	movs	r0, #44	; 0x2c
 8005cec:	fb00 f202 	mul.w	r2, r0, r2
 8005cf0:	440a      	add	r2, r1
 8005cf2:	3240      	adds	r2, #64	; 0x40
 8005cf4:	8812      	ldrh	r2, [r2, #0]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	202c      	movs	r0, #44	; 0x2c
 8005d00:	fb00 f202 	mul.w	r2, r0, r2
 8005d04:	440a      	add	r2, r1
 8005d06:	3240      	adds	r2, #64	; 0x40
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80ee 	beq.w	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	212c      	movs	r1, #44	; 0x2c
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	3355      	adds	r3, #85	; 0x55
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f083 0301 	eor.w	r3, r3, #1
 8005d30:	b2d8      	uxtb	r0, r3
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	212c      	movs	r1, #44	; 0x2c
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3355      	adds	r3, #85	; 0x55
 8005d40:	4602      	mov	r2, r0
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	e0d8      	b.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	212c      	movs	r1, #44	; 0x2c
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	3361      	adds	r3, #97	; 0x61
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d109      	bne.n	8005d6e <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	212c      	movs	r1, #44	; 0x2c
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	3361      	adds	r3, #97	; 0x61
 8005d68:	2202      	movs	r2, #2
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	e0c4      	b.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	212c      	movs	r1, #44	; 0x2c
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3361      	adds	r3, #97	; 0x61
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d112      	bne.n	8005da8 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	212c      	movs	r1, #44	; 0x2c
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3361      	adds	r3, #97	; 0x61
 8005d90:	2202      	movs	r2, #2
 8005d92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	212c      	movs	r1, #44	; 0x2c
 8005d9a:	fb01 f303 	mul.w	r3, r1, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	3360      	adds	r3, #96	; 0x60
 8005da2:	2202      	movs	r2, #2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e0a7      	b.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	212c      	movs	r1, #44	; 0x2c
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	3361      	adds	r3, #97	; 0x61
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d112      	bne.n	8005de2 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	212c      	movs	r1, #44	; 0x2c
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3361      	adds	r3, #97	; 0x61
 8005dca:	2202      	movs	r2, #2
 8005dcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	212c      	movs	r1, #44	; 0x2c
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	4413      	add	r3, r2
 8005dda:	3360      	adds	r3, #96	; 0x60
 8005ddc:	2202      	movs	r2, #2
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e08a      	b.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	212c      	movs	r1, #44	; 0x2c
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	3361      	adds	r3, #97	; 0x61
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b06      	cmp	r3, #6
 8005df4:	d112      	bne.n	8005e1c <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	212c      	movs	r1, #44	; 0x2c
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	3361      	adds	r3, #97	; 0x61
 8005e04:	2202      	movs	r2, #2
 8005e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	212c      	movs	r1, #44	; 0x2c
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	3360      	adds	r3, #96	; 0x60
 8005e16:	2205      	movs	r2, #5
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e06d      	b.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	3361      	adds	r3, #97	; 0x61
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	d009      	beq.n	8005e44 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3361      	adds	r3, #97	; 0x61
 8005e3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d168      	bne.n	8005f16 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	212c      	movs	r1, #44	; 0x2c
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	3361      	adds	r3, #97	; 0x61
 8005e52:	2202      	movs	r2, #2
 8005e54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	212c      	movs	r1, #44	; 0x2c
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	4413      	add	r3, r2
 8005e62:	335c      	adds	r3, #92	; 0x5c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	202c      	movs	r0, #44	; 0x2c
 8005e6e:	fb00 f303 	mul.w	r3, r0, r3
 8005e72:	440b      	add	r3, r1
 8005e74:	335c      	adds	r3, #92	; 0x5c
 8005e76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	212c      	movs	r1, #44	; 0x2c
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	335c      	adds	r3, #92	; 0x5c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d912      	bls.n	8005eb2 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	335c      	adds	r3, #92	; 0x5c
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	212c      	movs	r1, #44	; 0x2c
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3360      	adds	r3, #96	; 0x60
 8005eac:	2204      	movs	r2, #4
 8005eae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005eb0:	e021      	b.n	8005ef6 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	212c      	movs	r1, #44	; 0x2c
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3360      	adds	r3, #96	; 0x60
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eda:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ee2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ef6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	b2d9      	uxtb	r1, r3
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	202c      	movs	r0, #44	; 0x2c
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	3360      	adds	r3, #96	; 0x60
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f00c fca6 	bl	8012860 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f14:	e000      	b.n	8005f18 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8005f16:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b08a      	sub	sp, #40	; 0x28
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	0c5b      	lsrs	r3, r3, #17
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d004      	beq.n	8005f64 <HCD_RXQLVL_IRQHandler+0x46>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	f000 80a9 	beq.w	80060b4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f62:	e0aa      	b.n	80060ba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80a6 	beq.w	80060b8 <HCD_RXQLVL_IRQHandler+0x19a>
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	212c      	movs	r1, #44	; 0x2c
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	3344      	adds	r3, #68	; 0x44
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 809b 	beq.w	80060b8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	212c      	movs	r1, #44	; 0x2c
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3350      	adds	r3, #80	; 0x50
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	441a      	add	r2, r3
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	202c      	movs	r0, #44	; 0x2c
 8005f9c:	fb00 f303 	mul.w	r3, r0, r3
 8005fa0:	440b      	add	r3, r1
 8005fa2:	334c      	adds	r3, #76	; 0x4c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d87a      	bhi.n	80060a0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	3344      	adds	r3, #68	; 0x44
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f006 fcec 	bl	800c9a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	212c      	movs	r1, #44	; 0x2c
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3344      	adds	r3, #68	; 0x44
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	441a      	add	r2, r3
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	202c      	movs	r0, #44	; 0x2c
 8005fe2:	fb00 f303 	mul.w	r3, r0, r3
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3344      	adds	r3, #68	; 0x44
 8005fea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	212c      	movs	r1, #44	; 0x2c
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3350      	adds	r3, #80	; 0x50
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	441a      	add	r2, r3
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	202c      	movs	r0, #44	; 0x2c
 8006006:	fb00 f303 	mul.w	r3, r0, r3
 800600a:	440b      	add	r3, r1
 800600c:	3350      	adds	r3, #80	; 0x50
 800600e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	0cdb      	lsrs	r3, r3, #19
 8006020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006024:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	212c      	movs	r1, #44	; 0x2c
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	3340      	adds	r3, #64	; 0x40
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4293      	cmp	r3, r2
 800603c:	d13c      	bne.n	80060b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d039      	beq.n	80060b8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800605a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006062:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	4413      	add	r3, r2
 800606c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	212c      	movs	r1, #44	; 0x2c
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	3354      	adds	r3, #84	; 0x54
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f083 0301 	eor.w	r3, r3, #1
 800608a:	b2d8      	uxtb	r0, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	212c      	movs	r1, #44	; 0x2c
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	4413      	add	r3, r2
 8006098:	3354      	adds	r3, #84	; 0x54
 800609a:	4602      	mov	r2, r0
 800609c:	701a      	strb	r2, [r3, #0]
      break;
 800609e:	e00b      	b.n	80060b8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	212c      	movs	r1, #44	; 0x2c
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	3360      	adds	r3, #96	; 0x60
 80060ae:	2204      	movs	r2, #4
 80060b0:	701a      	strb	r2, [r3, #0]
      break;
 80060b2:	e001      	b.n	80060b8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80060b4:	bf00      	nop
 80060b6:	e000      	b.n	80060ba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80060b8:	bf00      	nop
  }
}
 80060ba:	bf00      	nop
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060ee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d10b      	bne.n	8006112 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d102      	bne.n	800610a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f00c fb8f 	bl	8012828 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b08      	cmp	r3, #8
 800611a:	d132      	bne.n	8006182 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f043 0308 	orr.w	r3, r3, #8
 8006122:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d126      	bne.n	800617c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d113      	bne.n	800615e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800613c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006140:	d106      	bne.n	8006150 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2102      	movs	r1, #2
 8006148:	4618      	mov	r0, r3
 800614a:	f006 fdab 	bl	800cca4 <USB_InitFSLSPClkSel>
 800614e:	e011      	b.n	8006174 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2101      	movs	r1, #1
 8006156:	4618      	mov	r0, r3
 8006158:	f006 fda4 	bl	800cca4 <USB_InitFSLSPClkSel>
 800615c:	e00a      	b.n	8006174 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d106      	bne.n	8006174 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616c:	461a      	mov	r2, r3
 800616e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006172:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f00c fb85 	bl	8012884 <HAL_HCD_PortEnabled_Callback>
 800617a:	e002      	b.n	8006182 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f00c fb8f 	bl	80128a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d103      	bne.n	8006194 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f043 0320 	orr.w	r3, r3, #32
 8006192:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6013      	str	r3, [r2, #0]
}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e07f      	b.n	80062ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fe54 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006208:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d107      	bne.n	8006222 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	e006      	b.n	8006230 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800622e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d104      	bne.n	8006242 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <HAL_I2C_Init+0x11c>)
 800624e:	430b      	orrs	r3, r1
 8006250:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006260:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1a      	ldr	r2, [r3, #32]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	02008000 	.word	0x02008000

080062c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d138      	bne.n	8006350 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e032      	b.n	8006352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800631a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	d139      	bne.n	80063e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800637e:	2302      	movs	r3, #2
 8006380:	e033      	b.n	80063ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2224      	movs	r2, #36	; 0x24
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0bf      	b.n	800658a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fb fdd4 	bl	8001fcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800643a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6999      	ldr	r1, [r3, #24]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006450:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6899      	ldr	r1, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b4a      	ldr	r3, [pc, #296]	; (8006594 <HAL_LTDC_Init+0x19c>)
 800646c:	400b      	ands	r3, r1
 800646e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	041b      	lsls	r3, r3, #16
 8006476:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6899      	ldr	r1, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68d9      	ldr	r1, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <HAL_LTDC_Init+0x19c>)
 800649a:	400b      	ands	r3, r1
 800649c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68d9      	ldr	r1, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1a      	ldr	r2, [r3, #32]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6919      	ldr	r1, [r3, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b33      	ldr	r3, [pc, #204]	; (8006594 <HAL_LTDC_Init+0x19c>)
 80064c8:	400b      	ands	r3, r1
 80064ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6919      	ldr	r1, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6959      	ldr	r1, [r3, #20]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b27      	ldr	r3, [pc, #156]	; (8006594 <HAL_LTDC_Init+0x19c>)
 80064f6:	400b      	ands	r3, r1
 80064f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6959      	ldr	r1, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0206 	orr.w	r2, r2, #6
 8006566:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	f000f800 	.word	0xf000f800

08006598 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d023      	beq.n	8006602 <HAL_LTDC_IRQHandler+0x6a>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01e      	beq.n	8006602 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0204 	bic.w	r2, r2, #4
 80065d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2204      	movs	r2, #4
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2204      	movs	r2, #4
 80065f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f86f 	bl	80066e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d023      	beq.n	8006654 <HAL_LTDC_IRQHandler+0xbc>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01e      	beq.n	8006654 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0202 	bic.w	r2, r2, #2
 8006624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2202      	movs	r2, #2
 800662c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006634:	f043 0202 	orr.w	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f846 	bl	80066e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01b      	beq.n	8006696 <HAL_LTDC_IRQHandler+0xfe>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d016      	beq.n	8006696 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2201      	movs	r2, #1
 800667e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f82f 	bl	80066f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <HAL_LTDC_IRQHandler+0x140>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0208 	bic.w	r2, r2, #8
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2208      	movs	r2, #8
 80066c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f818 	bl	8006708 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800671c:	b5b0      	push	{r4, r5, r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_LTDC_ConfigLayer+0x1a>
 8006732:	2302      	movs	r3, #2
 8006734:	e02c      	b.n	8006790 <HAL_LTDC_ConfigLayer+0x74>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2134      	movs	r1, #52	; 0x34
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4614      	mov	r4, r2
 800675a:	461d      	mov	r5, r3
 800675c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800675e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f811 	bl	8006798 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2201      	movs	r2, #1
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bdb0      	pop	{r4, r5, r7, pc}

08006798 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006798:	b480      	push	{r7}
 800679a:	b089      	sub	sp, #36	; 0x24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b4:	4413      	add	r3, r2
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	01db      	lsls	r3, r3, #7
 80067c4:	4413      	add	r3, r2
 80067c6:	3384      	adds	r3, #132	; 0x84
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	4611      	mov	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	01d2      	lsls	r2, r2, #7
 80067d4:	440a      	add	r2, r1
 80067d6:	3284      	adds	r2, #132	; 0x84
 80067d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80067dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80067f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	01db      	lsls	r3, r3, #7
 80067fc:	440b      	add	r3, r1
 80067fe:	3384      	adds	r3, #132	; 0x84
 8006800:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006806:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006816:	4413      	add	r3, r2
 8006818:	041b      	lsls	r3, r3, #16
 800681a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	01db      	lsls	r3, r3, #7
 8006826:	4413      	add	r3, r2
 8006828:	3384      	adds	r3, #132	; 0x84
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	4611      	mov	r1, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	01d2      	lsls	r2, r2, #7
 8006836:	440a      	add	r2, r1
 8006838:	3284      	adds	r2, #132	; 0x84
 800683a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800683e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684e:	4413      	add	r3, r2
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	01db      	lsls	r3, r3, #7
 800685c:	440b      	add	r3, r1
 800685e:	3384      	adds	r3, #132	; 0x84
 8006860:	4619      	mov	r1, r3
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4313      	orrs	r3, r2
 8006866:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	01db      	lsls	r3, r3, #7
 8006872:	4413      	add	r3, r2
 8006874:	3384      	adds	r3, #132	; 0x84
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	4611      	mov	r1, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	01d2      	lsls	r2, r2, #7
 8006882:	440a      	add	r2, r1
 8006884:	3284      	adds	r2, #132	; 0x84
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	01db      	lsls	r3, r3, #7
 8006896:	4413      	add	r3, r2
 8006898:	3384      	adds	r3, #132	; 0x84
 800689a:	461a      	mov	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	061b      	lsls	r3, r3, #24
 80068bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	01db      	lsls	r3, r3, #7
 80068c8:	4413      	add	r3, r2
 80068ca:	3384      	adds	r3, #132	; 0x84
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	01db      	lsls	r3, r3, #7
 80068d8:	4413      	add	r3, r2
 80068da:	3384      	adds	r3, #132	; 0x84
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068e8:	461a      	mov	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	431a      	orrs	r2, r3
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4619      	mov	r1, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	01db      	lsls	r3, r3, #7
 80068fc:	440b      	add	r3, r1
 80068fe:	3384      	adds	r3, #132	; 0x84
 8006900:	4619      	mov	r1, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	01db      	lsls	r3, r3, #7
 8006912:	4413      	add	r3, r2
 8006914:	3384      	adds	r3, #132	; 0x84
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	4611      	mov	r1, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	01d2      	lsls	r2, r2, #7
 8006922:	440a      	add	r2, r1
 8006924:	3284      	adds	r2, #132	; 0x84
 8006926:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800692a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	01db      	lsls	r3, r3, #7
 8006936:	4413      	add	r3, r2
 8006938:	3384      	adds	r3, #132	; 0x84
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	01db      	lsls	r3, r3, #7
 800694c:	4413      	add	r3, r2
 800694e:	3384      	adds	r3, #132	; 0x84
 8006950:	69da      	ldr	r2, [r3, #28]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	01db      	lsls	r3, r3, #7
 800695c:	440b      	add	r3, r1
 800695e:	3384      	adds	r3, #132	; 0x84
 8006960:	4619      	mov	r1, r3
 8006962:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <LTDC_SetConfig+0x32c>)
 8006964:	4013      	ands	r3, r2
 8006966:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	68f9      	ldr	r1, [r7, #12]
 8006972:	6809      	ldr	r1, [r1, #0]
 8006974:	4608      	mov	r0, r1
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	01c9      	lsls	r1, r1, #7
 800697a:	4401      	add	r1, r0
 800697c:	3184      	adds	r1, #132	; 0x84
 800697e:	4313      	orrs	r3, r2
 8006980:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	01db      	lsls	r3, r3, #7
 800698c:	4413      	add	r3, r2
 800698e:	3384      	adds	r3, #132	; 0x84
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	01db      	lsls	r3, r3, #7
 800699c:	4413      	add	r3, r2
 800699e:	3384      	adds	r3, #132	; 0x84
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	01db      	lsls	r3, r3, #7
 80069b0:	4413      	add	r3, r2
 80069b2:	3384      	adds	r3, #132	; 0x84
 80069b4:	461a      	mov	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80069c4:	2304      	movs	r3, #4
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e01b      	b.n	8006a02 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d102      	bne.n	80069d8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80069d2:	2303      	movs	r3, #3
 80069d4:	61fb      	str	r3, [r7, #28]
 80069d6:	e014      	b.n	8006a02 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d00b      	beq.n	80069f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d007      	beq.n	80069f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d003      	beq.n	80069f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80069f4:	2b07      	cmp	r3, #7
 80069f6:	d102      	bne.n	80069fe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80069f8:	2302      	movs	r3, #2
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	e001      	b.n	8006a02 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80069fe:	2301      	movs	r3, #1
 8006a00:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3384      	adds	r3, #132	; 0x84
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	4611      	mov	r1, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	01d2      	lsls	r2, r2, #7
 8006a1c:	440a      	add	r2, r1
 8006a1e:	3284      	adds	r2, #132	; 0x84
 8006a20:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006a24:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	1acb      	subs	r3, r1, r3
 8006a3c:	69f9      	ldr	r1, [r7, #28]
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006a44:	68f9      	ldr	r1, [r7, #12]
 8006a46:	6809      	ldr	r1, [r1, #0]
 8006a48:	4608      	mov	r0, r1
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	01c9      	lsls	r1, r1, #7
 8006a4e:	4401      	add	r1, r0
 8006a50:	3184      	adds	r1, #132	; 0x84
 8006a52:	4313      	orrs	r3, r2
 8006a54:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	01db      	lsls	r3, r3, #7
 8006a60:	4413      	add	r3, r2
 8006a62:	3384      	adds	r3, #132	; 0x84
 8006a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	01db      	lsls	r3, r3, #7
 8006a70:	440b      	add	r3, r1
 8006a72:	3384      	adds	r3, #132	; 0x84
 8006a74:	4619      	mov	r1, r3
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <LTDC_SetConfig+0x330>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	01db      	lsls	r3, r3, #7
 8006a86:	4413      	add	r3, r2
 8006a88:	3384      	adds	r3, #132	; 0x84
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	01db      	lsls	r3, r3, #7
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3384      	adds	r3, #132	; 0x84
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	01d2      	lsls	r2, r2, #7
 8006aac:	440a      	add	r2, r1
 8006aae:	3284      	adds	r2, #132	; 0x84
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6013      	str	r3, [r2, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	3724      	adds	r7, #36	; 0x24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	fffff8f8 	.word	0xfffff8f8
 8006ac8:	fffff800 	.word	0xfffff800

08006acc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a04      	ldr	r2, [pc, #16]	; (8006ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ada:	6013      	str	r3, [r2, #0]
}
 8006adc:	bf00      	nop
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40007000 	.word	0x40007000

08006aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006af6:	4b23      	ldr	r3, [pc, #140]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	4a22      	ldr	r2, [pc, #136]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8006afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b00:	6413      	str	r3, [r2, #64]	; 0x40
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1d      	ldr	r2, [pc, #116]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b1a:	f7fc f977 	bl	8002e0c <HAL_GetTick>
 8006b1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b20:	e009      	b.n	8006b36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b22:	f7fc f973 	bl	8002e0c <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b30:	d901      	bls.n	8006b36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e022      	b.n	8006b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b42:	d1ee      	bne.n	8006b22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b44:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a0f      	ldr	r2, [pc, #60]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b50:	f7fc f95c 	bl	8002e0c <HAL_GetTick>
 8006b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b56:	e009      	b.n	8006b6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b58:	f7fc f958 	bl	8002e0c <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b66:	d901      	bls.n	8006b6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e007      	b.n	8006b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b78:	d1ee      	bne.n	8006b58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40023800 	.word	0x40023800
 8006b88:	40007000 	.word	0x40007000

08006b8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b94:	f7fc f93a 	bl	8002e0c <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e067      	b.n	8006c74 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10b      	bne.n	8006bc8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fb facf 	bl	800215c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006bbe:	f241 3188 	movw	r1, #5000	; 0x1388
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f85e 	bl	8006c84 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	021a      	lsls	r2, r3, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2120      	movs	r1, #32
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f856 	bl	8006ca0 <QSPI_WaitFlagStateUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006bf8:	7afb      	ldrb	r3, [r7, #11]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d135      	bne.n	8006c6a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <HAL_QSPI_Init+0xf0>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6852      	ldr	r2, [r2, #4]
 8006c0c:	0611      	lsls	r1, r2, #24
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68d2      	ldr	r2, [r2, #12]
 8006c12:	4311      	orrs	r1, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	69d2      	ldr	r2, [r2, #28]
 8006c18:	4311      	orrs	r1, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6a12      	ldr	r2, [r2, #32]
 8006c1e:	4311      	orrs	r1, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <HAL_QSPI_Init+0xf4>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6912      	ldr	r2, [r2, #16]
 8006c36:	0411      	lsls	r1, r2, #16
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6952      	ldr	r2, [r2, #20]
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6992      	ldr	r2, [r2, #24]
 8006c42:	4311      	orrs	r1, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006c72:	7afb      	ldrb	r3, [r7, #11]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	00ffff2f 	.word	0x00ffff2f
 8006c80:	ffe0f8fe 	.word	0xffe0f8fe

08006c84 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006cb0:	e01a      	b.n	8006ce8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d016      	beq.n	8006ce8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cba:	f7fc f8a7 	bl	8002e0c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cdc:	f043 0201 	orr.w	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e00e      	b.n	8006d06 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bf14      	ite	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	2300      	moveq	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d1d6      	bne.n	8006cb2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e291      	b.n	800724a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8087 	beq.w	8006e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d34:	4b96      	ldr	r3, [pc, #600]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d00c      	beq.n	8006d5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d40:	4b93      	ldr	r3, [pc, #588]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d112      	bne.n	8006d72 <HAL_RCC_OscConfig+0x62>
 8006d4c:	4b90      	ldr	r3, [pc, #576]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d58:	d10b      	bne.n	8006d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5a:	4b8d      	ldr	r3, [pc, #564]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d06c      	beq.n	8006e40 <HAL_RCC_OscConfig+0x130>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d168      	bne.n	8006e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e26b      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x7a>
 8006d7c:	4b84      	ldr	r3, [pc, #528]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a83      	ldr	r2, [pc, #524]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e02e      	b.n	8006de8 <HAL_RCC_OscConfig+0xd8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x9c>
 8006d92:	4b7f      	ldr	r3, [pc, #508]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a7e      	ldr	r2, [pc, #504]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4b7c      	ldr	r3, [pc, #496]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a7b      	ldr	r2, [pc, #492]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e01d      	b.n	8006de8 <HAL_RCC_OscConfig+0xd8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0xc0>
 8006db6:	4b76      	ldr	r3, [pc, #472]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a75      	ldr	r2, [pc, #468]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b73      	ldr	r3, [pc, #460]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a72      	ldr	r2, [pc, #456]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0xd8>
 8006dd0:	4b6f      	ldr	r3, [pc, #444]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a6e      	ldr	r2, [pc, #440]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	4b6c      	ldr	r3, [pc, #432]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a6b      	ldr	r2, [pc, #428]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d013      	beq.n	8006e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fc f80c 	bl	8002e0c <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df8:	f7fc f808 	bl	8002e0c <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	; 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e21f      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0a:	4b61      	ldr	r3, [pc, #388]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0xe8>
 8006e16:	e014      	b.n	8006e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fb fff8 	bl	8002e0c <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e20:	f7fb fff4 	bl	8002e0c <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	; 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e20b      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e32:	4b57      	ldr	r3, [pc, #348]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0x110>
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d069      	beq.n	8006f22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e4e:	4b50      	ldr	r3, [pc, #320]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e5a:	4b4d      	ldr	r3, [pc, #308]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d11c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x190>
 8006e66:	4b4a      	ldr	r3, [pc, #296]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d116      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e72:	4b47      	ldr	r3, [pc, #284]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_RCC_OscConfig+0x17a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e1df      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e8a:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	493d      	ldr	r1, [pc, #244]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9e:	e040      	b.n	8006f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d023      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea8:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a38      	ldr	r2, [pc, #224]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fb ffaa 	bl	8002e0c <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ebc:	f7fb ffa6 	bl	8002e0c <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e1bd      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ece:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eda:	4b2d      	ldr	r3, [pc, #180]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4929      	ldr	r1, [pc, #164]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]
 8006eee:	e018      	b.n	8006f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fb ff86 	bl	8002e0c <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fb ff82 	bl	8002e0c <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e199      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d038      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d019      	beq.n	8006f6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f36:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f3a:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f42:	f7fb ff63 	bl	8002e0c <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4a:	f7fb ff5f 	bl	8002e0c <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e176      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x23a>
 8006f68:	e01a      	b.n	8006fa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f76:	f7fb ff49 	bl	8002e0c <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7e:	f7fb ff45 	bl	8002e0c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d903      	bls.n	8006f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e15c      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
 8006f90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f94:	4b91      	ldr	r3, [pc, #580]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80a4 	beq.w	80070f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fae:	4b8b      	ldr	r3, [pc, #556]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10d      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	4b88      	ldr	r3, [pc, #544]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	4a87      	ldr	r2, [pc, #540]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fc6:	4b85      	ldr	r3, [pc, #532]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fd6:	4b82      	ldr	r3, [pc, #520]	; (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d118      	bne.n	8007014 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006fe2:	4b7f      	ldr	r3, [pc, #508]	; (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7e      	ldr	r2, [pc, #504]	; (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fee:	f7fb ff0d 	bl	8002e0c <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff6:	f7fb ff09 	bl	8002e0c <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b64      	cmp	r3, #100	; 0x64
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e120      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007008:	4b75      	ldr	r3, [pc, #468]	; (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d106      	bne.n	800702a <HAL_RCC_OscConfig+0x31a>
 800701c:	4b6f      	ldr	r3, [pc, #444]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a6e      	ldr	r2, [pc, #440]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	e02d      	b.n	8007086 <HAL_RCC_OscConfig+0x376>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <HAL_RCC_OscConfig+0x33c>
 8007032:	4b6a      	ldr	r3, [pc, #424]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	4a69      	ldr	r2, [pc, #420]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6713      	str	r3, [r2, #112]	; 0x70
 800703e:	4b67      	ldr	r3, [pc, #412]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	4a66      	ldr	r2, [pc, #408]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	; 0x70
 800704a:	e01c      	b.n	8007086 <HAL_RCC_OscConfig+0x376>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b05      	cmp	r3, #5
 8007052:	d10c      	bne.n	800706e <HAL_RCC_OscConfig+0x35e>
 8007054:	4b61      	ldr	r3, [pc, #388]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	4a60      	ldr	r2, [pc, #384]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	6713      	str	r3, [r2, #112]	; 0x70
 8007060:	4b5e      	ldr	r3, [pc, #376]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	4a5d      	ldr	r2, [pc, #372]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6713      	str	r3, [r2, #112]	; 0x70
 800706c:	e00b      	b.n	8007086 <HAL_RCC_OscConfig+0x376>
 800706e:	4b5b      	ldr	r3, [pc, #364]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	4a5a      	ldr	r2, [pc, #360]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	6713      	str	r3, [r2, #112]	; 0x70
 800707a:	4b58      	ldr	r3, [pc, #352]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	4a57      	ldr	r2, [pc, #348]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007080:	f023 0304 	bic.w	r3, r3, #4
 8007084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d015      	beq.n	80070ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708e:	f7fb febd 	bl	8002e0c <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007094:	e00a      	b.n	80070ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007096:	f7fb feb9 	bl	8002e0c <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e0ce      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ac:	4b4b      	ldr	r3, [pc, #300]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ee      	beq.n	8007096 <HAL_RCC_OscConfig+0x386>
 80070b8:	e014      	b.n	80070e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ba:	f7fb fea7 	bl	8002e0c <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fb fea3 	bl	8002e0c <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e0b8      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d8:	4b40      	ldr	r3, [pc, #256]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ee      	bne.n	80070c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d105      	bne.n	80070f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ea:	4b3c      	ldr	r3, [pc, #240]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	4a3b      	ldr	r2, [pc, #236]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80a4 	beq.w	8007248 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007100:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 030c 	and.w	r3, r3, #12
 8007108:	2b08      	cmp	r3, #8
 800710a:	d06b      	beq.n	80071e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d149      	bne.n	80071a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007114:	4b31      	ldr	r3, [pc, #196]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a30      	ldr	r2, [pc, #192]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800711a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fb fe74 	bl	8002e0c <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007128:	f7fb fe70 	bl	8002e0c <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e087      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713a:	4b28      	ldr	r3, [pc, #160]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	019b      	lsls	r3, r3, #6
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	3b01      	subs	r3, #1
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	061b      	lsls	r3, r3, #24
 800716a:	4313      	orrs	r3, r2
 800716c:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800716e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007172:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007174:	4b19      	ldr	r3, [pc, #100]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a18      	ldr	r2, [pc, #96]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800717a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fb fe44 	bl	8002e0c <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007188:	f7fb fe40 	bl	8002e0c <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e057      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCC_OscConfig+0x478>
 80071a6:	e04f      	b.n	8007248 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a0b      	ldr	r2, [pc, #44]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80071ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fb fe2a 	bl	8002e0c <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fb fe26 	bl	8002e0c <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e03d      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	4b03      	ldr	r3, [pc, #12]	; (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x4ac>
 80071da:	e035      	b.n	8007248 <HAL_RCC_OscConfig+0x538>
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <HAL_RCC_OscConfig+0x544>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d028      	beq.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d121      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720a:	429a      	cmp	r2, r3
 800720c:	d11a      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007214:	4013      	ands	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800721a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800721c:	4293      	cmp	r3, r2
 800721e:	d111      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	3b01      	subs	r3, #1
 800722e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007230:	429a      	cmp	r2, r3
 8007232:	d107      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800

08007258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0d0      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007270:	4b6a      	ldr	r3, [pc, #424]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d910      	bls.n	80072a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727e:	4b67      	ldr	r3, [pc, #412]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 020f 	bic.w	r2, r3, #15
 8007286:	4965      	ldr	r1, [pc, #404]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728e:	4b63      	ldr	r3, [pc, #396]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0b8      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d020      	beq.n	80072ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072b8:	4b59      	ldr	r3, [pc, #356]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4a58      	ldr	r2, [pc, #352]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072d0:	4b53      	ldr	r3, [pc, #332]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4a52      	ldr	r2, [pc, #328]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072dc:	4b50      	ldr	r3, [pc, #320]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	494d      	ldr	r1, [pc, #308]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d040      	beq.n	800737c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d107      	bne.n	8007312 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007302:	4b47      	ldr	r3, [pc, #284]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d115      	bne.n	800733a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e07f      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d107      	bne.n	800732a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731a:	4b41      	ldr	r3, [pc, #260]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e073      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732a:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e06b      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733a:	4b39      	ldr	r3, [pc, #228]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 0203 	bic.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4936      	ldr	r1, [pc, #216]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734c:	f7fb fd5e 	bl	8002e0c <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007352:	e00a      	b.n	800736a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007354:	f7fb fd5a 	bl	8002e0c <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e053      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736a:	4b2d      	ldr	r3, [pc, #180]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 020c 	and.w	r2, r3, #12
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	429a      	cmp	r2, r3
 800737a:	d1eb      	bne.n	8007354 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d210      	bcs.n	80073ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 020f 	bic.w	r2, r3, #15
 8007392:	4922      	ldr	r1, [pc, #136]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800739a:	4b20      	ldr	r3, [pc, #128]	; (800741c <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d001      	beq.n	80073ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e032      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4916      	ldr	r1, [pc, #88]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073d6:	4b12      	ldr	r3, [pc, #72]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	490e      	ldr	r1, [pc, #56]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ea:	f000 f821 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	091b      	lsrs	r3, r3, #4
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	490a      	ldr	r1, [pc, #40]	; (8007424 <HAL_RCC_ClockConfig+0x1cc>)
 80073fc:	5ccb      	ldrb	r3, [r1, r3]
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	4a09      	ldr	r2, [pc, #36]	; (8007428 <HAL_RCC_ClockConfig+0x1d0>)
 8007404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <HAL_RCC_ClockConfig+0x1d4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7fb fbb4 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40023c00 	.word	0x40023c00
 8007420:	40023800 	.word	0x40023800
 8007424:	08012fec 	.word	0x08012fec
 8007428:	20000000 	.word	0x20000000
 800742c:	20000004 	.word	0x20000004

08007430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b090      	sub	sp, #64	; 0x40
 8007436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007440:	2300      	movs	r3, #0
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007448:	4b59      	ldr	r3, [pc, #356]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 030c 	and.w	r3, r3, #12
 8007450:	2b08      	cmp	r3, #8
 8007452:	d00d      	beq.n	8007470 <HAL_RCC_GetSysClockFreq+0x40>
 8007454:	2b08      	cmp	r3, #8
 8007456:	f200 80a1 	bhi.w	800759c <HAL_RCC_GetSysClockFreq+0x16c>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_RCC_GetSysClockFreq+0x34>
 800745e:	2b04      	cmp	r3, #4
 8007460:	d003      	beq.n	800746a <HAL_RCC_GetSysClockFreq+0x3a>
 8007462:	e09b      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007464:	4b53      	ldr	r3, [pc, #332]	; (80075b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007466:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007468:	e09b      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800746a:	4b53      	ldr	r3, [pc, #332]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800746c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800746e:	e098      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007470:	4b4f      	ldr	r3, [pc, #316]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800747a:	4b4d      	ldr	r3, [pc, #308]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d028      	beq.n	80074d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007486:	4b4a      	ldr	r3, [pc, #296]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	099b      	lsrs	r3, r3, #6
 800748c:	2200      	movs	r2, #0
 800748e:	623b      	str	r3, [r7, #32]
 8007490:	627a      	str	r2, [r7, #36]	; 0x24
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007498:	2100      	movs	r1, #0
 800749a:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800749c:	fb03 f201 	mul.w	r2, r3, r1
 80074a0:	2300      	movs	r3, #0
 80074a2:	fb00 f303 	mul.w	r3, r0, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	4a43      	ldr	r2, [pc, #268]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80074aa:	fba0 1202 	umull	r1, r2, r0, r2
 80074ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074b0:	460a      	mov	r2, r1
 80074b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80074b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b6:	4413      	add	r3, r2
 80074b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	2200      	movs	r2, #0
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	61fa      	str	r2, [r7, #28]
 80074c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80074ca:	f7f8 fea1 	bl	8000210 <__aeabi_uldivmod>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4613      	mov	r3, r2
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d6:	e053      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074d8:	4b35      	ldr	r3, [pc, #212]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	099b      	lsrs	r3, r3, #6
 80074de:	2200      	movs	r2, #0
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	617a      	str	r2, [r7, #20]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074ea:	f04f 0b00 	mov.w	fp, #0
 80074ee:	4652      	mov	r2, sl
 80074f0:	465b      	mov	r3, fp
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f04f 0100 	mov.w	r1, #0
 80074fa:	0159      	lsls	r1, r3, #5
 80074fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007500:	0150      	lsls	r0, r2, #5
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	ebb2 080a 	subs.w	r8, r2, sl
 800750a:	eb63 090b 	sbc.w	r9, r3, fp
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800751a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800751e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007522:	ebb2 0408 	subs.w	r4, r2, r8
 8007526:	eb63 0509 	sbc.w	r5, r3, r9
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	00eb      	lsls	r3, r5, #3
 8007534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007538:	00e2      	lsls	r2, r4, #3
 800753a:	4614      	mov	r4, r2
 800753c:	461d      	mov	r5, r3
 800753e:	eb14 030a 	adds.w	r3, r4, sl
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	eb45 030b 	adc.w	r3, r5, fp
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007556:	4629      	mov	r1, r5
 8007558:	028b      	lsls	r3, r1, #10
 800755a:	4621      	mov	r1, r4
 800755c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007560:	4621      	mov	r1, r4
 8007562:	028a      	lsls	r2, r1, #10
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	2200      	movs	r2, #0
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	60fa      	str	r2, [r7, #12]
 8007570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007574:	f7f8 fe4c 	bl	8000210 <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4613      	mov	r3, r2
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	3301      	adds	r3, #1
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800759a:	e002      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3740      	adds	r7, #64	; 0x40
 80075a8:	46bd      	mov	sp, r7
 80075aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800
 80075b4:	00f42400 	.word	0x00f42400
 80075b8:	017d7840 	.word	0x017d7840

080075bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c0:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80075c2:	681b      	ldr	r3, [r3, #0]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000000 	.word	0x20000000

080075d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075d8:	f7ff fff0 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 80075dc:	4602      	mov	r2, r0
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	0a9b      	lsrs	r3, r3, #10
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	4903      	ldr	r1, [pc, #12]	; (80075f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ea:	5ccb      	ldrb	r3, [r1, r3]
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40023800 	.word	0x40023800
 80075f8:	08012ffc 	.word	0x08012ffc

080075fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007600:	f7ff ffdc 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8007604:	4602      	mov	r2, r0
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	0b5b      	lsrs	r3, r3, #13
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	4903      	ldr	r1, [pc, #12]	; (8007620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007612:	5ccb      	ldrb	r3, [r1, r3]
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007618:	4618      	mov	r0, r3
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40023800 	.word	0x40023800
 8007620:	08012ffc 	.word	0x08012ffc

08007624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220f      	movs	r2, #15
 8007632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007634:	4b12      	ldr	r3, [pc, #72]	; (8007680 <HAL_RCC_GetClockConfig+0x5c>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0203 	and.w	r2, r3, #3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007640:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <HAL_RCC_GetClockConfig+0x5c>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800764c:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <HAL_RCC_GetClockConfig+0x5c>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007658:	4b09      	ldr	r3, [pc, #36]	; (8007680 <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	08db      	lsrs	r3, r3, #3
 800765e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <HAL_RCC_GetClockConfig+0x60>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	601a      	str	r2, [r3, #0]
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	40023800 	.word	0x40023800
 8007684:	40023c00 	.word	0x40023c00

08007688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076b0:	4b69      	ldr	r3, [pc, #420]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	4a68      	ldr	r2, [pc, #416]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076ba:	6093      	str	r3, [r2, #8]
 80076bc:	4b66      	ldr	r3, [pc, #408]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c4:	4964      	ldr	r1, [pc, #400]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80076d2:	2301      	movs	r3, #1
 80076d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d017      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076e2:	4b5d      	ldr	r3, [pc, #372]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f0:	4959      	ldr	r1, [pc, #356]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007700:	d101      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007702:	2301      	movs	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800770e:	2301      	movs	r3, #1
 8007710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800771e:	4b4e      	ldr	r3, [pc, #312]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	494a      	ldr	r1, [pc, #296]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800773c:	d101      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800774a:	2301      	movs	r3, #1
 800774c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800775a:	2301      	movs	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 808b 	beq.w	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800776c:	4b3a      	ldr	r3, [pc, #232]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	4a39      	ldr	r2, [pc, #228]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007776:	6413      	str	r3, [r2, #64]	; 0x40
 8007778:	4b37      	ldr	r3, [pc, #220]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007784:	4b35      	ldr	r3, [pc, #212]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a34      	ldr	r2, [pc, #208]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800778a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800778e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007790:	f7fb fb3c 	bl	8002e0c <HAL_GetTick>
 8007794:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007796:	e008      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007798:	f7fb fb38 	bl	8002e0c <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b64      	cmp	r3, #100	; 0x64
 80077a4:	d901      	bls.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e357      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077aa:	4b2c      	ldr	r3, [pc, #176]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0f0      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077b6:	4b28      	ldr	r3, [pc, #160]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d035      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d02e      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077d4:	4b20      	ldr	r3, [pc, #128]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077de:	4b1e      	ldr	r3, [pc, #120]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077fc:	4b16      	ldr	r3, [pc, #88]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d114      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007808:	f7fb fb00 	bl	8002e0c <HAL_GetTick>
 800780c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780e:	e00a      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007810:	f7fb fafc 	bl	8002e0c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f241 3288 	movw	r2, #5000	; 0x1388
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e319      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007826:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0ee      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783e:	d111      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800784e:	400b      	ands	r3, r1
 8007850:	4901      	ldr	r1, [pc, #4]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
 8007856:	e00b      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007858:	40023800 	.word	0x40023800
 800785c:	40007000 	.word	0x40007000
 8007860:	0ffffcff 	.word	0x0ffffcff
 8007864:	4baa      	ldr	r3, [pc, #680]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	4aa9      	ldr	r2, [pc, #676]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800786a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800786e:	6093      	str	r3, [r2, #8]
 8007870:	4ba7      	ldr	r3, [pc, #668]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800787c:	49a4      	ldr	r1, [pc, #656]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800787e:	4313      	orrs	r3, r2
 8007880:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b00      	cmp	r3, #0
 800788c:	d010      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800788e:	4ba0      	ldr	r3, [pc, #640]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007894:	4a9e      	ldr	r2, [pc, #632]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800789a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800789e:	4b9c      	ldr	r3, [pc, #624]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	4999      	ldr	r1, [pc, #612]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078bc:	4b94      	ldr	r3, [pc, #592]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ca:	4991      	ldr	r1, [pc, #580]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078de:	4b8c      	ldr	r3, [pc, #560]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ec:	4988      	ldr	r1, [pc, #544]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007900:	4b83      	ldr	r3, [pc, #524]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790e:	4980      	ldr	r1, [pc, #512]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007910:	4313      	orrs	r3, r2
 8007912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007922:	4b7b      	ldr	r3, [pc, #492]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007930:	4977      	ldr	r1, [pc, #476]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007944:	4b72      	ldr	r3, [pc, #456]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794a:	f023 0203 	bic.w	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	496f      	ldr	r1, [pc, #444]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007966:	4b6a      	ldr	r3, [pc, #424]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796c:	f023 020c 	bic.w	r2, r3, #12
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007974:	4966      	ldr	r1, [pc, #408]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007988:	4b61      	ldr	r3, [pc, #388]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007996:	495e      	ldr	r1, [pc, #376]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079aa:	4b59      	ldr	r3, [pc, #356]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b8:	4955      	ldr	r1, [pc, #340]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079cc:	4b50      	ldr	r3, [pc, #320]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	494d      	ldr	r1, [pc, #308]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80079ee:	4b48      	ldr	r3, [pc, #288]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fc:	4944      	ldr	r1, [pc, #272]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a10:	4b3f      	ldr	r3, [pc, #252]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1e:	493c      	ldr	r1, [pc, #240]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007a32:	4b37      	ldr	r3, [pc, #220]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a40:	4933      	ldr	r1, [pc, #204]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a54:	4b2e      	ldr	r3, [pc, #184]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a62:	492b      	ldr	r1, [pc, #172]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d011      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a76:	4b26      	ldr	r3, [pc, #152]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a84:	4922      	ldr	r1, [pc, #136]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a94:	d101      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007a96:	2301      	movs	r3, #1
 8007a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ab6:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac4:	4912      	ldr	r1, [pc, #72]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ade:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae8:	4909      	ldr	r1, [pc, #36]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d006      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80d9 	beq.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a01      	ldr	r2, [pc, #4]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b0e:	e001      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007b10:	40023800 	.word	0x40023800
 8007b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b16:	f7fb f979 	bl	8002e0c <HAL_GetTick>
 8007b1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b1c:	e008      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b1e:	f7fb f975 	bl	8002e0c <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b64      	cmp	r3, #100	; 0x64
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e194      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b30:	4b6c      	ldr	r3, [pc, #432]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f0      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d021      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11d      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b50:	4b64      	ldr	r3, [pc, #400]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b5e:	4b61      	ldr	r3, [pc, #388]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b64:	0e1b      	lsrs	r3, r3, #24
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	019a      	lsls	r2, r3, #6
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	431a      	orrs	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	071b      	lsls	r3, r3, #28
 8007b84:	4957      	ldr	r1, [pc, #348]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d02e      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb6:	d129      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007bb8:	4b4a      	ldr	r3, [pc, #296]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bbe:	0c1b      	lsrs	r3, r3, #16
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bc6:	4b47      	ldr	r3, [pc, #284]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bcc:	0f1b      	lsrs	r3, r3, #28
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	019a      	lsls	r2, r3, #6
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	041b      	lsls	r3, r3, #16
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	061b      	lsls	r3, r3, #24
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	071b      	lsls	r3, r3, #28
 8007bec:	493d      	ldr	r1, [pc, #244]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007bf4:	4b3b      	ldr	r3, [pc, #236]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bfa:	f023 021f 	bic.w	r2, r3, #31
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	3b01      	subs	r3, #1
 8007c04:	4937      	ldr	r1, [pc, #220]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01d      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c18:	4b32      	ldr	r3, [pc, #200]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c1e:	0e1b      	lsrs	r3, r3, #24
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c26:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2c:	0f1b      	lsrs	r3, r3, #28
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	019a      	lsls	r2, r3, #6
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	431a      	orrs	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	431a      	orrs	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	071b      	lsls	r3, r3, #28
 8007c4c:	4925      	ldr	r1, [pc, #148]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d011      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	019a      	lsls	r2, r3, #6
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	041b      	lsls	r3, r3, #16
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	071b      	lsls	r3, r3, #28
 8007c7c:	4919      	ldr	r1, [pc, #100]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c84:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a16      	ldr	r2, [pc, #88]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c90:	f7fb f8bc 	bl	8002e0c <HAL_GetTick>
 8007c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c98:	f7fb f8b8 	bl	8002e0c <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b64      	cmp	r3, #100	; 0x64
 8007ca4:	d901      	bls.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e0d7      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007caa:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	f040 80cd 	bne.w	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cca:	f7fb f89f 	bl	8002e0c <HAL_GetTick>
 8007cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cd0:	e00a      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007cd2:	f7fb f89b 	bl	8002e0c <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b64      	cmp	r3, #100	; 0x64
 8007cde:	d903      	bls.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e0ba      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007ce4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ce8:	4b5e      	ldr	r3, [pc, #376]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf4:	d0ed      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d02e      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d12a      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d1e:	4b51      	ldr	r3, [pc, #324]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	0c1b      	lsrs	r3, r3, #16
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d2c:	4b4d      	ldr	r3, [pc, #308]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	0f1b      	lsrs	r3, r3, #28
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	019a      	lsls	r2, r3, #6
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	061b      	lsls	r3, r3, #24
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	071b      	lsls	r3, r3, #28
 8007d52:	4944      	ldr	r1, [pc, #272]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d5a:	4b42      	ldr	r3, [pc, #264]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	493d      	ldr	r1, [pc, #244]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d022      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d88:	d11d      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d8a:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d90:	0e1b      	lsrs	r3, r3, #24
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d98:	4b32      	ldr	r3, [pc, #200]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9e:	0f1b      	lsrs	r3, r3, #28
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	019a      	lsls	r2, r3, #6
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	431a      	orrs	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	061b      	lsls	r3, r3, #24
 8007db8:	431a      	orrs	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	071b      	lsls	r3, r3, #28
 8007dbe:	4929      	ldr	r1, [pc, #164]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d028      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007dd2:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	0e1b      	lsrs	r3, r3, #24
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007de0:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	019a      	lsls	r2, r3, #6
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	061b      	lsls	r3, r3, #24
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	071b      	lsls	r3, r3, #28
 8007e06:	4917      	ldr	r1, [pc, #92]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	4911      	ldr	r1, [pc, #68]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a0e      	ldr	r2, [pc, #56]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e30:	f7fa ffec 	bl	8002e0c <HAL_GetTick>
 8007e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e36:	e008      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e38:	f7fa ffe8 	bl	8002e0c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b64      	cmp	r3, #100	; 0x64
 8007e44:	d901      	bls.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e007      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e4a:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e56:	d1ef      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40023800 	.word	0x40023800

08007e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e86:	f040 808d 	bne.w	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007e8a:	4b93      	ldr	r3, [pc, #588]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e90:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e98:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ea0:	d07c      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ea8:	d87b      	bhi.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eb6:	d039      	beq.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007eb8:	e073      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007eba:	4b87      	ldr	r3, [pc, #540]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d108      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ec6:	4b84      	ldr	r3, [pc, #528]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ece:	4a83      	ldr	r2, [pc, #524]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	e007      	b.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ed8:	4b7f      	ldr	r3, [pc, #508]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ee0:	4a7f      	ldr	r2, [pc, #508]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007ee8:	4b7b      	ldr	r3, [pc, #492]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eee:	0e1b      	lsrs	r3, r3, #24
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007ef6:	4b78      	ldr	r3, [pc, #480]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efc:	099b      	lsrs	r3, r3, #6
 8007efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	fb03 f202 	mul.w	r2, r3, r2
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f10:	4b71      	ldr	r3, [pc, #452]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f28:	617b      	str	r3, [r7, #20]
        break;
 8007f2a:	e03b      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f2c:	4b6a      	ldr	r3, [pc, #424]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d108      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f38:	4b67      	ldr	r3, [pc, #412]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f40:	4a66      	ldr	r2, [pc, #408]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	e007      	b.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f4a:	4b63      	ldr	r3, [pc, #396]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f52:	4a63      	ldr	r2, [pc, #396]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007f5a:	4b5f      	ldr	r3, [pc, #380]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f60:	0e1b      	lsrs	r3, r3, #24
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007f68:	4b5b      	ldr	r3, [pc, #364]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6e:	099b      	lsrs	r3, r3, #6
 8007f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	fb03 f202 	mul.w	r2, r3, r2
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007f82:	4b55      	ldr	r3, [pc, #340]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]
        break;
 8007f9a:	e003      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f9c:	4b51      	ldr	r3, [pc, #324]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f9e:	617b      	str	r3, [r7, #20]
        break;
 8007fa0:	e000      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007fa2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007faa:	f040 808d 	bne.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007fae:	4b4a      	ldr	r3, [pc, #296]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007fbc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc4:	d07c      	beq.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fcc:	d87b      	bhi.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fda:	d039      	beq.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007fdc:	e073      	b.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007fde:	4b3e      	ldr	r3, [pc, #248]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d108      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007fea:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ff2:	4a3a      	ldr	r2, [pc, #232]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	e007      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ffc:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008004:	4a36      	ldr	r2, [pc, #216]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800800c:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008012:	0e1b      	lsrs	r3, r3, #24
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800801a:	4b2f      	ldr	r3, [pc, #188]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008020:	099b      	lsrs	r3, r3, #6
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	fb03 f202 	mul.w	r2, r3, r2
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008034:	4b28      	ldr	r3, [pc, #160]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	fbb2 f3f3 	udiv	r3, r2, r3
 800804c:	617b      	str	r3, [r7, #20]
        break;
 800804e:	e03b      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008050:	4b21      	ldr	r3, [pc, #132]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d108      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800805c:	4b1e      	ldr	r3, [pc, #120]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008064:	4a1d      	ldr	r2, [pc, #116]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	e007      	b.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008076:	4a1a      	ldr	r2, [pc, #104]	; (80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008078:	fbb2 f3f3 	udiv	r3, r2, r3
 800807c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800807e:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008084:	0e1b      	lsrs	r3, r3, #24
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800808e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008092:	099b      	lsrs	r3, r3, #6
 8008094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	fb03 f202 	mul.w	r2, r3, r2
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	3301      	adds	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	617b      	str	r3, [r7, #20]
        break;
 80080be:	e003      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80080c0:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080c2:	617b      	str	r3, [r7, #20]
        break;
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80080c6:	bf00      	nop
      }
    }
  }

  return frequency;
 80080c8:	697b      	ldr	r3, [r7, #20]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40023800 	.word	0x40023800
 80080dc:	00f42400 	.word	0x00f42400
 80080e0:	017d7840 	.word	0x017d7840
 80080e4:	00bb8000 	.word	0x00bb8000

080080e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e071      	b.n	80081e2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7f5b      	ldrb	r3, [r3, #29]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fa f8b4 	bl	800227c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b10      	cmp	r3, #16
 8008126:	d053      	beq.n	80081d0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	22ca      	movs	r2, #202	; 0xca
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2253      	movs	r2, #83	; 0x53
 8008136:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fac9 	bl	80086d0 <RTC_EnterInitMode>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d12a      	bne.n	800819e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6899      	ldr	r1, [r3, #8]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b26      	ldr	r3, [pc, #152]	; (80081ec <HAL_RTC_Init+0x104>)
 8008154:	400b      	ands	r3, r1
 8008156:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6899      	ldr	r1, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68d2      	ldr	r2, [r2, #12]
 800817e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6919      	ldr	r1, [r3, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	041a      	lsls	r2, r3, #16
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fad2 	bl	800873e <RTC_ExitInitMode>
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d110      	bne.n	80081c6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0208 	bic.w	r2, r2, #8
 80081b2:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	22ff      	movs	r2, #255	; 0xff
 80081cc:	625a      	str	r2, [r3, #36]	; 0x24
 80081ce:	e001      	b.n	80081d4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	ff8fffbf 	.word	0xff8fffbf

080081f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	7f1b      	ldrb	r3, [r3, #28]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_RTC_SetTime+0x1c>
 8008208:	2302      	movs	r3, #2
 800820a:	e085      	b.n	8008318 <HAL_RTC_SetTime+0x128>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2202      	movs	r2, #2
 8008216:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d126      	bne.n	800826c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 faa6 	bl	8008788 <RTC_ByteToBcd2>
 800823c:	4603      	mov	r3, r0
 800823e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fa9f 	bl	8008788 <RTC_ByteToBcd2>
 800824a:	4603      	mov	r3, r0
 800824c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800824e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	789b      	ldrb	r3, [r3, #2]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fa97 	bl	8008788 <RTC_ByteToBcd2>
 800825a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800825c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	78db      	ldrb	r3, [r3, #3]
 8008264:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e018      	b.n	800829e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d102      	bne.n	8008280 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800828c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008292:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	78db      	ldrb	r3, [r3, #3]
 8008298:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	22ca      	movs	r2, #202	; 0xca
 80082a4:	625a      	str	r2, [r3, #36]	; 0x24
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2253      	movs	r2, #83	; 0x53
 80082ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fa0e 	bl	80086d0 <RTC_EnterInitMode>
 80082b4:	4603      	mov	r3, r0
 80082b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80082b8:	7cfb      	ldrb	r3, [r7, #19]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11e      	bne.n	80082fc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	6979      	ldr	r1, [r7, #20]
 80082c4:	4b16      	ldr	r3, [pc, #88]	; (8008320 <HAL_RTC_SetTime+0x130>)
 80082c6:	400b      	ands	r3, r1
 80082c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6899      	ldr	r1, [r3, #8]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fa23 	bl	800873e <RTC_ExitInitMode>
 80082f8:	4603      	mov	r3, r0
 80082fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80082fc:	7cfb      	ldrb	r3, [r7, #19]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	771a      	strb	r2, [r3, #28]

  return status;
 8008316:	7cfb      	ldrb	r3, [r7, #19]
}
 8008318:	4618      	mov	r0, r3
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd90      	pop	{r4, r7, pc}
 8008320:	007f7f7f 	.word	0x007f7f7f

08008324 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	7f1b      	ldrb	r3, [r3, #28]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_RTC_SetDate+0x1c>
 800833c:	2302      	movs	r3, #2
 800833e:	e06f      	b.n	8008420 <HAL_RTC_SetDate+0xfc>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2202      	movs	r2, #2
 800834a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10e      	bne.n	8008370 <HAL_RTC_SetDate+0x4c>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	f003 0310 	and.w	r3, r3, #16
 800835a:	2b00      	cmp	r3, #0
 800835c:	d008      	beq.n	8008370 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	f023 0310 	bic.w	r3, r3, #16
 8008366:	b2db      	uxtb	r3, r3
 8008368:	330a      	adds	r3, #10
 800836a:	b2da      	uxtb	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d11c      	bne.n	80083b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	78db      	ldrb	r3, [r3, #3]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fa04 	bl	8008788 <RTC_ByteToBcd2>
 8008380:	4603      	mov	r3, r0
 8008382:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	4618      	mov	r0, r3
 800838a:	f000 f9fd 	bl	8008788 <RTC_ByteToBcd2>
 800838e:	4603      	mov	r3, r0
 8008390:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008392:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	789b      	ldrb	r3, [r3, #2]
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f9f5 	bl	8008788 <RTC_ByteToBcd2>
 800839e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80083a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	e00e      	b.n	80083ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	78db      	ldrb	r3, [r3, #3]
 80083b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80083bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80083c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	22ca      	movs	r2, #202	; 0xca
 80083d4:	625a      	str	r2, [r3, #36]	; 0x24
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2253      	movs	r2, #83	; 0x53
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f976 	bl	80086d0 <RTC_EnterInitMode>
 80083e4:	4603      	mov	r3, r0
 80083e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80083e8:	7cfb      	ldrb	r3, [r7, #19]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	6979      	ldr	r1, [r7, #20]
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <HAL_RTC_SetDate+0x104>)
 80083f6:	400b      	ands	r3, r1
 80083f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f99f 	bl	800873e <RTC_ExitInitMode>
 8008400:	4603      	mov	r3, r0
 8008402:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008404:	7cfb      	ldrb	r3, [r7, #19]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2201      	movs	r2, #1
 800840e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	22ff      	movs	r2, #255	; 0xff
 8008416:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	771a      	strb	r2, [r3, #28]

  return status;
 800841e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008420:	4618      	mov	r0, r3
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	bd90      	pop	{r4, r7, pc}
 8008428:	00ffff3f 	.word	0x00ffff3f

0800842c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	7f1b      	ldrb	r3, [r3, #28]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_RTC_SetAlarm+0x24>
 800844c:	2302      	movs	r3, #2
 800844e:	e113      	b.n	8008678 <HAL_RTC_SetAlarm+0x24c>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2202      	movs	r2, #2
 800845a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d137      	bne.n	80084d2 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f984 	bl	8008788 <RTC_ByteToBcd2>
 8008480:	4603      	mov	r3, r0
 8008482:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f97d 	bl	8008788 <RTC_ByteToBcd2>
 800848e:	4603      	mov	r3, r0
 8008490:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008492:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	789b      	ldrb	r3, [r3, #2]
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f975 	bl	8008788 <RTC_ByteToBcd2>
 800849e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80084a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	78db      	ldrb	r3, [r3, #3]
 80084a8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80084aa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f967 	bl	8008788 <RTC_ByteToBcd2>
 80084ba:	4603      	mov	r3, r0
 80084bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80084be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80084c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80084cc:	4313      	orrs	r3, r2
 80084ce:	61fb      	str	r3, [r7, #28]
 80084d0:	e023      	b.n	800851a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80084f2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80084f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	78db      	ldrb	r3, [r3, #3]
 80084fe:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008500:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008508:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800850a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008510:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008516:	4313      	orrs	r3, r2
 8008518:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	22ca      	movs	r2, #202	; 0xca
 800852c:	625a      	str	r2, [r3, #36]	; 0x24
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2253      	movs	r2, #83	; 0x53
 8008534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853e:	d148      	bne.n	80085d2 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800854e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800855e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008570:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008572:	f7fa fc4b 	bl	8002e0c <HAL_GetTick>
 8008576:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008578:	e013      	b.n	80085a2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800857a:	f7fa fc47 	bl	8002e0c <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008588:	d90b      	bls.n	80085a2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	22ff      	movs	r2, #255	; 0xff
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2203      	movs	r2, #3
 8008596:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e06a      	b.n	8008678 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0e4      	beq.n	800857a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085ce:	609a      	str	r2, [r3, #8]
 80085d0:	e047      	b.n	8008662 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80085e0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085f0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008602:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008604:	f7fa fc02 	bl	8002e0c <HAL_GetTick>
 8008608:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800860a:	e013      	b.n	8008634 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800860c:	f7fa fbfe 	bl	8002e0c <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800861a:	d90b      	bls.n	8008634 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	22ff      	movs	r2, #255	; 0xff
 8008622:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2203      	movs	r2, #3
 8008628:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e021      	b.n	8008678 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0e4      	beq.n	800860c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008660:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	22ff      	movs	r2, #255	; 0xff
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3724      	adds	r7, #36	; 0x24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd90      	pop	{r4, r7, pc}

08008680 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800869a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800869c:	f7fa fbb6 	bl	8002e0c <HAL_GetTick>
 80086a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086a2:	e009      	b.n	80086b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086a4:	f7fa fbb2 	bl	8002e0c <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086b2:	d901      	bls.n	80086b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e007      	b.n	80086c8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0ee      	beq.n	80086a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d122      	bne.n	8008734 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086fe:	f7fa fb85 	bl	8002e0c <HAL_GetTick>
 8008702:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008704:	e00c      	b.n	8008720 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008706:	f7fa fb81 	bl	8002e0c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008714:	d904      	bls.n	8008720 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2204      	movs	r2, #4
 800871a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <RTC_EnterInitMode+0x64>
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d1e8      	bne.n	8008706 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008758:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ff89 	bl	8008680 <HAL_RTC_WaitForSynchro>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2204      	movs	r2, #4
 8008778:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008796:	e005      	b.n	80087a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	3b0a      	subs	r3, #10
 80087a2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d8f6      	bhi.n	8008798 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	b2db      	uxtb	r3, r3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	7f1b      	ldrb	r3, [r3, #28]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d101      	bne.n	80087e0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80087dc:	2302      	movs	r3, #2
 80087de:	e050      	b.n	8008882 <HAL_RTCEx_SetTimeStamp+0xbe>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2201      	movs	r2, #1
 80087e4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2202      	movs	r2, #2
 80087ea:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 0206 	bic.w	r2, r2, #6
 80087fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	430a      	orrs	r2, r1
 800880a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	4b1f      	ldr	r3, [pc, #124]	; (8008890 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8008814:	4013      	ands	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	22ca      	movs	r2, #202	; 0xca
 8008826:	625a      	str	r2, [r3, #36]	; 0x24
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2253      	movs	r2, #83	; 0x53
 800882e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8008848:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800885a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800886a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	22ff      	movs	r2, #255	; 0xff
 8008872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	fffff7f7 	.word	0xfffff7f7

08008894 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e156      	b.n	8008b60 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fa f8ec 	bl	8002aa4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f95b 	bl	8008b90 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d00c      	beq.n	80088fc <HAL_SAI_Init+0x68>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d80d      	bhi.n	8008902 <HAL_SAI_Init+0x6e>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <HAL_SAI_Init+0x5c>
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d003      	beq.n	80088f6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80088ee:	e008      	b.n	8008902 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
      break;
 80088f4:	e006      	b.n	8008904 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80088f6:	2310      	movs	r3, #16
 80088f8:	61fb      	str	r3, [r7, #28]
      break;
 80088fa:	e003      	b.n	8008904 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80088fc:	2320      	movs	r3, #32
 80088fe:	61fb      	str	r3, [r7, #28]
      break;
 8008900:	e000      	b.n	8008904 <HAL_SAI_Init+0x70>
      break;
 8008902:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b03      	cmp	r3, #3
 800890a:	d81e      	bhi.n	800894a <HAL_SAI_Init+0xb6>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <HAL_SAI_Init+0x80>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008925 	.word	0x08008925
 8008918:	0800892b 	.word	0x0800892b
 800891c:	08008933 	.word	0x08008933
 8008920:	0800893b 	.word	0x0800893b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
    }
    break;
 8008928:	e010      	b.n	800894c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800892a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800892e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008930:	e00c      	b.n	800894c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008936:	617b      	str	r3, [r7, #20]
    }
    break;
 8008938:	e008      	b.n	800894c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800893a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800893e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	f043 0301 	orr.w	r3, r3, #1
 8008946:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008948:	e000      	b.n	800894c <HAL_SAI_Init+0xb8>
    default:
      break;
 800894a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a85      	ldr	r2, [pc, #532]	; (8008b68 <HAL_SAI_Init+0x2d4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <HAL_SAI_Init+0xcc>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a84      	ldr	r2, [pc, #528]	; (8008b6c <HAL_SAI_Init+0x2d8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d103      	bne.n	8008968 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008960:	4a83      	ldr	r2, [pc, #524]	; (8008b70 <HAL_SAI_Init+0x2dc>)
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	e002      	b.n	800896e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008968:	4a82      	ldr	r2, [pc, #520]	; (8008b74 <HAL_SAI_Init+0x2e0>)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04c      	beq.n	8008a10 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a7a      	ldr	r2, [pc, #488]	; (8008b68 <HAL_SAI_Init+0x2d4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d004      	beq.n	800898e <HAL_SAI_Init+0xfa>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a78      	ldr	r2, [pc, #480]	; (8008b6c <HAL_SAI_Init+0x2d8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d104      	bne.n	8008998 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800898e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008992:	f7ff fa69 	bl	8007e68 <HAL_RCCEx_GetPeriphCLKFreq>
 8008996:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a76      	ldr	r2, [pc, #472]	; (8008b78 <HAL_SAI_Init+0x2e4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <HAL_SAI_Init+0x118>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a75      	ldr	r2, [pc, #468]	; (8008b7c <HAL_SAI_Init+0x2e8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d104      	bne.n	80089b6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80089ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80089b0:	f7ff fa5a 	bl	8007e68 <HAL_RCCEx_GetPeriphCLKFreq>
 80089b4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	461a      	mov	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	025b      	lsls	r3, r3, #9
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4a6b      	ldr	r2, [pc, #428]	; (8008b80 <HAL_SAI_Init+0x2ec>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	08da      	lsrs	r2, r3, #3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	4b68      	ldr	r3, [pc, #416]	; (8008b80 <HAL_SAI_Init+0x2ec>)
 80089e0:	fba3 2301 	umull	r2, r3, r3, r1
 80089e4:	08da      	lsrs	r2, r3, #3
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	1aca      	subs	r2, r1, r3
 80089f0:	2a08      	cmp	r2, #8
 80089f2:	d904      	bls.n	80089fe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d104      	bne.n	8008a10 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	085a      	lsrs	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_SAI_Init+0x18c>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d109      	bne.n	8008a34 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_SAI_Init+0x198>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e001      	b.n	8008a30 <HAL_SAI_Init+0x19c>
 8008a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	e008      	b.n	8008a46 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d102      	bne.n	8008a42 <HAL_SAI_Init+0x1ae>
 8008a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a40:	e000      	b.n	8008a44 <HAL_SAI_Init+0x1b0>
 8008a42:	2300      	movs	r3, #0
 8008a44:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6819      	ldr	r1, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	4b4c      	ldr	r3, [pc, #304]	; (8008b84 <HAL_SAI_Init+0x2f0>)
 8008a52:	400b      	ands	r3, r1
 8008a54:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6819      	ldr	r1, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a64:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a6a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	431a      	orrs	r2, r3
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008a7e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008a8a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	051b      	lsls	r3, r3, #20
 8008a92:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6859      	ldr	r1, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4b38      	ldr	r3, [pc, #224]	; (8008b88 <HAL_SAI_Init+0x2f4>)
 8008aa8:	400b      	ands	r3, r1
 8008aaa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6859      	ldr	r1, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6899      	ldr	r1, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	4b2d      	ldr	r3, [pc, #180]	; (8008b8c <HAL_SAI_Init+0x2f8>)
 8008ad6:	400b      	ands	r3, r1
 8008ad8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6899      	ldr	r1, [r3, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008aea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008af0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008af6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afc:	3b01      	subs	r3, #1
 8008afe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008b00:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68d9      	ldr	r1, [r3, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008b18:	400b      	ands	r3, r1
 8008b1a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68d9      	ldr	r1, [r3, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3720      	adds	r7, #32
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40015804 	.word	0x40015804
 8008b6c:	40015824 	.word	0x40015824
 8008b70:	40015800 	.word	0x40015800
 8008b74:	40015c00 	.word	0x40015c00
 8008b78:	40015c04 	.word	0x40015c04
 8008b7c:	40015c24 	.word	0x40015c24
 8008b80:	cccccccd 	.word	0xcccccccd
 8008b84:	ff05c010 	.word	0xff05c010
 8008b88:	ffff1ff0 	.word	0xffff1ff0
 8008b8c:	fff88000 	.word	0xfff88000

08008b90 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008b98:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <SAI_Disable+0x68>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <SAI_Disable+0x6c>)
 8008b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba2:	0b1b      	lsrs	r3, r3, #12
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	1e5a      	subs	r2, r3, #1
 8008bc0:	60fa      	str	r2, [r7, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bda:	e006      	b.n	8008bea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e8      	bne.n	8008bbc <SAI_Disable+0x2c>

  return status;
 8008bea:	7afb      	ldrb	r3, [r7, #11]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	20000000 	.word	0x20000000
 8008bfc:	95cbec1b 	.word	0x95cbec1b

08008c00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e022      	b.n	8008c58 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7f9 fb57 	bl	80022d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f814 	bl	8008c60 <HAL_SD_InitCard>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e00a      	b.n	8008c58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c60:	b5b0      	push	{r4, r5, r7, lr}
 8008c62:	b08e      	sub	sp, #56	; 0x38
 8008c64:	af04      	add	r7, sp, #16
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c74:	2300      	movs	r3, #0
 8008c76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008c7c:	2376      	movs	r3, #118	; 0x76
 8008c7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681d      	ldr	r5, [r3, #0]
 8008c84:	466c      	mov	r4, sp
 8008c86:	f107 0314 	add.w	r3, r7, #20
 8008c8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c92:	f107 0308 	add.w	r3, r7, #8
 8008c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f002 ffb3 	bl	800bc04 <SDMMC_Init>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e059      	b.n	8008d64 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cbe:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f002 ffd6 	bl	800bc76 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cd8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008cda:	2002      	movs	r0, #2
 8008cdc:	f7fa f8a2 	bl	8002e24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fe0f 	bl	8009904 <SD_PowerON>
 8008ce6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e02e      	b.n	8008d64 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fd2e 	bl	8009768 <SD_InitCard>
 8008d0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e01b      	b.n	8008d64 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d34:	4618      	mov	r0, r3
 8008d36:	f003 f831 	bl	800bd9c <SDMMC_CmdBlockLength>
 8008d3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00f      	beq.n	8008d62 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <HAL_SD_InitCard+0x10c>)
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	431a      	orrs	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3728      	adds	r7, #40	; 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d6c:	004005ff 	.word	0x004005ff

08008d70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08c      	sub	sp, #48	; 0x30
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d107      	bne.n	8008d98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e0c3      	b.n	8008f20 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	f040 80bc 	bne.w	8008f1e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	441a      	add	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d907      	bls.n	8008dca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e0aa      	b.n	8008f20 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2203      	movs	r2, #3
 8008dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	4a4e      	ldr	r2, [pc, #312]	; (8008f28 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008df0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	4a4d      	ldr	r2, [pc, #308]	; (8008f2c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008df8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	2200      	movs	r2, #0
 8008e00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	2200      	movs	r2, #0
 8008e08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3380      	adds	r3, #128	; 0x80
 8008e30:	4619      	mov	r1, r3
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	025b      	lsls	r3, r3, #9
 8008e38:	089b      	lsrs	r3, r3, #2
 8008e3a:	f7fa fcf1 	bl	8003820 <HAL_DMA_Start_IT>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d017      	beq.n	8008e74 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008e52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a35      	ldr	r2, [pc, #212]	; (8008f30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e055      	b.n	8008f20 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0208 	orr.w	r2, r2, #8
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d002      	beq.n	8008e92 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	025b      	lsls	r3, r3, #9
 8008e90:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295
 8008e96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	025b      	lsls	r3, r3, #9
 8008e9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e9e:	2390      	movs	r3, #144	; 0x90
 8008ea0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f107 0210 	add.w	r2, r7, #16
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f002 ff43 	bl	800bd44 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d90a      	bls.n	8008eda <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2282      	movs	r2, #130	; 0x82
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 ffa7 	bl	800be24 <SDMMC_CmdReadMultiBlock>
 8008ed6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ed8:	e009      	b.n	8008eee <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2281      	movs	r2, #129	; 0x81
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f002 ff7a 	bl	800bde0 <SDMMC_CmdReadSingleBlock>
 8008eec:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d012      	beq.n	8008f1a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	431a      	orrs	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e002      	b.n	8008f20 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e000      	b.n	8008f20 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f1e:	2302      	movs	r3, #2
  }
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3730      	adds	r7, #48	; 0x30
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	08009653 	.word	0x08009653
 8008f2c:	080096c5 	.word	0x080096c5
 8008f30:	004005ff 	.word	0x004005ff

08008f34 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08c      	sub	sp, #48	; 0x30
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d107      	bne.n	8008f5c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e0c6      	b.n	80090ea <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	f040 80bf 	bne.w	80090e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	441a      	add	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d907      	bls.n	8008f8e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e0ad      	b.n	80090ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2203      	movs	r2, #3
 8008f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f042 021a 	orr.w	r2, r2, #26
 8008fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb2:	4a50      	ldr	r2, [pc, #320]	; (80090f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fba:	4a4f      	ldr	r2, [pc, #316]	; (80090f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008fbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d002      	beq.n	8008fd4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	025b      	lsls	r3, r3, #9
 8008fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d90a      	bls.n	8008ff0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	22a0      	movs	r2, #160	; 0xa0
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f002 ff60 	bl	800beac <SDMMC_CmdWriteMultiBlock>
 8008fec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fee:	e009      	b.n	8009004 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2290      	movs	r2, #144	; 0x90
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 ff33 	bl	800be68 <SDMMC_CmdWriteSingleBlock>
 8009002:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d012      	beq.n	8009030 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a3b      	ldr	r2, [pc, #236]	; (80090fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009010:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	431a      	orrs	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e05c      	b.n	80090ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0208 	orr.w	r2, r2, #8
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009044:	2240      	movs	r2, #64	; 0x40
 8009046:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3380      	adds	r3, #128	; 0x80
 8009070:	461a      	mov	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	025b      	lsls	r3, r3, #9
 8009076:	089b      	lsrs	r3, r3, #2
 8009078:	f7fa fbd2 	bl	8003820 <HAL_DMA_Start_IT>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01a      	beq.n	80090b8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 021a 	bic.w	r2, r2, #26
 8009090:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a19      	ldr	r2, [pc, #100]	; (80090fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e018      	b.n	80090ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090b8:	f04f 33ff 	mov.w	r3, #4294967295
 80090bc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	025b      	lsls	r3, r3, #9
 80090c2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090c4:	2390      	movs	r3, #144	; 0x90
 80090c6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f107 0210 	add.w	r2, r7, #16
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f002 fe30 	bl	800bd44 <SDMMC_ConfigData>

      return HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e000      	b.n	80090ea <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80090e8:	2302      	movs	r3, #2
  }
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3730      	adds	r7, #48	; 0x30
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	08009629 	.word	0x08009629
 80090f8:	080096c5 	.word	0x080096c5
 80090fc:	004005ff 	.word	0x004005ff

08009100 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009122:	0f9b      	lsrs	r3, r3, #30
 8009124:	b2da      	uxtb	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912e:	0e9b      	lsrs	r3, r3, #26
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	b2da      	uxtb	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009140:	0e1b      	lsrs	r3, r3, #24
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	b2da      	uxtb	r2, r3
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009152:	0c1b      	lsrs	r3, r3, #16
 8009154:	b2da      	uxtb	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800916a:	b2da      	uxtb	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009174:	0d1b      	lsrs	r3, r3, #20
 8009176:	b29a      	uxth	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	b2da      	uxtb	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009192:	0bdb      	lsrs	r3, r3, #15
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a4:	0b9b      	lsrs	r3, r3, #14
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091b6:	0b5b      	lsrs	r3, r3, #13
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c8:	0b1b      	lsrs	r3, r3, #12
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d163      	bne.n	80092ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e8:	009a      	lsls	r2, r3, #2
 80091ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091ee:	4013      	ands	r3, r2
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80091f4:	0f92      	lsrs	r2, r2, #30
 80091f6:	431a      	orrs	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009200:	0edb      	lsrs	r3, r3, #27
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	b2da      	uxtb	r2, r3
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009212:	0e1b      	lsrs	r3, r3, #24
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009224:	0d5b      	lsrs	r3, r3, #21
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	b2da      	uxtb	r2, r3
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009236:	0c9b      	lsrs	r3, r3, #18
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	b2da      	uxtb	r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009248:	0bdb      	lsrs	r3, r3, #15
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	b2da      	uxtb	r2, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	7e1b      	ldrb	r3, [r3, #24]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	3302      	adds	r3, #2
 800926c:	2201      	movs	r2, #1
 800926e:	fa02 f303 	lsl.w	r3, r2, r3
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009276:	fb03 f202 	mul.w	r2, r3, r2
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	7a1b      	ldrb	r3, [r3, #8]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	2201      	movs	r2, #1
 800928a:	409a      	lsls	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009298:	0a52      	lsrs	r2, r2, #9
 800929a:	fb03 f202 	mul.w	r2, r3, r2
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092a8:	661a      	str	r2, [r3, #96]	; 0x60
 80092aa:	e031      	b.n	8009310 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d11d      	bne.n	80092f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b8:	041b      	lsls	r3, r3, #16
 80092ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	431a      	orrs	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	3301      	adds	r3, #1
 80092d0:	029a      	lsls	r2, r3, #10
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	661a      	str	r2, [r3, #96]	; 0x60
 80092ee:	e00f      	b.n	8009310 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a58      	ldr	r2, [pc, #352]	; (8009458 <HAL_SD_GetCardCSD+0x344>)
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e09d      	b.n	800944c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009314:	0b9b      	lsrs	r3, r3, #14
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	b2da      	uxtb	r2, r3
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009326:	09db      	lsrs	r3, r3, #7
 8009328:	b2db      	uxtb	r3, r3
 800932a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800932e:	b2da      	uxtb	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933e:	b2da      	uxtb	r2, r3
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009348:	0fdb      	lsrs	r3, r3, #31
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009354:	0f5b      	lsrs	r3, r3, #29
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	b2da      	uxtb	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	0e9b      	lsrs	r3, r3, #26
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	0d9b      	lsrs	r3, r3, #22
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	b2da      	uxtb	r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938a:	0d5b      	lsrs	r3, r3, #21
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	b2da      	uxtb	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ba:	0bdb      	lsrs	r3, r3, #15
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	0b9b      	lsrs	r3, r3, #14
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	0b5b      	lsrs	r3, r3, #13
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	0b1b      	lsrs	r3, r3, #12
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940a:	0a9b      	lsrs	r3, r3, #10
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	b2da      	uxtb	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941e:	0a1b      	lsrs	r3, r3, #8
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	b2da      	uxtb	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943a:	b2da      	uxtb	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	004005ff 	.word	0x004005ff

0800945c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094b4:	b5b0      	push	{r4, r5, r7, lr}
 80094b6:	b08e      	sub	sp, #56	; 0x38
 80094b8:	af04      	add	r7, sp, #16
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2203      	movs	r2, #3
 80094c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d02e      	beq.n	8009532 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094da:	d106      	bne.n	80094ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38
 80094e8:	e029      	b.n	800953e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094f0:	d10a      	bne.n	8009508 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fabc 	bl	8009a70 <SD_WideBus_Enable>
 80094f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
 8009506:	e01a      	b.n	800953e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 faf9 	bl	8009b06 <SD_WideBus_Disable>
 8009514:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
 8009522:	e00c      	b.n	800953e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
 8009530:	e005      	b.n	800953e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00b      	beq.n	800955e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a26      	ldr	r2, [pc, #152]	; (80095e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800955c:	e01f      	b.n	800959e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681d      	ldr	r5, [r3, #0]
 8009584:	466c      	mov	r4, sp
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800958e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009598:	4628      	mov	r0, r5
 800959a:	f002 fb33 	bl	800bc04 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095a6:	4618      	mov	r0, r3
 80095a8:	f002 fbf8 	bl	800bd9c <SDMMC_CmdBlockLength>
 80095ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00c      	beq.n	80095ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a0a      	ldr	r2, [pc, #40]	; (80095e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80095ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	431a      	orrs	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80095d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3728      	adds	r7, #40	; 0x28
 80095de:	46bd      	mov	sp, r7
 80095e0:	bdb0      	pop	{r4, r5, r7, pc}
 80095e2:	bf00      	nop
 80095e4:	004005ff 	.word	0x004005ff

080095e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa10 	bl	8009a20 <SD_SendStatus>
 8009600:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	0a5b      	lsrs	r3, r3, #9
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800961e:	693b      	ldr	r3, [r7, #16]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009644:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	2b82      	cmp	r3, #130	; 0x82
 8009666:	d111      	bne.n	800968c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4618      	mov	r0, r3
 800966e:	f002 fc3f 	bl	800bef0 <SDMMC_CmdStopTransfer>
 8009672:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d008      	beq.n	800968c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	431a      	orrs	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fd3a 	bl	8009100 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0208 	bic.w	r2, r2, #8
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f004 f885 	bl	800d7c4 <HAL_SD_RxCpltCallback>
#endif
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7fa f904 	bl	80038e0 <HAL_DMA_GetError>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d03e      	beq.n	800975c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d002      	beq.n	80096fa <SD_DMAError+0x36>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d12d      	bne.n	8009756 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a19      	ldr	r2, [pc, #100]	; (8009764 <SD_DMAError+0xa0>)
 8009700:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009710:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800971e:	6978      	ldr	r0, [r7, #20]
 8009720:	f7ff ff62 	bl	80095e8 <HAL_SD_GetCardState>
 8009724:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b06      	cmp	r3, #6
 800972a:	d002      	beq.n	8009732 <SD_DMAError+0x6e>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b05      	cmp	r3, #5
 8009730:	d10a      	bne.n	8009748 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f002 fbda 	bl	800bef0 <SDMMC_CmdStopTransfer>
 800973c:	4602      	mov	r2, r0
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	431a      	orrs	r2, r3
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2200      	movs	r2, #0
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009756:	6978      	ldr	r0, [r7, #20]
 8009758:	f7ff fcd2 	bl	8009100 <HAL_SD_ErrorCallback>
#endif
  }
}
 800975c:	bf00      	nop
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	004005ff 	.word	0x004005ff

08009768 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009768:	b5b0      	push	{r4, r5, r7, lr}
 800976a:	b094      	sub	sp, #80	; 0x50
 800976c:	af04      	add	r7, sp, #16
 800976e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009770:	2301      	movs	r3, #1
 8009772:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4618      	mov	r0, r3
 800977a:	f002 fa8a 	bl	800bc92 <SDMMC_GetPowerState>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009784:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009788:	e0b8      	b.n	80098fc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978e:	2b03      	cmp	r3, #3
 8009790:	d02f      	beq.n	80097f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f002 fcb5 	bl	800c106 <SDMMC_CmdSendCID>
 800979c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800979e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80097a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a6:	e0a9      	b.n	80098fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2100      	movs	r1, #0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f002 fab5 	bl	800bd1e <SDMMC_GetResponse>
 80097b4:	4602      	mov	r2, r0
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2104      	movs	r1, #4
 80097c0:	4618      	mov	r0, r3
 80097c2:	f002 faac 	bl	800bd1e <SDMMC_GetResponse>
 80097c6:	4602      	mov	r2, r0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2108      	movs	r1, #8
 80097d2:	4618      	mov	r0, r3
 80097d4:	f002 faa3 	bl	800bd1e <SDMMC_GetResponse>
 80097d8:	4602      	mov	r2, r0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	210c      	movs	r1, #12
 80097e4:	4618      	mov	r0, r3
 80097e6:	f002 fa9a 	bl	800bd1e <SDMMC_GetResponse>
 80097ea:	4602      	mov	r2, r0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d00d      	beq.n	8009816 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f107 020e 	add.w	r2, r7, #14
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f002 fcbb 	bl	800c180 <SDMMC_CmdSetRelAdd>
 800980a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800980c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <SD_InitCard+0xae>
    {
      return errorstate;
 8009812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009814:	e072      	b.n	80098fc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	2b03      	cmp	r3, #3
 800981c:	d036      	beq.n	800988c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800981e:	89fb      	ldrh	r3, [r7, #14]
 8009820:	461a      	mov	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982e:	041b      	lsls	r3, r3, #16
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f002 fc85 	bl	800c142 <SDMMC_CmdSendCSD>
 8009838:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800983a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009842:	e05b      	b.n	80098fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f002 fa67 	bl	800bd1e <SDMMC_GetResponse>
 8009850:	4602      	mov	r2, r0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2104      	movs	r1, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f002 fa5e 	bl	800bd1e <SDMMC_GetResponse>
 8009862:	4602      	mov	r2, r0
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2108      	movs	r1, #8
 800986e:	4618      	mov	r0, r3
 8009870:	f002 fa55 	bl	800bd1e <SDMMC_GetResponse>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	210c      	movs	r1, #12
 8009880:	4618      	mov	r0, r3
 8009882:	f002 fa4c 	bl	800bd1e <SDMMC_GetResponse>
 8009886:	4602      	mov	r2, r0
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2104      	movs	r1, #4
 8009892:	4618      	mov	r0, r3
 8009894:	f002 fa43 	bl	800bd1e <SDMMC_GetResponse>
 8009898:	4603      	mov	r3, r0
 800989a:	0d1a      	lsrs	r2, r3, #20
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80098a0:	f107 0310 	add.w	r3, r7, #16
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff fc34 	bl	8009114 <HAL_SD_GetCardCSD>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098b6:	e021      	b.n	80098fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6819      	ldr	r1, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c0:	041b      	lsls	r3, r3, #16
 80098c2:	2200      	movs	r2, #0
 80098c4:	461c      	mov	r4, r3
 80098c6:	4615      	mov	r5, r2
 80098c8:	4622      	mov	r2, r4
 80098ca:	462b      	mov	r3, r5
 80098cc:	4608      	mov	r0, r1
 80098ce:	f002 fb31 	bl	800bf34 <SDMMC_CmdSelDesel>
 80098d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <SD_InitCard+0x176>
  {
    return errorstate;
 80098da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098dc:	e00e      	b.n	80098fc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681d      	ldr	r5, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	466c      	mov	r4, sp
 80098e6:	f103 0210 	add.w	r2, r3, #16
 80098ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80098ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098f0:	3304      	adds	r3, #4
 80098f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098f4:	4628      	mov	r0, r5
 80098f6:	f002 f985 	bl	800bc04 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3740      	adds	r7, #64	; 0x40
 8009900:	46bd      	mov	sp, r7
 8009902:	bdb0      	pop	{r4, r5, r7, pc}

08009904 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	2300      	movs	r3, #0
 8009916:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f002 fb2c 	bl	800bf7a <SDMMC_CmdGoIdleState>
 8009922:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <SD_PowerON+0x2a>
  {
    return errorstate;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	e072      	b.n	8009a14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f002 fb3f 	bl	800bfb6 <SDMMC_CmdOperCond>
 8009938:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00d      	beq.n	800995c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4618      	mov	r0, r3
 800994c:	f002 fb15 	bl	800bf7a <SDMMC_CmdGoIdleState>
 8009950:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d004      	beq.n	8009962 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	e05b      	b.n	8009a14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009966:	2b01      	cmp	r3, #1
 8009968:	d137      	bne.n	80099da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f002 fb3f 	bl	800bff4 <SDMMC_CmdAppCommand>
 8009976:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02d      	beq.n	80099da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800997e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009982:	e047      	b.n	8009a14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f002 fb32 	bl	800bff4 <SDMMC_CmdAppCommand>
 8009990:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <SD_PowerON+0x98>
    {
      return errorstate;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	e03b      	b.n	8009a14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	491e      	ldr	r1, [pc, #120]	; (8009a1c <SD_PowerON+0x118>)
 80099a2:	4618      	mov	r0, r3
 80099a4:	f002 fb48 	bl	800c038 <SDMMC_CmdAppOperCommand>
 80099a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099b4:	e02e      	b.n	8009a14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f002 f9ae 	bl	800bd1e <SDMMC_GetResponse>
 80099c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	0fdb      	lsrs	r3, r3, #31
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d101      	bne.n	80099d0 <SD_PowerON+0xcc>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <SD_PowerON+0xce>
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]

    count++;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d802      	bhi.n	80099ea <SD_PowerON+0xe6>
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0cc      	beq.n	8009984 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d902      	bls.n	80099fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80099f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099f8:	e00c      	b.n	8009a14 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	645a      	str	r2, [r3, #68]	; 0x44
 8009a0a:	e002      	b.n	8009a12 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	c1100000 	.word	0xc1100000

08009a20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a34:	e018      	b.n	8009a68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3e:	041b      	lsls	r3, r3, #16
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f002 fbbd 	bl	800c1c2 <SDMMC_CmdSendStatus>
 8009a48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	e009      	b.n	8009a68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f002 f95f 	bl	800bd1e <SDMMC_GetResponse>
 8009a60:	4602      	mov	r2, r0
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2100      	movs	r1, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f002 f949 	bl	800bd1e <SDMMC_GetResponse>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a96:	d102      	bne.n	8009a9e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a9c:	e02f      	b.n	8009afe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f879 	bl	8009b9c <SD_FindSCR>
 8009aaa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	e023      	b.n	8009afe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d01c      	beq.n	8009afa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac8:	041b      	lsls	r3, r3, #16
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f002 fa91 	bl	800bff4 <SDMMC_CmdAppCommand>
 8009ad2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	e00f      	b.n	8009afe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2102      	movs	r1, #2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f002 facb 	bl	800c080 <SDMMC_CmdBusWidth>
 8009aea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	e003      	b.n	8009afe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	e001      	b.n	8009afe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009afa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b086      	sub	sp, #24
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f002 f8fe 	bl	800bd1e <SDMMC_GetResponse>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b2c:	d102      	bne.n	8009b34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b32:	e02f      	b.n	8009b94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b34:	f107 030c 	add.w	r3, r7, #12
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f82e 	bl	8009b9c <SD_FindSCR>
 8009b40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	e023      	b.n	8009b94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d01c      	beq.n	8009b90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	4619      	mov	r1, r3
 8009b62:	4610      	mov	r0, r2
 8009b64:	f002 fa46 	bl	800bff4 <SDMMC_CmdAppCommand>
 8009b68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	e00f      	b.n	8009b94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f002 fa80 	bl	800c080 <SDMMC_CmdBusWidth>
 8009b80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	e003      	b.n	8009b94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e001      	b.n	8009b94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b08f      	sub	sp, #60	; 0x3c
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ba6:	f7f9 f931 	bl	8002e0c <HAL_GetTick>
 8009baa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60bb      	str	r3, [r7, #8]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2108      	movs	r1, #8
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f8ea 	bl	800bd9c <SDMMC_CmdBlockLength>
 8009bc8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	e0b2      	b.n	8009d3a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	041b      	lsls	r3, r3, #16
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f002 fa07 	bl	800bff4 <SDMMC_CmdAppCommand>
 8009be6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	e0a3      	b.n	8009d3a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009bfc:	2330      	movs	r3, #48	; 0x30
 8009bfe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c00:	2302      	movs	r3, #2
 8009c02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f107 0210 	add.w	r2, r7, #16
 8009c14:	4611      	mov	r1, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f002 f894 	bl	800bd44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f002 fa4f 	bl	800c0c4 <SDMMC_CmdSendSCR>
 8009c26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d02a      	beq.n	8009c84 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	e083      	b.n	8009d3a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00f      	beq.n	8009c60 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	f107 0208 	add.w	r2, r7, #8
 8009c4c:	18d4      	adds	r4, r2, r3
 8009c4e:	4608      	mov	r0, r1
 8009c50:	f002 f804 	bl	800bc5c <SDMMC_ReadFIFO>
 8009c54:	4603      	mov	r3, r0
 8009c56:	6023      	str	r3, [r4, #0]
      index++;
 8009c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c5e:	e006      	b.n	8009c6e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d012      	beq.n	8009c94 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c6e:	f7f9 f8cd 	bl	8002e0c <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7c:	d102      	bne.n	8009c84 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c82:	e05a      	b.n	8009d3a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0cf      	beq.n	8009c32 <SD_FindSCR+0x96>
 8009c92:	e000      	b.n	8009c96 <SD_FindSCR+0xfa>
      break;
 8009c94:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2208      	movs	r2, #8
 8009caa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009cac:	2308      	movs	r3, #8
 8009cae:	e044      	b.n	8009d3a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e037      	b.n	8009d3a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	e02a      	b.n	8009d3a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f240 523a 	movw	r2, #1338	; 0x53a
 8009cec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	061a      	lsls	r2, r3, #24
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cfa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d04:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	0e1b      	lsrs	r3, r3, #24
 8009d0a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	601a      	str	r2, [r3, #0]
    scr++;
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	3304      	adds	r3, #4
 8009d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	061a      	lsls	r2, r3, #24
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d2c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	0e1b      	lsrs	r3, r3, #24
 8009d32:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	373c      	adds	r7, #60	; 0x3c
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd90      	pop	{r4, r7, pc}

08009d42 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e025      	b.n	8009da2 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7f8 fe90 	bl	8002a90 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4619      	mov	r1, r3
 8009d82:	4610      	mov	r0, r2
 8009d84:	f001 fe78 	bl	800ba78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	f001 fecc 	bl	800bb30 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e04c      	b.n	8009e58 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7f8 fae2 	bl	800239c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0203 	bic.w	r2, r2, #3
 8009dee:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <HAL_SPDIFRX_Init+0xb4>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009e08:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009e0e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009e14:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009e1a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009e20:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009e26:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009e2c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009e32:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009e38:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	fff88407 	.word	0xfff88407

08009e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e09d      	b.n	8009fb2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d108      	bne.n	8009e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e86:	d009      	beq.n	8009e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	61da      	str	r2, [r3, #28]
 8009e8e:	e005      	b.n	8009e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7f8 fad4 	bl	8002464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ed2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009edc:	d902      	bls.n	8009ee4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e002      	b.n	8009eea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ef2:	d007      	beq.n	8009f04 <HAL_SPI_Init+0xa0>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009efc:	d002      	beq.n	8009f04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f14:	431a      	orrs	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f32:	431a      	orrs	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f46:	ea42 0103 	orr.w	r1, r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	f003 0204 	and.w	r2, r3, #4
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f72:	f003 0308 	and.w	r3, r3, #8
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009f80:	ea42 0103 	orr.w	r1, r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e049      	b.n	800a060 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7f8 faa1 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f000 fc29 	bl	800a850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d001      	beq.n	800a080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e054      	b.n	800a12a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2202      	movs	r2, #2
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0201 	orr.w	r2, r2, #1
 800a096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a26      	ldr	r2, [pc, #152]	; (800a138 <HAL_TIM_Base_Start_IT+0xd0>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d022      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0aa:	d01d      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a22      	ldr	r2, [pc, #136]	; (800a13c <HAL_TIM_Base_Start_IT+0xd4>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d018      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a21      	ldr	r2, [pc, #132]	; (800a140 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d013      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <HAL_TIM_Base_Start_IT+0xdc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d00e      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a1e      	ldr	r2, [pc, #120]	; (800a148 <HAL_TIM_Base_Start_IT+0xe0>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d009      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a1c      	ldr	r2, [pc, #112]	; (800a14c <HAL_TIM_Base_Start_IT+0xe4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d004      	beq.n	800a0e8 <HAL_TIM_Base_Start_IT+0x80>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a1b      	ldr	r2, [pc, #108]	; (800a150 <HAL_TIM_Base_Start_IT+0xe8>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d115      	bne.n	800a114 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689a      	ldr	r2, [r3, #8]
 800a0ee:	4b19      	ldr	r3, [pc, #100]	; (800a154 <HAL_TIM_Base_Start_IT+0xec>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b06      	cmp	r3, #6
 800a0f8:	d015      	beq.n	800a126 <HAL_TIM_Base_Start_IT+0xbe>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a100:	d011      	beq.n	800a126 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0201 	orr.w	r2, r2, #1
 800a110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a112:	e008      	b.n	800a126 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e000      	b.n	800a128 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	40010000 	.word	0x40010000
 800a13c:	40000400 	.word	0x40000400
 800a140:	40000800 	.word	0x40000800
 800a144:	40000c00 	.word	0x40000c00
 800a148:	40010400 	.word	0x40010400
 800a14c:	40014000 	.word	0x40014000
 800a150:	40001800 	.word	0x40001800
 800a154:	00010007 	.word	0x00010007

0800a158 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e049      	b.n	800a1fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d106      	bne.n	800a184 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7f8 fa40 	bl	8002604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3304      	adds	r3, #4
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f000 fb5a 	bl	800a850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d122      	bne.n	800a262 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	2b02      	cmp	r3, #2
 800a228:	d11b      	bne.n	800a262 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f06f 0202 	mvn.w	r2, #2
 800a232:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fae3 	bl	800a814 <HAL_TIM_IC_CaptureCallback>
 800a24e:	e005      	b.n	800a25c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fad5 	bl	800a800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fae6 	bl	800a828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d122      	bne.n	800a2b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d11b      	bne.n	800a2b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f06f 0204 	mvn.w	r2, #4
 800a286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fab9 	bl	800a814 <HAL_TIM_IC_CaptureCallback>
 800a2a2:	e005      	b.n	800a2b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 faab 	bl	800a800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fabc 	bl	800a828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d122      	bne.n	800a30a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f003 0308 	and.w	r3, r3, #8
 800a2ce:	2b08      	cmp	r3, #8
 800a2d0:	d11b      	bne.n	800a30a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f06f 0208 	mvn.w	r2, #8
 800a2da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2204      	movs	r2, #4
 800a2e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fa8f 	bl	800a814 <HAL_TIM_IC_CaptureCallback>
 800a2f6:	e005      	b.n	800a304 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fa81 	bl	800a800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa92 	bl	800a828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	f003 0310 	and.w	r3, r3, #16
 800a314:	2b10      	cmp	r3, #16
 800a316:	d122      	bne.n	800a35e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f003 0310 	and.w	r3, r3, #16
 800a322:	2b10      	cmp	r3, #16
 800a324:	d11b      	bne.n	800a35e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f06f 0210 	mvn.w	r2, #16
 800a32e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2208      	movs	r2, #8
 800a334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fa65 	bl	800a814 <HAL_TIM_IC_CaptureCallback>
 800a34a:	e005      	b.n	800a358 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fa57 	bl	800a800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fa68 	bl	800a828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d10e      	bne.n	800a38a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b01      	cmp	r3, #1
 800a378:	d107      	bne.n	800a38a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f06f 0201 	mvn.w	r2, #1
 800a382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7f7 fb43 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a394:	2b80      	cmp	r3, #128	; 0x80
 800a396:	d10e      	bne.n	800a3b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a2:	2b80      	cmp	r3, #128	; 0x80
 800a3a4:	d107      	bne.n	800a3b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fefb 	bl	800b1ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c4:	d10e      	bne.n	800a3e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d0:	2b80      	cmp	r3, #128	; 0x80
 800a3d2:	d107      	bne.n	800a3e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 feee 	bl	800b1c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ee:	2b40      	cmp	r3, #64	; 0x40
 800a3f0:	d10e      	bne.n	800a410 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fc:	2b40      	cmp	r3, #64	; 0x40
 800a3fe:	d107      	bne.n	800a410 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa16 	bl	800a83c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	f003 0320 	and.w	r3, r3, #32
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d10e      	bne.n	800a43c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f003 0320 	and.w	r3, r3, #32
 800a428:	2b20      	cmp	r3, #32
 800a42a:	d107      	bne.n	800a43c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f06f 0220 	mvn.w	r2, #32
 800a434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 feae 	bl	800b198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a45e:	2302      	movs	r3, #2
 800a460:	e0ff      	b.n	800a662 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b14      	cmp	r3, #20
 800a46e:	f200 80f0 	bhi.w	800a652 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a472:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a478:	0800a4cd 	.word	0x0800a4cd
 800a47c:	0800a653 	.word	0x0800a653
 800a480:	0800a653 	.word	0x0800a653
 800a484:	0800a653 	.word	0x0800a653
 800a488:	0800a50d 	.word	0x0800a50d
 800a48c:	0800a653 	.word	0x0800a653
 800a490:	0800a653 	.word	0x0800a653
 800a494:	0800a653 	.word	0x0800a653
 800a498:	0800a54f 	.word	0x0800a54f
 800a49c:	0800a653 	.word	0x0800a653
 800a4a0:	0800a653 	.word	0x0800a653
 800a4a4:	0800a653 	.word	0x0800a653
 800a4a8:	0800a58f 	.word	0x0800a58f
 800a4ac:	0800a653 	.word	0x0800a653
 800a4b0:	0800a653 	.word	0x0800a653
 800a4b4:	0800a653 	.word	0x0800a653
 800a4b8:	0800a5d1 	.word	0x0800a5d1
 800a4bc:	0800a653 	.word	0x0800a653
 800a4c0:	0800a653 	.word	0x0800a653
 800a4c4:	0800a653 	.word	0x0800a653
 800a4c8:	0800a611 	.word	0x0800a611
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fa5c 	bl	800a990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699a      	ldr	r2, [r3, #24]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f042 0208 	orr.w	r2, r2, #8
 800a4e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0204 	bic.w	r2, r2, #4
 800a4f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6999      	ldr	r1, [r3, #24]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	619a      	str	r2, [r3, #24]
      break;
 800a50a:	e0a5      	b.n	800a658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68b9      	ldr	r1, [r7, #8]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 faae 	bl	800aa74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699a      	ldr	r2, [r3, #24]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6999      	ldr	r1, [r3, #24]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	021a      	lsls	r2, r3, #8
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	619a      	str	r2, [r3, #24]
      break;
 800a54c:	e084      	b.n	800a658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fb05 	bl	800ab64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69da      	ldr	r2, [r3, #28]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f042 0208 	orr.w	r2, r2, #8
 800a568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69da      	ldr	r2, [r3, #28]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0204 	bic.w	r2, r2, #4
 800a578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	69d9      	ldr	r1, [r3, #28]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	61da      	str	r2, [r3, #28]
      break;
 800a58c:	e064      	b.n	800a658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68b9      	ldr	r1, [r7, #8]
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fb5b 	bl	800ac50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	69da      	ldr	r2, [r3, #28]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69da      	ldr	r2, [r3, #28]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	69d9      	ldr	r1, [r3, #28]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	021a      	lsls	r2, r3, #8
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	61da      	str	r2, [r3, #28]
      break;
 800a5ce:	e043      	b.n	800a658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fb92 	bl	800ad00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0208 	orr.w	r2, r2, #8
 800a5ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0204 	bic.w	r2, r2, #4
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691a      	ldr	r2, [r3, #16]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a60e:	e023      	b.n	800a658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68b9      	ldr	r1, [r7, #8]
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fbc4 	bl	800ada4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a62a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a63a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	021a      	lsls	r2, r3, #8
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a650:	e002      	b.n	800a658 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	75fb      	strb	r3, [r7, #23]
      break;
 800a656:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a660:	7dfb      	ldrb	r3, [r7, #23]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop

0800a66c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_TIM_ConfigClockSource+0x1c>
 800a684:	2302      	movs	r3, #2
 800a686:	e0b4      	b.n	800a7f2 <HAL_TIM_ConfigClockSource+0x186>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	4b56      	ldr	r3, [pc, #344]	; (800a7fc <HAL_TIM_ConfigClockSource+0x190>)
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c0:	d03e      	beq.n	800a740 <HAL_TIM_ConfigClockSource+0xd4>
 800a6c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c6:	f200 8087 	bhi.w	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ce:	f000 8086 	beq.w	800a7de <HAL_TIM_ConfigClockSource+0x172>
 800a6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d6:	d87f      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d8:	2b70      	cmp	r3, #112	; 0x70
 800a6da:	d01a      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0xa6>
 800a6dc:	2b70      	cmp	r3, #112	; 0x70
 800a6de:	d87b      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e0:	2b60      	cmp	r3, #96	; 0x60
 800a6e2:	d050      	beq.n	800a786 <HAL_TIM_ConfigClockSource+0x11a>
 800a6e4:	2b60      	cmp	r3, #96	; 0x60
 800a6e6:	d877      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e8:	2b50      	cmp	r3, #80	; 0x50
 800a6ea:	d03c      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0xfa>
 800a6ec:	2b50      	cmp	r3, #80	; 0x50
 800a6ee:	d873      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f0:	2b40      	cmp	r3, #64	; 0x40
 800a6f2:	d058      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x13a>
 800a6f4:	2b40      	cmp	r3, #64	; 0x40
 800a6f6:	d86f      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f8:	2b30      	cmp	r3, #48	; 0x30
 800a6fa:	d064      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6fc:	2b30      	cmp	r3, #48	; 0x30
 800a6fe:	d86b      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a700:	2b20      	cmp	r3, #32
 800a702:	d060      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a704:	2b20      	cmp	r3, #32
 800a706:	d867      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d05c      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a70c:	2b10      	cmp	r3, #16
 800a70e:	d05a      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a710:	e062      	b.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a722:	f000 fc0d 	bl	800af40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	609a      	str	r2, [r3, #8]
      break;
 800a73e:	e04f      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a750:	f000 fbf6 	bl	800af40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689a      	ldr	r2, [r3, #8]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a762:	609a      	str	r2, [r3, #8]
      break;
 800a764:	e03c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a772:	461a      	mov	r2, r3
 800a774:	f000 fb6a 	bl	800ae4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2150      	movs	r1, #80	; 0x50
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fbc3 	bl	800af0a <TIM_ITRx_SetConfig>
      break;
 800a784:	e02c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a792:	461a      	mov	r2, r3
 800a794:	f000 fb89 	bl	800aeaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2160      	movs	r1, #96	; 0x60
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fbb3 	bl	800af0a <TIM_ITRx_SetConfig>
      break;
 800a7a4:	e01c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f000 fb4a 	bl	800ae4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2140      	movs	r1, #64	; 0x40
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fba3 	bl	800af0a <TIM_ITRx_SetConfig>
      break;
 800a7c4:	e00c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4610      	mov	r0, r2
 800a7d2:	f000 fb9a 	bl	800af0a <TIM_ITRx_SetConfig>
      break;
 800a7d6:	e003      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
      break;
 800a7dc:	e000      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	fffeff88 	.word	0xfffeff88

0800a800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a40      	ldr	r2, [pc, #256]	; (800a964 <TIM_Base_SetConfig+0x114>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d013      	beq.n	800a890 <TIM_Base_SetConfig+0x40>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a86e:	d00f      	beq.n	800a890 <TIM_Base_SetConfig+0x40>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a3d      	ldr	r2, [pc, #244]	; (800a968 <TIM_Base_SetConfig+0x118>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d00b      	beq.n	800a890 <TIM_Base_SetConfig+0x40>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a3c      	ldr	r2, [pc, #240]	; (800a96c <TIM_Base_SetConfig+0x11c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d007      	beq.n	800a890 <TIM_Base_SetConfig+0x40>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a3b      	ldr	r2, [pc, #236]	; (800a970 <TIM_Base_SetConfig+0x120>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d003      	beq.n	800a890 <TIM_Base_SetConfig+0x40>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a3a      	ldr	r2, [pc, #232]	; (800a974 <TIM_Base_SetConfig+0x124>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d108      	bne.n	800a8a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a2f      	ldr	r2, [pc, #188]	; (800a964 <TIM_Base_SetConfig+0x114>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d02b      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b0:	d027      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a2c      	ldr	r2, [pc, #176]	; (800a968 <TIM_Base_SetConfig+0x118>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d023      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a2b      	ldr	r2, [pc, #172]	; (800a96c <TIM_Base_SetConfig+0x11c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d01f      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a2a      	ldr	r2, [pc, #168]	; (800a970 <TIM_Base_SetConfig+0x120>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d01b      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a29      	ldr	r2, [pc, #164]	; (800a974 <TIM_Base_SetConfig+0x124>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d017      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a28      	ldr	r2, [pc, #160]	; (800a978 <TIM_Base_SetConfig+0x128>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d013      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a27      	ldr	r2, [pc, #156]	; (800a97c <TIM_Base_SetConfig+0x12c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d00f      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a26      	ldr	r2, [pc, #152]	; (800a980 <TIM_Base_SetConfig+0x130>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00b      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a25      	ldr	r2, [pc, #148]	; (800a984 <TIM_Base_SetConfig+0x134>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d007      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a24      	ldr	r2, [pc, #144]	; (800a988 <TIM_Base_SetConfig+0x138>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d003      	beq.n	800a902 <TIM_Base_SetConfig+0xb2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a23      	ldr	r2, [pc, #140]	; (800a98c <TIM_Base_SetConfig+0x13c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d108      	bne.n	800a914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	689a      	ldr	r2, [r3, #8]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a0a      	ldr	r2, [pc, #40]	; (800a964 <TIM_Base_SetConfig+0x114>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_Base_SetConfig+0xf8>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a0c      	ldr	r2, [pc, #48]	; (800a974 <TIM_Base_SetConfig+0x124>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d103      	bne.n	800a950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	691a      	ldr	r2, [r3, #16]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	615a      	str	r2, [r3, #20]
}
 800a956:	bf00      	nop
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	40010000 	.word	0x40010000
 800a968:	40000400 	.word	0x40000400
 800a96c:	40000800 	.word	0x40000800
 800a970:	40000c00 	.word	0x40000c00
 800a974:	40010400 	.word	0x40010400
 800a978:	40014000 	.word	0x40014000
 800a97c:	40014400 	.word	0x40014400
 800a980:	40014800 	.word	0x40014800
 800a984:	40001800 	.word	0x40001800
 800a988:	40001c00 	.word	0x40001c00
 800a98c:	40002000 	.word	0x40002000

0800a990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f023 0201 	bic.w	r2, r3, #1
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4b2b      	ldr	r3, [pc, #172]	; (800aa68 <TIM_OC1_SetConfig+0xd8>)
 800a9bc:	4013      	ands	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f023 0302 	bic.w	r3, r3, #2
 800a9d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a21      	ldr	r2, [pc, #132]	; (800aa6c <TIM_OC1_SetConfig+0xdc>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d003      	beq.n	800a9f4 <TIM_OC1_SetConfig+0x64>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a20      	ldr	r2, [pc, #128]	; (800aa70 <TIM_OC1_SetConfig+0xe0>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d10c      	bne.n	800aa0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f023 0308 	bic.w	r3, r3, #8
 800a9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f023 0304 	bic.w	r3, r3, #4
 800aa0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a16      	ldr	r2, [pc, #88]	; (800aa6c <TIM_OC1_SetConfig+0xdc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_OC1_SetConfig+0x8e>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <TIM_OC1_SetConfig+0xe0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d111      	bne.n	800aa42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	621a      	str	r2, [r3, #32]
}
 800aa5c:	bf00      	nop
 800aa5e:	371c      	adds	r7, #28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	fffeff8f 	.word	0xfffeff8f
 800aa6c:	40010000 	.word	0x40010000
 800aa70:	40010400 	.word	0x40010400

0800aa74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f023 0210 	bic.w	r2, r3, #16
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	; (800ab58 <TIM_OC2_SetConfig+0xe4>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f023 0320 	bic.w	r3, r3, #32
 800aabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a23      	ldr	r2, [pc, #140]	; (800ab5c <TIM_OC2_SetConfig+0xe8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC2_SetConfig+0x68>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a22      	ldr	r2, [pc, #136]	; (800ab60 <TIM_OC2_SetConfig+0xec>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10d      	bne.n	800aaf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a18      	ldr	r2, [pc, #96]	; (800ab5c <TIM_OC2_SetConfig+0xe8>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d003      	beq.n	800ab08 <TIM_OC2_SetConfig+0x94>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a17      	ldr	r2, [pc, #92]	; (800ab60 <TIM_OC2_SetConfig+0xec>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d113      	bne.n	800ab30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	feff8fff 	.word	0xfeff8fff
 800ab5c:	40010000 	.word	0x40010000
 800ab60:	40010400 	.word	0x40010400

0800ab64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <TIM_OC3_SetConfig+0xe0>)
 800ab90:	4013      	ands	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0303 	bic.w	r3, r3, #3
 800ab9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a22      	ldr	r2, [pc, #136]	; (800ac48 <TIM_OC3_SetConfig+0xe4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d003      	beq.n	800abca <TIM_OC3_SetConfig+0x66>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a21      	ldr	r2, [pc, #132]	; (800ac4c <TIM_OC3_SetConfig+0xe8>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d10d      	bne.n	800abe6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	4313      	orrs	r3, r2
 800abdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <TIM_OC3_SetConfig+0xe4>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d003      	beq.n	800abf6 <TIM_OC3_SetConfig+0x92>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a16      	ldr	r2, [pc, #88]	; (800ac4c <TIM_OC3_SetConfig+0xe8>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d113      	bne.n	800ac1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	621a      	str	r2, [r3, #32]
}
 800ac38:	bf00      	nop
 800ac3a:	371c      	adds	r7, #28
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	fffeff8f 	.word	0xfffeff8f
 800ac48:	40010000 	.word	0x40010000
 800ac4c:	40010400 	.word	0x40010400

0800ac50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	4b1e      	ldr	r3, [pc, #120]	; (800acf4 <TIM_OC4_SetConfig+0xa4>)
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	031b      	lsls	r3, r3, #12
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a13      	ldr	r2, [pc, #76]	; (800acf8 <TIM_OC4_SetConfig+0xa8>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d003      	beq.n	800acb8 <TIM_OC4_SetConfig+0x68>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a12      	ldr	r2, [pc, #72]	; (800acfc <TIM_OC4_SetConfig+0xac>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d109      	bne.n	800accc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	019b      	lsls	r3, r3, #6
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	4313      	orrs	r3, r2
 800acca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	621a      	str	r2, [r3, #32]
}
 800ace6:	bf00      	nop
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	feff8fff 	.word	0xfeff8fff
 800acf8:	40010000 	.word	0x40010000
 800acfc:	40010400 	.word	0x40010400

0800ad00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4b1b      	ldr	r3, [pc, #108]	; (800ad98 <TIM_OC5_SetConfig+0x98>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a12      	ldr	r2, [pc, #72]	; (800ad9c <TIM_OC5_SetConfig+0x9c>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d003      	beq.n	800ad5e <TIM_OC5_SetConfig+0x5e>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a11      	ldr	r2, [pc, #68]	; (800ada0 <TIM_OC5_SetConfig+0xa0>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d109      	bne.n	800ad72 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	021b      	lsls	r3, r3, #8
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	621a      	str	r2, [r3, #32]
}
 800ad8c:	bf00      	nop
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	fffeff8f 	.word	0xfffeff8f
 800ad9c:	40010000 	.word	0x40010000
 800ada0:	40010400 	.word	0x40010400

0800ada4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4b1c      	ldr	r3, [pc, #112]	; (800ae40 <TIM_OC6_SetConfig+0x9c>)
 800add0:	4013      	ands	r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	021b      	lsls	r3, r3, #8
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	4313      	orrs	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ade6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	051b      	lsls	r3, r3, #20
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <TIM_OC6_SetConfig+0xa0>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d003      	beq.n	800ae04 <TIM_OC6_SetConfig+0x60>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a12      	ldr	r2, [pc, #72]	; (800ae48 <TIM_OC6_SetConfig+0xa4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d109      	bne.n	800ae18 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	029b      	lsls	r3, r3, #10
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	621a      	str	r2, [r3, #32]
}
 800ae32:	bf00      	nop
 800ae34:	371c      	adds	r7, #28
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	feff8fff 	.word	0xfeff8fff
 800ae44:	40010000 	.word	0x40010000
 800ae48:	40010400 	.word	0x40010400

0800ae4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f023 0201 	bic.w	r2, r3, #1
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f023 030a 	bic.w	r3, r3, #10
 800ae88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	621a      	str	r2, [r3, #32]
}
 800ae9e:	bf00      	nop
 800aea0:	371c      	adds	r7, #28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b087      	sub	sp, #28
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	60f8      	str	r0, [r7, #12]
 800aeb2:	60b9      	str	r1, [r7, #8]
 800aeb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	f023 0210 	bic.w	r2, r3, #16
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	031b      	lsls	r3, r3, #12
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	4313      	orrs	r3, r2
 800aede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	621a      	str	r2, [r3, #32]
}
 800aefe:	bf00      	nop
 800af00:	371c      	adds	r7, #28
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	f043 0307 	orr.w	r3, r3, #7
 800af2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	609a      	str	r2, [r3, #8]
}
 800af34:	bf00      	nop
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	021a      	lsls	r2, r3, #8
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	431a      	orrs	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	4313      	orrs	r3, r2
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	609a      	str	r2, [r3, #8]
}
 800af74:	bf00      	nop
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af94:	2302      	movs	r3, #2
 800af96:	e06d      	b.n	800b074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a30      	ldr	r2, [pc, #192]	; (800b080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d004      	beq.n	800afcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a2f      	ldr	r2, [pc, #188]	; (800b084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d108      	bne.n	800afde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a20      	ldr	r2, [pc, #128]	; (800b080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d022      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00a:	d01d      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1d      	ldr	r2, [pc, #116]	; (800b088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d018      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a1c      	ldr	r2, [pc, #112]	; (800b08c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d013      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a1a      	ldr	r2, [pc, #104]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d00e      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a15      	ldr	r2, [pc, #84]	; (800b084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d009      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a16      	ldr	r2, [pc, #88]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d004      	beq.n	800b048 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a15      	ldr	r2, [pc, #84]	; (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d10c      	bne.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b04e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	4313      	orrs	r3, r2
 800b058:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	40010000 	.word	0x40010000
 800b084:	40010400 	.word	0x40010400
 800b088:	40000400 	.word	0x40000400
 800b08c:	40000800 	.word	0x40000800
 800b090:	40000c00 	.word	0x40000c00
 800b094:	40014000 	.word	0x40014000
 800b098:	40001800 	.word	0x40001800

0800b09c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d101      	bne.n	800b0b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e065      	b.n	800b184 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	4313      	orrs	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	041b      	lsls	r3, r3, #16
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a16      	ldr	r2, [pc, #88]	; (800b190 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d004      	beq.n	800b146 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a14      	ldr	r2, [pc, #80]	; (800b194 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d115      	bne.n	800b172 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	051b      	lsls	r3, r3, #20
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	40010000 	.word	0x40010000
 800b194:	40010400 	.word	0x40010400

0800b198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e040      	b.n	800b268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7f7 faf2 	bl	80027e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2224      	movs	r2, #36	; 0x24
 800b200:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f82c 	bl	800b270 <UART_SetConfig>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e022      	b.n	800b268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fa84 	bl	800b738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b23e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689a      	ldr	r2, [r3, #8]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b24e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fb0b 	bl	800b87c <UART_CheckIdleState>
 800b266:	4603      	mov	r3, r0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	4313      	orrs	r3, r2
 800b292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	4ba6      	ldr	r3, [pc, #664]	; (800b534 <UART_SetConfig+0x2c4>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	6812      	ldr	r2, [r2, #0]
 800b2a2:	6979      	ldr	r1, [r7, #20]
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68da      	ldr	r2, [r3, #12]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	430a      	orrs	r2, r1
 800b2e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a94      	ldr	r2, [pc, #592]	; (800b538 <UART_SetConfig+0x2c8>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d120      	bne.n	800b32e <UART_SetConfig+0xbe>
 800b2ec:	4b93      	ldr	r3, [pc, #588]	; (800b53c <UART_SetConfig+0x2cc>)
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f2:	f003 0303 	and.w	r3, r3, #3
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d816      	bhi.n	800b328 <UART_SetConfig+0xb8>
 800b2fa:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <UART_SetConfig+0x90>)
 800b2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b300:	0800b311 	.word	0x0800b311
 800b304:	0800b31d 	.word	0x0800b31d
 800b308:	0800b317 	.word	0x0800b317
 800b30c:	0800b323 	.word	0x0800b323
 800b310:	2301      	movs	r3, #1
 800b312:	77fb      	strb	r3, [r7, #31]
 800b314:	e150      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b316:	2302      	movs	r3, #2
 800b318:	77fb      	strb	r3, [r7, #31]
 800b31a:	e14d      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b31c:	2304      	movs	r3, #4
 800b31e:	77fb      	strb	r3, [r7, #31]
 800b320:	e14a      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b322:	2308      	movs	r3, #8
 800b324:	77fb      	strb	r3, [r7, #31]
 800b326:	e147      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b328:	2310      	movs	r3, #16
 800b32a:	77fb      	strb	r3, [r7, #31]
 800b32c:	e144      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a83      	ldr	r2, [pc, #524]	; (800b540 <UART_SetConfig+0x2d0>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d132      	bne.n	800b39e <UART_SetConfig+0x12e>
 800b338:	4b80      	ldr	r3, [pc, #512]	; (800b53c <UART_SetConfig+0x2cc>)
 800b33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33e:	f003 030c 	and.w	r3, r3, #12
 800b342:	2b0c      	cmp	r3, #12
 800b344:	d828      	bhi.n	800b398 <UART_SetConfig+0x128>
 800b346:	a201      	add	r2, pc, #4	; (adr r2, 800b34c <UART_SetConfig+0xdc>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b381 	.word	0x0800b381
 800b350:	0800b399 	.word	0x0800b399
 800b354:	0800b399 	.word	0x0800b399
 800b358:	0800b399 	.word	0x0800b399
 800b35c:	0800b38d 	.word	0x0800b38d
 800b360:	0800b399 	.word	0x0800b399
 800b364:	0800b399 	.word	0x0800b399
 800b368:	0800b399 	.word	0x0800b399
 800b36c:	0800b387 	.word	0x0800b387
 800b370:	0800b399 	.word	0x0800b399
 800b374:	0800b399 	.word	0x0800b399
 800b378:	0800b399 	.word	0x0800b399
 800b37c:	0800b393 	.word	0x0800b393
 800b380:	2300      	movs	r3, #0
 800b382:	77fb      	strb	r3, [r7, #31]
 800b384:	e118      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b386:	2302      	movs	r3, #2
 800b388:	77fb      	strb	r3, [r7, #31]
 800b38a:	e115      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b38c:	2304      	movs	r3, #4
 800b38e:	77fb      	strb	r3, [r7, #31]
 800b390:	e112      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b392:	2308      	movs	r3, #8
 800b394:	77fb      	strb	r3, [r7, #31]
 800b396:	e10f      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b398:	2310      	movs	r3, #16
 800b39a:	77fb      	strb	r3, [r7, #31]
 800b39c:	e10c      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a68      	ldr	r2, [pc, #416]	; (800b544 <UART_SetConfig+0x2d4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d120      	bne.n	800b3ea <UART_SetConfig+0x17a>
 800b3a8:	4b64      	ldr	r3, [pc, #400]	; (800b53c <UART_SetConfig+0x2cc>)
 800b3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3b2:	2b30      	cmp	r3, #48	; 0x30
 800b3b4:	d013      	beq.n	800b3de <UART_SetConfig+0x16e>
 800b3b6:	2b30      	cmp	r3, #48	; 0x30
 800b3b8:	d814      	bhi.n	800b3e4 <UART_SetConfig+0x174>
 800b3ba:	2b20      	cmp	r3, #32
 800b3bc:	d009      	beq.n	800b3d2 <UART_SetConfig+0x162>
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	d810      	bhi.n	800b3e4 <UART_SetConfig+0x174>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <UART_SetConfig+0x15c>
 800b3c6:	2b10      	cmp	r3, #16
 800b3c8:	d006      	beq.n	800b3d8 <UART_SetConfig+0x168>
 800b3ca:	e00b      	b.n	800b3e4 <UART_SetConfig+0x174>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	77fb      	strb	r3, [r7, #31]
 800b3d0:	e0f2      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	77fb      	strb	r3, [r7, #31]
 800b3d6:	e0ef      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b3d8:	2304      	movs	r3, #4
 800b3da:	77fb      	strb	r3, [r7, #31]
 800b3dc:	e0ec      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b3de:	2308      	movs	r3, #8
 800b3e0:	77fb      	strb	r3, [r7, #31]
 800b3e2:	e0e9      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b3e4:	2310      	movs	r3, #16
 800b3e6:	77fb      	strb	r3, [r7, #31]
 800b3e8:	e0e6      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a56      	ldr	r2, [pc, #344]	; (800b548 <UART_SetConfig+0x2d8>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d120      	bne.n	800b436 <UART_SetConfig+0x1c6>
 800b3f4:	4b51      	ldr	r3, [pc, #324]	; (800b53c <UART_SetConfig+0x2cc>)
 800b3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b3fe:	2bc0      	cmp	r3, #192	; 0xc0
 800b400:	d013      	beq.n	800b42a <UART_SetConfig+0x1ba>
 800b402:	2bc0      	cmp	r3, #192	; 0xc0
 800b404:	d814      	bhi.n	800b430 <UART_SetConfig+0x1c0>
 800b406:	2b80      	cmp	r3, #128	; 0x80
 800b408:	d009      	beq.n	800b41e <UART_SetConfig+0x1ae>
 800b40a:	2b80      	cmp	r3, #128	; 0x80
 800b40c:	d810      	bhi.n	800b430 <UART_SetConfig+0x1c0>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d002      	beq.n	800b418 <UART_SetConfig+0x1a8>
 800b412:	2b40      	cmp	r3, #64	; 0x40
 800b414:	d006      	beq.n	800b424 <UART_SetConfig+0x1b4>
 800b416:	e00b      	b.n	800b430 <UART_SetConfig+0x1c0>
 800b418:	2300      	movs	r3, #0
 800b41a:	77fb      	strb	r3, [r7, #31]
 800b41c:	e0cc      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b41e:	2302      	movs	r3, #2
 800b420:	77fb      	strb	r3, [r7, #31]
 800b422:	e0c9      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b424:	2304      	movs	r3, #4
 800b426:	77fb      	strb	r3, [r7, #31]
 800b428:	e0c6      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b42a:	2308      	movs	r3, #8
 800b42c:	77fb      	strb	r3, [r7, #31]
 800b42e:	e0c3      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b430:	2310      	movs	r3, #16
 800b432:	77fb      	strb	r3, [r7, #31]
 800b434:	e0c0      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a44      	ldr	r2, [pc, #272]	; (800b54c <UART_SetConfig+0x2dc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d125      	bne.n	800b48c <UART_SetConfig+0x21c>
 800b440:	4b3e      	ldr	r3, [pc, #248]	; (800b53c <UART_SetConfig+0x2cc>)
 800b442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b44a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b44e:	d017      	beq.n	800b480 <UART_SetConfig+0x210>
 800b450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b454:	d817      	bhi.n	800b486 <UART_SetConfig+0x216>
 800b456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b45a:	d00b      	beq.n	800b474 <UART_SetConfig+0x204>
 800b45c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b460:	d811      	bhi.n	800b486 <UART_SetConfig+0x216>
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <UART_SetConfig+0x1fe>
 800b466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b46a:	d006      	beq.n	800b47a <UART_SetConfig+0x20a>
 800b46c:	e00b      	b.n	800b486 <UART_SetConfig+0x216>
 800b46e:	2300      	movs	r3, #0
 800b470:	77fb      	strb	r3, [r7, #31]
 800b472:	e0a1      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b474:	2302      	movs	r3, #2
 800b476:	77fb      	strb	r3, [r7, #31]
 800b478:	e09e      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b47a:	2304      	movs	r3, #4
 800b47c:	77fb      	strb	r3, [r7, #31]
 800b47e:	e09b      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b480:	2308      	movs	r3, #8
 800b482:	77fb      	strb	r3, [r7, #31]
 800b484:	e098      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b486:	2310      	movs	r3, #16
 800b488:	77fb      	strb	r3, [r7, #31]
 800b48a:	e095      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a2f      	ldr	r2, [pc, #188]	; (800b550 <UART_SetConfig+0x2e0>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d125      	bne.n	800b4e2 <UART_SetConfig+0x272>
 800b496:	4b29      	ldr	r3, [pc, #164]	; (800b53c <UART_SetConfig+0x2cc>)
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4a4:	d017      	beq.n	800b4d6 <UART_SetConfig+0x266>
 800b4a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4aa:	d817      	bhi.n	800b4dc <UART_SetConfig+0x26c>
 800b4ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4b0:	d00b      	beq.n	800b4ca <UART_SetConfig+0x25a>
 800b4b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4b6:	d811      	bhi.n	800b4dc <UART_SetConfig+0x26c>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <UART_SetConfig+0x254>
 800b4bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4c0:	d006      	beq.n	800b4d0 <UART_SetConfig+0x260>
 800b4c2:	e00b      	b.n	800b4dc <UART_SetConfig+0x26c>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	77fb      	strb	r3, [r7, #31]
 800b4c8:	e076      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	77fb      	strb	r3, [r7, #31]
 800b4ce:	e073      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	77fb      	strb	r3, [r7, #31]
 800b4d4:	e070      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b4d6:	2308      	movs	r3, #8
 800b4d8:	77fb      	strb	r3, [r7, #31]
 800b4da:	e06d      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b4dc:	2310      	movs	r3, #16
 800b4de:	77fb      	strb	r3, [r7, #31]
 800b4e0:	e06a      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a1b      	ldr	r2, [pc, #108]	; (800b554 <UART_SetConfig+0x2e4>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d138      	bne.n	800b55e <UART_SetConfig+0x2ee>
 800b4ec:	4b13      	ldr	r3, [pc, #76]	; (800b53c <UART_SetConfig+0x2cc>)
 800b4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b4f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4fa:	d017      	beq.n	800b52c <UART_SetConfig+0x2bc>
 800b4fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b500:	d82a      	bhi.n	800b558 <UART_SetConfig+0x2e8>
 800b502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b506:	d00b      	beq.n	800b520 <UART_SetConfig+0x2b0>
 800b508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b50c:	d824      	bhi.n	800b558 <UART_SetConfig+0x2e8>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <UART_SetConfig+0x2aa>
 800b512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b516:	d006      	beq.n	800b526 <UART_SetConfig+0x2b6>
 800b518:	e01e      	b.n	800b558 <UART_SetConfig+0x2e8>
 800b51a:	2300      	movs	r3, #0
 800b51c:	77fb      	strb	r3, [r7, #31]
 800b51e:	e04b      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b520:	2302      	movs	r3, #2
 800b522:	77fb      	strb	r3, [r7, #31]
 800b524:	e048      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b526:	2304      	movs	r3, #4
 800b528:	77fb      	strb	r3, [r7, #31]
 800b52a:	e045      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b52c:	2308      	movs	r3, #8
 800b52e:	77fb      	strb	r3, [r7, #31]
 800b530:	e042      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b532:	bf00      	nop
 800b534:	efff69f3 	.word	0xefff69f3
 800b538:	40011000 	.word	0x40011000
 800b53c:	40023800 	.word	0x40023800
 800b540:	40004400 	.word	0x40004400
 800b544:	40004800 	.word	0x40004800
 800b548:	40004c00 	.word	0x40004c00
 800b54c:	40005000 	.word	0x40005000
 800b550:	40011400 	.word	0x40011400
 800b554:	40007800 	.word	0x40007800
 800b558:	2310      	movs	r3, #16
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	e02c      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a72      	ldr	r2, [pc, #456]	; (800b72c <UART_SetConfig+0x4bc>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d125      	bne.n	800b5b4 <UART_SetConfig+0x344>
 800b568:	4b71      	ldr	r3, [pc, #452]	; (800b730 <UART_SetConfig+0x4c0>)
 800b56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b572:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b576:	d017      	beq.n	800b5a8 <UART_SetConfig+0x338>
 800b578:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b57c:	d817      	bhi.n	800b5ae <UART_SetConfig+0x33e>
 800b57e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b582:	d00b      	beq.n	800b59c <UART_SetConfig+0x32c>
 800b584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b588:	d811      	bhi.n	800b5ae <UART_SetConfig+0x33e>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <UART_SetConfig+0x326>
 800b58e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b592:	d006      	beq.n	800b5a2 <UART_SetConfig+0x332>
 800b594:	e00b      	b.n	800b5ae <UART_SetConfig+0x33e>
 800b596:	2300      	movs	r3, #0
 800b598:	77fb      	strb	r3, [r7, #31]
 800b59a:	e00d      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b59c:	2302      	movs	r3, #2
 800b59e:	77fb      	strb	r3, [r7, #31]
 800b5a0:	e00a      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b5a2:	2304      	movs	r3, #4
 800b5a4:	77fb      	strb	r3, [r7, #31]
 800b5a6:	e007      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b5a8:	2308      	movs	r3, #8
 800b5aa:	77fb      	strb	r3, [r7, #31]
 800b5ac:	e004      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b5ae:	2310      	movs	r3, #16
 800b5b0:	77fb      	strb	r3, [r7, #31]
 800b5b2:	e001      	b.n	800b5b8 <UART_SetConfig+0x348>
 800b5b4:	2310      	movs	r3, #16
 800b5b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	69db      	ldr	r3, [r3, #28]
 800b5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c0:	d15b      	bne.n	800b67a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b5c2:	7ffb      	ldrb	r3, [r7, #31]
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d828      	bhi.n	800b61a <UART_SetConfig+0x3aa>
 800b5c8:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <UART_SetConfig+0x360>)
 800b5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ce:	bf00      	nop
 800b5d0:	0800b5f5 	.word	0x0800b5f5
 800b5d4:	0800b5fd 	.word	0x0800b5fd
 800b5d8:	0800b605 	.word	0x0800b605
 800b5dc:	0800b61b 	.word	0x0800b61b
 800b5e0:	0800b60b 	.word	0x0800b60b
 800b5e4:	0800b61b 	.word	0x0800b61b
 800b5e8:	0800b61b 	.word	0x0800b61b
 800b5ec:	0800b61b 	.word	0x0800b61b
 800b5f0:	0800b613 	.word	0x0800b613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5f4:	f7fb ffee 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 800b5f8:	61b8      	str	r0, [r7, #24]
        break;
 800b5fa:	e013      	b.n	800b624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5fc:	f7fb fffe 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 800b600:	61b8      	str	r0, [r7, #24]
        break;
 800b602:	e00f      	b.n	800b624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b604:	4b4b      	ldr	r3, [pc, #300]	; (800b734 <UART_SetConfig+0x4c4>)
 800b606:	61bb      	str	r3, [r7, #24]
        break;
 800b608:	e00c      	b.n	800b624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b60a:	f7fb ff11 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 800b60e:	61b8      	str	r0, [r7, #24]
        break;
 800b610:	e008      	b.n	800b624 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b616:	61bb      	str	r3, [r7, #24]
        break;
 800b618:	e004      	b.n	800b624 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	77bb      	strb	r3, [r7, #30]
        break;
 800b622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d074      	beq.n	800b714 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	005a      	lsls	r2, r3, #1
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	085b      	lsrs	r3, r3, #1
 800b634:	441a      	add	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b0f      	cmp	r3, #15
 800b644:	d916      	bls.n	800b674 <UART_SetConfig+0x404>
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b64c:	d212      	bcs.n	800b674 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	b29b      	uxth	r3, r3
 800b652:	f023 030f 	bic.w	r3, r3, #15
 800b656:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	f003 0307 	and.w	r3, r3, #7
 800b662:	b29a      	uxth	r2, r3
 800b664:	89fb      	ldrh	r3, [r7, #14]
 800b666:	4313      	orrs	r3, r2
 800b668:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	89fa      	ldrh	r2, [r7, #14]
 800b670:	60da      	str	r2, [r3, #12]
 800b672:	e04f      	b.n	800b714 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	77bb      	strb	r3, [r7, #30]
 800b678:	e04c      	b.n	800b714 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b67a:	7ffb      	ldrb	r3, [r7, #31]
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d828      	bhi.n	800b6d2 <UART_SetConfig+0x462>
 800b680:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <UART_SetConfig+0x418>)
 800b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b6ad 	.word	0x0800b6ad
 800b68c:	0800b6b5 	.word	0x0800b6b5
 800b690:	0800b6bd 	.word	0x0800b6bd
 800b694:	0800b6d3 	.word	0x0800b6d3
 800b698:	0800b6c3 	.word	0x0800b6c3
 800b69c:	0800b6d3 	.word	0x0800b6d3
 800b6a0:	0800b6d3 	.word	0x0800b6d3
 800b6a4:	0800b6d3 	.word	0x0800b6d3
 800b6a8:	0800b6cb 	.word	0x0800b6cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6ac:	f7fb ff92 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 800b6b0:	61b8      	str	r0, [r7, #24]
        break;
 800b6b2:	e013      	b.n	800b6dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6b4:	f7fb ffa2 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 800b6b8:	61b8      	str	r0, [r7, #24]
        break;
 800b6ba:	e00f      	b.n	800b6dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6bc:	4b1d      	ldr	r3, [pc, #116]	; (800b734 <UART_SetConfig+0x4c4>)
 800b6be:	61bb      	str	r3, [r7, #24]
        break;
 800b6c0:	e00c      	b.n	800b6dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6c2:	f7fb feb5 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 800b6c6:	61b8      	str	r0, [r7, #24]
        break;
 800b6c8:	e008      	b.n	800b6dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ce:	61bb      	str	r3, [r7, #24]
        break;
 800b6d0:	e004      	b.n	800b6dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	77bb      	strb	r3, [r7, #30]
        break;
 800b6da:	bf00      	nop
    }

    if (pclk != 0U)
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d018      	beq.n	800b714 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	085a      	lsrs	r2, r3, #1
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	441a      	add	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b0f      	cmp	r3, #15
 800b6fa:	d909      	bls.n	800b710 <UART_SetConfig+0x4a0>
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b702:	d205      	bcs.n	800b710 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	b29a      	uxth	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	60da      	str	r2, [r3, #12]
 800b70e:	e001      	b.n	800b714 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b720:	7fbb      	ldrb	r3, [r7, #30]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3720      	adds	r7, #32
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	40007c00 	.word	0x40007c00
 800b730:	40023800 	.word	0x40023800
 800b734:	00f42400 	.word	0x00f42400

0800b738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	f003 0302 	and.w	r3, r3, #2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	430a      	orrs	r2, r1
 800b782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00a      	beq.n	800b7a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	f003 0308 	and.w	r3, r3, #8
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00a      	beq.n	800b7c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	430a      	orrs	r2, r1
 800b7c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	f003 0310 	and.w	r3, r3, #16
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00a      	beq.n	800b7ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	f003 0320 	and.w	r3, r3, #32
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01a      	beq.n	800b84e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b836:	d10a      	bne.n	800b84e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	605a      	str	r2, [r3, #4]
  }
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af02      	add	r7, sp, #8
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b88c:	f7f7 fabe 	bl	8002e0c <HAL_GetTick>
 800b890:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0308 	and.w	r3, r3, #8
 800b89c:	2b08      	cmp	r3, #8
 800b89e:	d10e      	bne.n	800b8be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f81b 	bl	800b8ea <UART_WaitOnFlagUntilTimeout>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e011      	b.n	800b8e2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b09c      	sub	sp, #112	; 0x70
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	603b      	str	r3, [r7, #0]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8fa:	e0a7      	b.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	f000 80a3 	beq.w	800ba4c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b906:	f7f7 fa81 	bl	8002e0c <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b912:	429a      	cmp	r2, r3
 800b914:	d302      	bcc.n	800b91c <UART_WaitOnFlagUntilTimeout+0x32>
 800b916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d13f      	bne.n	800b99c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b92c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b930:	667b      	str	r3, [r7, #100]	; 0x64
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b93a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b93c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b942:	e841 2300 	strex	r3, r2, [r1]
 800b946:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1e6      	bne.n	800b91c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3308      	adds	r3, #8
 800b954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b958:	e853 3f00 	ldrex	r3, [r3]
 800b95c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b960:	f023 0301 	bic.w	r3, r3, #1
 800b964:	663b      	str	r3, [r7, #96]	; 0x60
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	3308      	adds	r3, #8
 800b96c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b96e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b970:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b976:	e841 2300 	strex	r3, r2, [r1]
 800b97a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b97c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1e5      	bne.n	800b94e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2220      	movs	r2, #32
 800b986:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2220      	movs	r2, #32
 800b98c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	e068      	b.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0304 	and.w	r3, r3, #4
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d050      	beq.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9b8:	d148      	bne.n	800ba4c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b9d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e6      	bne.n	800b9c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	e853 3f00 	ldrex	r3, [r3]
 800ba04:	613b      	str	r3, [r7, #16]
   return(result);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f023 0301 	bic.w	r3, r3, #1
 800ba0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3308      	adds	r3, #8
 800ba14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba16:	623a      	str	r2, [r7, #32]
 800ba18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	69f9      	ldr	r1, [r7, #28]
 800ba1c:	6a3a      	ldr	r2, [r7, #32]
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e5      	bne.n	800b9f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2220      	movs	r2, #32
 800ba2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	e010      	b.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	69da      	ldr	r2, [r3, #28]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	4013      	ands	r3, r2
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	bf0c      	ite	eq
 800ba5c:	2301      	moveq	r3, #1
 800ba5e:	2300      	movne	r3, #0
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	461a      	mov	r2, r3
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	f43f af48 	beq.w	800b8fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3770      	adds	r7, #112	; 0x70
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d121      	bne.n	800bace <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	4b27      	ldr	r3, [pc, #156]	; (800bb2c <FMC_SDRAM_Init+0xb4>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	6851      	ldr	r1, [r2, #4]
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	6892      	ldr	r2, [r2, #8]
 800ba9a:	4311      	orrs	r1, r2
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	68d2      	ldr	r2, [r2, #12]
 800baa0:	4311      	orrs	r1, r2
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	6912      	ldr	r2, [r2, #16]
 800baa6:	4311      	orrs	r1, r2
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	6952      	ldr	r2, [r2, #20]
 800baac:	4311      	orrs	r1, r2
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	6992      	ldr	r2, [r2, #24]
 800bab2:	4311      	orrs	r1, r2
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	69d2      	ldr	r2, [r2, #28]
 800bab8:	4311      	orrs	r1, r2
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	6a12      	ldr	r2, [r2, #32]
 800babe:	4311      	orrs	r1, r2
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bac4:	430a      	orrs	r2, r1
 800bac6:	431a      	orrs	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	e026      	b.n	800bb1c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	69d9      	ldr	r1, [r3, #28]
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	4319      	orrs	r1, r3
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	430b      	orrs	r3, r1
 800bae6:	431a      	orrs	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	4b0e      	ldr	r3, [pc, #56]	; (800bb2c <FMC_SDRAM_Init+0xb4>)
 800baf2:	4013      	ands	r3, r2
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	6851      	ldr	r1, [r2, #4]
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	6892      	ldr	r2, [r2, #8]
 800bafc:	4311      	orrs	r1, r2
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	68d2      	ldr	r2, [r2, #12]
 800bb02:	4311      	orrs	r1, r2
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	6912      	ldr	r2, [r2, #16]
 800bb08:	4311      	orrs	r1, r2
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	6952      	ldr	r2, [r2, #20]
 800bb0e:	4311      	orrs	r1, r2
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	6992      	ldr	r2, [r2, #24]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	ffff8000 	.word	0xffff8000

0800bb30 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d128      	bne.n	800bb94 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	1e59      	subs	r1, r3, #1
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	011b      	lsls	r3, r3, #4
 800bb58:	4319      	orrs	r1, r3
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	021b      	lsls	r3, r3, #8
 800bb62:	4319      	orrs	r1, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	031b      	lsls	r3, r3, #12
 800bb6c:	4319      	orrs	r1, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	041b      	lsls	r3, r3, #16
 800bb76:	4319      	orrs	r1, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	051b      	lsls	r3, r3, #20
 800bb80:	4319      	orrs	r1, r3
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	061b      	lsls	r3, r3, #24
 800bb8a:	430b      	orrs	r3, r1
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	609a      	str	r2, [r3, #8]
 800bb92:	e02d      	b.n	800bbf0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	689a      	ldr	r2, [r3, #8]
 800bb98:	4b19      	ldr	r3, [pc, #100]	; (800bc00 <FMC_SDRAM_Timing_Init+0xd0>)
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	68d2      	ldr	r2, [r2, #12]
 800bba0:	3a01      	subs	r2, #1
 800bba2:	0311      	lsls	r1, r2, #12
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	6952      	ldr	r2, [r2, #20]
 800bba8:	3a01      	subs	r2, #1
 800bbaa:	0512      	lsls	r2, r2, #20
 800bbac:	430a      	orrs	r2, r1
 800bbae:	431a      	orrs	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	1e59      	subs	r1, r3, #1
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	011b      	lsls	r3, r3, #4
 800bbca:	4319      	orrs	r1, r3
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	021b      	lsls	r3, r3, #8
 800bbd4:	4319      	orrs	r1, r3
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	4319      	orrs	r1, r3
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	061b      	lsls	r3, r3, #24
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	431a      	orrs	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	ff0f0fff 	.word	0xff0f0fff

0800bc04 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc04:	b084      	sub	sp, #16
 800bc06:	b480      	push	{r7}
 800bc08:	b085      	sub	sp, #20
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	f107 001c 	add.w	r0, r7, #28
 800bc12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bc1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bc1e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bc22:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bc26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bc2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bc2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <SDMMC_Init+0x54>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	431a      	orrs	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	b004      	add	sp, #16
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	ffff8100 	.word	0xffff8100

0800bc5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2203      	movs	r2, #3
 800bc82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bc92:	b480      	push	{r7}
 800bc94:	b083      	sub	sp, #12
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 0303 	and.w	r3, r3, #3
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
	...

0800bcb0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bcd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bcda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68da      	ldr	r2, [r3, #12]
 800bce6:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <SDMMC_SendCommand+0x50>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	fffff000 	.word	0xfffff000

0800bd04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	b2db      	uxtb	r3, r3
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b085      	sub	sp, #20
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3314      	adds	r3, #20
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	4413      	add	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
}  
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bd70:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bd76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd82:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0

}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b088      	sub	sp, #32
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bdaa:	2310      	movs	r3, #16
 800bdac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdae:	2340      	movs	r3, #64	; 0x40
 800bdb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdbc:	f107 0308 	add.w	r3, r7, #8
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff ff74 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bdc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdcc:	2110      	movs	r1, #16
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fa1a 	bl	800c208 <SDMMC_GetCmdResp1>
 800bdd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdd6:	69fb      	ldr	r3, [r7, #28]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3720      	adds	r7, #32
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bdee:	2311      	movs	r3, #17
 800bdf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdf2:	2340      	movs	r3, #64	; 0x40
 800bdf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be00:	f107 0308 	add.w	r3, r7, #8
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7ff ff52 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be10:	2111      	movs	r1, #17
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f9f8 	bl	800c208 <SDMMC_GetCmdResp1>
 800be18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be1a:	69fb      	ldr	r3, [r7, #28]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3720      	adds	r7, #32
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800be32:	2312      	movs	r3, #18
 800be34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be36:	2340      	movs	r3, #64	; 0x40
 800be38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be44:	f107 0308 	add.w	r3, r7, #8
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff ff30 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be50:	f241 3288 	movw	r2, #5000	; 0x1388
 800be54:	2112      	movs	r1, #18
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f9d6 	bl	800c208 <SDMMC_GetCmdResp1>
 800be5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be5e:	69fb      	ldr	r3, [r7, #28]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800be76:	2318      	movs	r3, #24
 800be78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be7a:	2340      	movs	r3, #64	; 0x40
 800be7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be7e:	2300      	movs	r3, #0
 800be80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be88:	f107 0308 	add.w	r3, r7, #8
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff ff0e 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be94:	f241 3288 	movw	r2, #5000	; 0x1388
 800be98:	2118      	movs	r1, #24
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f9b4 	bl	800c208 <SDMMC_GetCmdResp1>
 800bea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bea2:	69fb      	ldr	r3, [r7, #28]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800beba:	2319      	movs	r3, #25
 800bebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bebe:	2340      	movs	r3, #64	; 0x40
 800bec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bec2:	2300      	movs	r3, #0
 800bec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff feec 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bed8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bedc:	2119      	movs	r1, #25
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f992 	bl	800c208 <SDMMC_GetCmdResp1>
 800bee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee6:	69fb      	ldr	r3, [r7, #28]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800befc:	230c      	movs	r3, #12
 800befe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf04:	2300      	movs	r3, #0
 800bf06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0e:	f107 0308 	add.w	r3, r7, #8
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff fecb 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf1a:	4a05      	ldr	r2, [pc, #20]	; (800bf30 <SDMMC_CmdStopTransfer+0x40>)
 800bf1c:	210c      	movs	r1, #12
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f972 	bl	800c208 <SDMMC_GetCmdResp1>
 800bf24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	05f5e100 	.word	0x05f5e100

0800bf34 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08a      	sub	sp, #40	; 0x28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf44:	2307      	movs	r3, #7
 800bf46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf48:	2340      	movs	r3, #64	; 0x40
 800bf4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf54:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf56:	f107 0310 	add.w	r3, r7, #16
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7ff fea7 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf66:	2107      	movs	r1, #7
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 f94d 	bl	800c208 <SDMMC_GetCmdResp1>
 800bf6e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3728      	adds	r7, #40	; 0x28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b088      	sub	sp, #32
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bf82:	2300      	movs	r3, #0
 800bf84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf98:	f107 0308 	add.w	r3, r7, #8
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe86 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fb67 	bl	800c678 <SDMMC_GetCmdError>
 800bfaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b088      	sub	sp, #32
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bfbe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bfc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bfc4:	2308      	movs	r3, #8
 800bfc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfc8:	2340      	movs	r3, #64	; 0x40
 800bfca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fe67 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fafa 	bl	800c5dc <SDMMC_GetCmdResp7>
 800bfe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfea:	69fb      	ldr	r3, [r7, #28]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3720      	adds	r7, #32
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c002:	2337      	movs	r3, #55	; 0x37
 800c004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c006:	2340      	movs	r3, #64	; 0x40
 800c008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c00a:	2300      	movs	r3, #0
 800c00c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c012:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c014:	f107 0308 	add.w	r3, r7, #8
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fe48 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c020:	f241 3288 	movw	r2, #5000	; 0x1388
 800c024:	2137      	movs	r1, #55	; 0x37
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f8ee 	bl	800c208 <SDMMC_GetCmdResp1>
 800c02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c02e:	69fb      	ldr	r3, [r7, #28]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3720      	adds	r7, #32
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	4b0d      	ldr	r3, [pc, #52]	; (800c07c <SDMMC_CmdAppOperCommand+0x44>)
 800c046:	4313      	orrs	r3, r2
 800c048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c04a:	2329      	movs	r3, #41	; 0x29
 800c04c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c04e:	2340      	movs	r3, #64	; 0x40
 800c050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c052:	2300      	movs	r3, #0
 800c054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c05a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c05c:	f107 0308 	add.w	r3, r7, #8
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff fe24 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fa03 	bl	800c474 <SDMMC_GetCmdResp3>
 800c06e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c070:	69fb      	ldr	r3, [r7, #28]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3720      	adds	r7, #32
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	80100000 	.word	0x80100000

0800c080 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c08e:	2306      	movs	r3, #6
 800c090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c092:	2340      	movs	r3, #64	; 0x40
 800c094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c09e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff fe02 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b0:	2106      	movs	r1, #6
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f8a8 	bl	800c208 <SDMMC_GetCmdResp1>
 800c0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ba:	69fb      	ldr	r3, [r7, #28]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3720      	adds	r7, #32
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0d0:	2333      	movs	r3, #51	; 0x33
 800c0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0d4:	2340      	movs	r3, #64	; 0x40
 800c0d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0e2:	f107 0308 	add.w	r3, r7, #8
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff fde1 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c0ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0f2:	2133      	movs	r1, #51	; 0x33
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f887 	bl	800c208 <SDMMC_GetCmdResp1>
 800c0fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3720      	adds	r7, #32
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b088      	sub	sp, #32
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c112:	2302      	movs	r3, #2
 800c114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c116:	23c0      	movs	r3, #192	; 0xc0
 800c118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c124:	f107 0308 	add.w	r3, r7, #8
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fdc0 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f957 	bl	800c3e4 <SDMMC_GetCmdResp2>
 800c136:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c138:	69fb      	ldr	r3, [r7, #28]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b088      	sub	sp, #32
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c150:	2309      	movs	r3, #9
 800c152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c154:	23c0      	movs	r3, #192	; 0xc0
 800c156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c158:	2300      	movs	r3, #0
 800c15a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c160:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c162:	f107 0308 	add.w	r3, r7, #8
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff fda1 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f938 	bl	800c3e4 <SDMMC_GetCmdResp2>
 800c174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c176:	69fb      	ldr	r3, [r7, #28]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3720      	adds	r7, #32
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c18e:	2303      	movs	r3, #3
 800c190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c192:	2340      	movs	r3, #64	; 0x40
 800c194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c196:	2300      	movs	r3, #0
 800c198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c19e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1a0:	f107 0308 	add.w	r3, r7, #8
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff fd82 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	2103      	movs	r1, #3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f99d 	bl	800c4f0 <SDMMC_GetCmdResp6>
 800c1b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1b8:	69fb      	ldr	r3, [r7, #28]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3720      	adds	r7, #32
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b088      	sub	sp, #32
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1d0:	230d      	movs	r3, #13
 800c1d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1d4:	2340      	movs	r3, #64	; 0x40
 800c1d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1e2:	f107 0308 	add.w	r3, r7, #8
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff fd61 	bl	800bcb0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c1ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f2:	210d      	movs	r1, #13
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f807 	bl	800c208 <SDMMC_GetCmdResp1>
 800c1fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1fc:	69fb      	ldr	r3, [r7, #28]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3720      	adds	r7, #32
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	460b      	mov	r3, r1
 800c212:	607a      	str	r2, [r7, #4]
 800c214:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c216:	4b70      	ldr	r3, [pc, #448]	; (800c3d8 <SDMMC_GetCmdResp1+0x1d0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a70      	ldr	r2, [pc, #448]	; (800c3dc <SDMMC_GetCmdResp1+0x1d4>)
 800c21c:	fba2 2303 	umull	r2, r3, r2, r3
 800c220:	0a5a      	lsrs	r2, r3, #9
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	fb02 f303 	mul.w	r3, r2, r3
 800c228:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	1e5a      	subs	r2, r3, #1
 800c22e:	61fa      	str	r2, [r7, #28]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d102      	bne.n	800c23a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c234:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c238:	e0c9      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c246:	2b00      	cmp	r3, #0
 800c248:	d0ef      	beq.n	800c22a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c250:	2b00      	cmp	r3, #0
 800c252:	d1ea      	bne.n	800c22a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c258:	f003 0304 	and.w	r3, r3, #4
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d004      	beq.n	800c26a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2204      	movs	r2, #4
 800c264:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c266:	2304      	movs	r3, #4
 800c268:	e0b1      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26e:	f003 0301 	and.w	r3, r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2201      	movs	r2, #1
 800c27a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e0a6      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	22c5      	movs	r2, #197	; 0xc5
 800c284:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7ff fd3c 	bl	800bd04 <SDMMC_GetCommandResponse>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	4293      	cmp	r3, r2
 800c294:	d001      	beq.n	800c29a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c296:	2301      	movs	r3, #1
 800c298:	e099      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c29a:	2100      	movs	r1, #0
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f7ff fd3e 	bl	800bd1e <SDMMC_GetResponse>
 800c2a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	4b4e      	ldr	r3, [pc, #312]	; (800c3e0 <SDMMC_GetCmdResp1+0x1d8>)
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e08d      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da02      	bge.n	800c2be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2bc:	e087      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2c8:	2340      	movs	r3, #64	; 0x40
 800c2ca:	e080      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2d6:	2380      	movs	r3, #128	; 0x80
 800c2d8:	e079      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c2e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2e8:	e071      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c2f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2f8:	e069      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c308:	e061      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c318:	e059      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c328:	e051      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c338:	e049      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c348:	e041      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c358:	e039      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c368:	e031      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c374:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c378:	e029      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c388:	e021      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c398:	e019      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c3a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3a8:	e011      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c3b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3b8:	e009      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f003 0308 	and.w	r3, r3, #8
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c3c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c3c8:	e001      	b.n	800c3ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3720      	adds	r7, #32
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20000000 	.word	0x20000000
 800c3dc:	10624dd3 	.word	0x10624dd3
 800c3e0:	fdffe008 	.word	0xfdffe008

0800c3e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3ec:	4b1f      	ldr	r3, [pc, #124]	; (800c46c <SDMMC_GetCmdResp2+0x88>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a1f      	ldr	r2, [pc, #124]	; (800c470 <SDMMC_GetCmdResp2+0x8c>)
 800c3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f6:	0a5b      	lsrs	r3, r3, #9
 800c3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3fc:	fb02 f303 	mul.w	r3, r2, r3
 800c400:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	1e5a      	subs	r2, r3, #1
 800c406:	60fa      	str	r2, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c40c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c410:	e026      	b.n	800c460 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c416:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0ef      	beq.n	800c402 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1ea      	bne.n	800c402 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2204      	movs	r2, #4
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c43e:	2304      	movs	r3, #4
 800c440:	e00e      	b.n	800c460 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c454:	2301      	movs	r3, #1
 800c456:	e003      	b.n	800c460 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	22c5      	movs	r2, #197	; 0xc5
 800c45c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3714      	adds	r7, #20
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	20000000 	.word	0x20000000
 800c470:	10624dd3 	.word	0x10624dd3

0800c474 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c47c:	4b1a      	ldr	r3, [pc, #104]	; (800c4e8 <SDMMC_GetCmdResp3+0x74>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a1a      	ldr	r2, [pc, #104]	; (800c4ec <SDMMC_GetCmdResp3+0x78>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	0a5b      	lsrs	r3, r3, #9
 800c488:	f241 3288 	movw	r2, #5000	; 0x1388
 800c48c:	fb02 f303 	mul.w	r3, r2, r3
 800c490:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	1e5a      	subs	r2, r3, #1
 800c496:	60fa      	str	r2, [r7, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d102      	bne.n	800c4a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c49c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4a0:	e01b      	b.n	800c4da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0ef      	beq.n	800c492 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1ea      	bne.n	800c492 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d004      	beq.n	800c4d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2204      	movs	r2, #4
 800c4cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4ce:	2304      	movs	r3, #4
 800c4d0:	e003      	b.n	800c4da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	22c5      	movs	r2, #197	; 0xc5
 800c4d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	20000000 	.word	0x20000000
 800c4ec:	10624dd3 	.word	0x10624dd3

0800c4f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b088      	sub	sp, #32
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4fe:	4b35      	ldr	r3, [pc, #212]	; (800c5d4 <SDMMC_GetCmdResp6+0xe4>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a35      	ldr	r2, [pc, #212]	; (800c5d8 <SDMMC_GetCmdResp6+0xe8>)
 800c504:	fba2 2303 	umull	r2, r3, r2, r3
 800c508:	0a5b      	lsrs	r3, r3, #9
 800c50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
 800c512:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	1e5a      	subs	r2, r3, #1
 800c518:	61fa      	str	r2, [r7, #28]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c51e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c522:	e052      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c528:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0ef      	beq.n	800c514 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1ea      	bne.n	800c514 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c542:	f003 0304 	and.w	r3, r3, #4
 800c546:	2b00      	cmp	r3, #0
 800c548:	d004      	beq.n	800c554 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2204      	movs	r2, #4
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c550:	2304      	movs	r3, #4
 800c552:	e03a      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2201      	movs	r2, #1
 800c564:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c566:	2301      	movs	r3, #1
 800c568:	e02f      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f7ff fbca 	bl	800bd04 <SDMMC_GetCommandResponse>
 800c570:	4603      	mov	r3, r0
 800c572:	461a      	mov	r2, r3
 800c574:	7afb      	ldrb	r3, [r7, #11]
 800c576:	4293      	cmp	r3, r2
 800c578:	d001      	beq.n	800c57e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e025      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	22c5      	movs	r2, #197	; 0xc5
 800c582:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c584:	2100      	movs	r1, #0
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fbc9 	bl	800bd1e <SDMMC_GetResponse>
 800c58c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	0c1b      	lsrs	r3, r3, #16
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e011      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5b4:	e009      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5c4:	e001      	b.n	800c5ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20000000 	.word	0x20000000
 800c5d8:	10624dd3 	.word	0x10624dd3

0800c5dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5e4:	4b22      	ldr	r3, [pc, #136]	; (800c670 <SDMMC_GetCmdResp7+0x94>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a22      	ldr	r2, [pc, #136]	; (800c674 <SDMMC_GetCmdResp7+0x98>)
 800c5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ee:	0a5b      	lsrs	r3, r3, #9
 800c5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5f4:	fb02 f303 	mul.w	r3, r2, r3
 800c5f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	1e5a      	subs	r2, r3, #1
 800c5fe:	60fa      	str	r2, [r7, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c608:	e02c      	b.n	800c664 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c616:	2b00      	cmp	r3, #0
 800c618:	d0ef      	beq.n	800c5fa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1ea      	bne.n	800c5fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d004      	beq.n	800c63a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2204      	movs	r2, #4
 800c634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c636:	2304      	movs	r3, #4
 800c638:	e014      	b.n	800c664 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e009      	b.n	800c664 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2240      	movs	r2, #64	; 0x40
 800c660:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c662:	2300      	movs	r3, #0
  
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	20000000 	.word	0x20000000
 800c674:	10624dd3 	.word	0x10624dd3

0800c678 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c680:	4b11      	ldr	r3, [pc, #68]	; (800c6c8 <SDMMC_GetCmdError+0x50>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <SDMMC_GetCmdError+0x54>)
 800c686:	fba2 2303 	umull	r2, r3, r2, r3
 800c68a:	0a5b      	lsrs	r3, r3, #9
 800c68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c690:	fb02 f303 	mul.w	r3, r2, r3
 800c694:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	1e5a      	subs	r2, r3, #1
 800c69a:	60fa      	str	r2, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6a4:	e009      	b.n	800c6ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0f1      	beq.n	800c696 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	22c5      	movs	r2, #197	; 0xc5
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	20000000 	.word	0x20000000
 800c6cc:	10624dd3 	.word	0x10624dd3

0800c6d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	f107 001c 	add.w	r0, r7, #28
 800c6de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d120      	bne.n	800c72a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	4b20      	ldr	r3, [pc, #128]	; (800c77c <USB_CoreInit+0xac>)
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d105      	bne.n	800c71e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9d8 	bl	800cad4 <USB_CoreReset>
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
 800c728:	e010      	b.n	800c74c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f9cc 	bl	800cad4 <USB_CoreReset>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d10b      	bne.n	800c76a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	f043 0206 	orr.w	r2, r3, #6
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	f043 0220 	orr.w	r2, r3, #32
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c776:	b004      	add	sp, #16
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	ffbdffbf 	.word	0xffbdffbf

0800c780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	f043 0201 	orr.w	r2, r3, #1
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f023 0201 	bic.w	r2, r3, #1
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c7e0:	78fb      	ldrb	r3, [r7, #3]
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d115      	bne.n	800c812 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	f7f6 fb16 	bl	8002e24 <HAL_Delay>
      ms++;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f95a 	bl	800cab8 <USB_GetMode>
 800c804:	4603      	mov	r3, r0
 800c806:	2b01      	cmp	r3, #1
 800c808:	d01e      	beq.n	800c848 <USB_SetCurrentMode+0x84>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b31      	cmp	r3, #49	; 0x31
 800c80e:	d9f0      	bls.n	800c7f2 <USB_SetCurrentMode+0x2e>
 800c810:	e01a      	b.n	800c848 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d115      	bne.n	800c844 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c824:	2001      	movs	r0, #1
 800c826:	f7f6 fafd 	bl	8002e24 <HAL_Delay>
      ms++;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3301      	adds	r3, #1
 800c82e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f941 	bl	800cab8 <USB_GetMode>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d005      	beq.n	800c848 <USB_SetCurrentMode+0x84>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2b31      	cmp	r3, #49	; 0x31
 800c840:	d9f0      	bls.n	800c824 <USB_SetCurrentMode+0x60>
 800c842:	e001      	b.n	800c848 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	e005      	b.n	800c854 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b32      	cmp	r3, #50	; 0x32
 800c84c:	d101      	bne.n	800c852 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3301      	adds	r3, #1
 800c86e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4a13      	ldr	r2, [pc, #76]	; (800c8c0 <USB_FlushTxFifo+0x64>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d901      	bls.n	800c87c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c878:	2303      	movs	r3, #3
 800c87a:	e01b      	b.n	800c8b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	daf2      	bge.n	800c86a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	019b      	lsls	r3, r3, #6
 800c88c:	f043 0220 	orr.w	r2, r3, #32
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3301      	adds	r3, #1
 800c898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4a08      	ldr	r2, [pc, #32]	; (800c8c0 <USB_FlushTxFifo+0x64>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d901      	bls.n	800c8a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e006      	b.n	800c8b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	f003 0320 	and.w	r3, r3, #32
 800c8ae:	2b20      	cmp	r3, #32
 800c8b0:	d0f0      	beq.n	800c894 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	00030d40 	.word	0x00030d40

0800c8c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	4a11      	ldr	r2, [pc, #68]	; (800c920 <USB_FlushRxFifo+0x5c>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d901      	bls.n	800c8e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	e018      	b.n	800c914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	daf2      	bge.n	800c8d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2210      	movs	r2, #16
 800c8f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	4a08      	ldr	r2, [pc, #32]	; (800c920 <USB_FlushRxFifo+0x5c>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d901      	bls.n	800c906 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e006      	b.n	800c914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f003 0310 	and.w	r3, r3, #16
 800c90e:	2b10      	cmp	r3, #16
 800c910:	d0f0      	beq.n	800c8f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	00030d40 	.word	0x00030d40

0800c924 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c924:	b480      	push	{r7}
 800c926:	b089      	sub	sp, #36	; 0x24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	4611      	mov	r1, r2
 800c930:	461a      	mov	r2, r3
 800c932:	460b      	mov	r3, r1
 800c934:	71fb      	strb	r3, [r7, #7]
 800c936:	4613      	mov	r3, r2
 800c938:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c946:	2b00      	cmp	r3, #0
 800c948:	d123      	bne.n	800c992 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c94a:	88bb      	ldrh	r3, [r7, #4]
 800c94c:	3303      	adds	r3, #3
 800c94e:	089b      	lsrs	r3, r3, #2
 800c950:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c952:	2300      	movs	r3, #0
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	e018      	b.n	800c98a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	031a      	lsls	r2, r3, #12
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	4413      	add	r3, r2
 800c960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c964:	461a      	mov	r2, r3
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	3301      	adds	r3, #1
 800c970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	3301      	adds	r3, #1
 800c976:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	3301      	adds	r3, #1
 800c97c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	3301      	adds	r3, #1
 800c982:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	3301      	adds	r3, #1
 800c988:	61bb      	str	r3, [r7, #24]
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d3e2      	bcc.n	800c958 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3724      	adds	r7, #36	; 0x24
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b08b      	sub	sp, #44	; 0x2c
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	089b      	lsrs	r3, r3, #2
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c9be:	88fb      	ldrh	r3, [r7, #6]
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	623b      	str	r3, [r7, #32]
 800c9ca:	e014      	b.n	800c9f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	3301      	adds	r3, #1
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	623b      	str	r3, [r7, #32]
 800c9f6:	6a3a      	ldr	r2, [r7, #32]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d3e6      	bcc.n	800c9cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c9fe:	8bfb      	ldrh	r3, [r7, #30]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01e      	beq.n	800ca42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca04:	2300      	movs	r3, #0
 800ca06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca0e:	461a      	mov	r2, r3
 800ca10:	f107 0310 	add.w	r3, r7, #16
 800ca14:	6812      	ldr	r2, [r2, #0]
 800ca16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	fa22 f303 	lsr.w	r3, r2, r3
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	701a      	strb	r2, [r3, #0]
      i++;
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	3301      	adds	r3, #1
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca36:	8bfb      	ldrh	r3, [r7, #30]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca3c:	8bfb      	ldrh	r3, [r7, #30]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1ea      	bne.n	800ca18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	372c      	adds	r7, #44	; 0x2c
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	695b      	ldr	r3, [r3, #20]
 800ca5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	4013      	ands	r3, r2
 800ca66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca68:	68fb      	ldr	r3, [r7, #12]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b085      	sub	sp, #20
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	460b      	mov	r3, r1
 800ca80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ca86:	78fb      	ldrb	r3, [r7, #3]
 800ca88:	015a      	lsls	r2, r3, #5
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	015a      	lsls	r2, r3, #5
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	4013      	ands	r3, r2
 800caa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caaa:	68bb      	ldr	r3, [r7, #8]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	f003 0301 	and.w	r3, r3, #1
}
 800cac8:	4618      	mov	r0, r3
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3301      	adds	r3, #1
 800cae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	4a13      	ldr	r2, [pc, #76]	; (800cb38 <USB_CoreReset+0x64>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d901      	bls.n	800caf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e01b      	b.n	800cb2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	daf2      	bge.n	800cae0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	f043 0201 	orr.w	r2, r3, #1
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4a09      	ldr	r2, [pc, #36]	; (800cb38 <USB_CoreReset+0x64>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d901      	bls.n	800cb1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb18:	2303      	movs	r3, #3
 800cb1a:	e006      	b.n	800cb2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d0f0      	beq.n	800cb0a <USB_CoreReset+0x36>

  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	00030d40 	.word	0x00030d40

0800cb3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb3c:	b084      	sub	sp, #16
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b086      	sub	sp, #24
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	2300      	movs	r3, #0
 800cb60:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d018      	beq.n	800cbac <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d10a      	bne.n	800cb96 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb8e:	f043 0304 	orr.w	r3, r3, #4
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	e014      	b.n	800cbc0 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cba4:	f023 0304 	bic.w	r3, r3, #4
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	e009      	b.n	800cbc0 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbba:	f023 0304 	bic.w	r3, r3, #4
 800cbbe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cbc0:	2110      	movs	r1, #16
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fe4a 	bl	800c85c <USB_FlushTxFifo>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fe76 	bl	800c8c4 <USB_FlushRxFifo>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	613b      	str	r3, [r7, #16]
 800cbe6:	e015      	b.n	800cc14 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	015a      	lsls	r2, r3, #5
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4413      	add	r3, r2
 800cbf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc08:	461a      	mov	r2, r3
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	3301      	adds	r3, #1
 800cc12:	613b      	str	r3, [r7, #16]
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d3e5      	bcc.n	800cbe8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f04f 32ff 	mov.w	r2, #4294967295
 800cc28:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00b      	beq.n	800cc4e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc3c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a13      	ldr	r2, [pc, #76]	; (800cc90 <USB_HostInit+0x154>)
 800cc42:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a13      	ldr	r2, [pc, #76]	; (800cc94 <USB_HostInit+0x158>)
 800cc48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cc4c:	e009      	b.n	800cc62 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2280      	movs	r2, #128	; 0x80
 800cc52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a10      	ldr	r2, [pc, #64]	; (800cc98 <USB_HostInit+0x15c>)
 800cc58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a0f      	ldr	r2, [pc, #60]	; (800cc9c <USB_HostInit+0x160>)
 800cc5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d105      	bne.n	800cc74 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	f043 0210 	orr.w	r2, r3, #16
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	699a      	ldr	r2, [r3, #24]
 800cc78:	4b09      	ldr	r3, [pc, #36]	; (800cca0 <USB_HostInit+0x164>)
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc8c:	b004      	add	sp, #16
 800cc8e:	4770      	bx	lr
 800cc90:	01000200 	.word	0x01000200
 800cc94:	00e00300 	.word	0x00e00300
 800cc98:	00600080 	.word	0x00600080
 800cc9c:	004000e0 	.word	0x004000e0
 800cca0:	a3200008 	.word	0xa3200008

0800cca4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccc2:	f023 0303 	bic.w	r3, r3, #3
 800ccc6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cce0:	78fb      	ldrb	r3, [r7, #3]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d107      	bne.n	800ccf6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccec:	461a      	mov	r2, r3
 800ccee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ccf2:	6053      	str	r3, [r2, #4]
 800ccf4:	e009      	b.n	800cd0a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d106      	bne.n	800cd0a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd02:	461a      	mov	r2, r3
 800cd04:	f241 7370 	movw	r3, #6000	; 0x1770
 800cd08:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd46:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cd48:	2064      	movs	r0, #100	; 0x64
 800cd4a:	f7f6 f86b 	bl	8002e24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cd5c:	200a      	movs	r0, #10
 800cd5e:	f7f6 f861 	bl	8002e24 <HAL_Delay>

  return HAL_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d109      	bne.n	800cdb0 <USB_DriveVbus+0x44>
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d106      	bne.n	800cdb0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cdaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdba:	d109      	bne.n	800cdd0 <USB_DriveVbus+0x64>
 800cdbc:	78fb      	ldrb	r3, [r7, #3]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cdca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	0c5b      	lsrs	r3, r3, #17
 800cdfc:	f003 0303 	and.w	r3, r3, #3
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	b29b      	uxth	r3, r3
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr
	...

0800ce30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4603      	mov	r3, r0
 800ce40:	70fb      	strb	r3, [r7, #3]
 800ce42:	460b      	mov	r3, r1
 800ce44:	70bb      	strb	r3, [r7, #2]
 800ce46:	4613      	mov	r3, r2
 800ce48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ce52:	78fb      	ldrb	r3, [r7, #3]
 800ce54:	015a      	lsls	r2, r3, #5
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	4413      	add	r3, r2
 800ce5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f04f 33ff 	mov.w	r3, #4294967295
 800ce64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ce66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d87e      	bhi.n	800cf6c <USB_HC_Init+0x13c>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <USB_HC_Init+0x44>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800ce85 	.word	0x0800ce85
 800ce78:	0800cf2f 	.word	0x0800cf2f
 800ce7c:	0800ce85 	.word	0x0800ce85
 800ce80:	0800cef1 	.word	0x0800cef1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	015a      	lsls	r2, r3, #5
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce90:	461a      	mov	r2, r3
 800ce92:	f240 439d 	movw	r3, #1181	; 0x49d
 800ce96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ce98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	da10      	bge.n	800cec2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	015a      	lsls	r2, r3, #5
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	4413      	add	r3, r2
 800cea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	78fa      	ldrb	r2, [r7, #3]
 800ceb0:	0151      	lsls	r1, r2, #5
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	440a      	add	r2, r1
 800ceb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cebe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cec0:	e057      	b.n	800cf72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d051      	beq.n	800cf72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	015a      	lsls	r2, r3, #5
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	4413      	add	r3, r2
 800ced6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	78fa      	ldrb	r2, [r7, #3]
 800cede:	0151      	lsls	r1, r2, #5
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	440a      	add	r2, r1
 800cee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cee8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ceec:	60d3      	str	r3, [r2, #12]
      break;
 800ceee:	e040      	b.n	800cf72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cefc:	461a      	mov	r2, r3
 800cefe:	f240 639d 	movw	r3, #1693	; 0x69d
 800cf02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	da34      	bge.n	800cf76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	015a      	lsls	r2, r3, #5
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	78fa      	ldrb	r2, [r7, #3]
 800cf1c:	0151      	lsls	r1, r2, #5
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	440a      	add	r2, r1
 800cf22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cf2c:	e023      	b.n	800cf76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cf2e:	78fb      	ldrb	r3, [r7, #3]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f240 2325 	movw	r3, #549	; 0x225
 800cf40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da17      	bge.n	800cf7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	015a      	lsls	r2, r3, #5
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	4413      	add	r3, r2
 800cf52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	78fa      	ldrb	r2, [r7, #3]
 800cf5a:	0151      	lsls	r1, r2, #5
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	440a      	add	r2, r1
 800cf60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cf68:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cf6a:	e006      	b.n	800cf7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	77fb      	strb	r3, [r7, #31]
      break;
 800cf70:	e004      	b.n	800cf7c <USB_HC_Init+0x14c>
      break;
 800cf72:	bf00      	nop
 800cf74:	e002      	b.n	800cf7c <USB_HC_Init+0x14c>
      break;
 800cf76:	bf00      	nop
 800cf78:	e000      	b.n	800cf7c <USB_HC_Init+0x14c>
      break;
 800cf7a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	015a      	lsls	r2, r3, #5
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	78fa      	ldrb	r2, [r7, #3]
 800cf8c:	0151      	lsls	r1, r2, #5
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	440a      	add	r2, r1
 800cf92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf96:	f043 0302 	orr.w	r3, r3, #2
 800cf9a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfa2:	699a      	ldr	r2, [r3, #24]
 800cfa4:	78fb      	ldrb	r3, [r7, #3]
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	2101      	movs	r1, #1
 800cfac:	fa01 f303 	lsl.w	r3, r1, r3
 800cfb0:	6939      	ldr	r1, [r7, #16]
 800cfb2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cfc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	da03      	bge.n	800cfd6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cfce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfd2:	61bb      	str	r3, [r7, #24]
 800cfd4:	e001      	b.n	800cfda <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff feff 	bl	800cdde <USB_GetHostSpeed>
 800cfe0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cfe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d106      	bne.n	800cff8 <USB_HC_Init+0x1c8>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d003      	beq.n	800cff8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	e001      	b.n	800cffc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cffc:	787b      	ldrb	r3, [r7, #1]
 800cffe:	059b      	lsls	r3, r3, #22
 800d000:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d004:	78bb      	ldrb	r3, [r7, #2]
 800d006:	02db      	lsls	r3, r3, #11
 800d008:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d00c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d00e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d012:	049b      	lsls	r3, r3, #18
 800d014:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d018:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d01a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d01c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d020:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	0159      	lsls	r1, r3, #5
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	440b      	add	r3, r1
 800d02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d032:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d038:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d03a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d003      	beq.n	800d04a <USB_HC_Init+0x21a>
 800d042:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d046:	2b01      	cmp	r3, #1
 800d048:	d10f      	bne.n	800d06a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d04a:	78fb      	ldrb	r3, [r7, #3]
 800d04c:	015a      	lsls	r2, r3, #5
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	4413      	add	r3, r2
 800d052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	78fa      	ldrb	r2, [r7, #3]
 800d05a:	0151      	lsls	r1, r2, #5
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	440a      	add	r2, r1
 800d060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d068:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d06a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3720      	adds	r7, #32
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	; 0x30
 800d078:	af02      	add	r7, sp, #8
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	4613      	mov	r3, r2
 800d080:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	785b      	ldrb	r3, [r3, #1]
 800d08a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d08c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d090:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d02d      	beq.n	800d0fa <USB_HC_StartXfer+0x86>
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	791b      	ldrb	r3, [r3, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d129      	bne.n	800d0fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d117      	bne.n	800d0dc <USB_HC_StartXfer+0x68>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	79db      	ldrb	r3, [r3, #7]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d003      	beq.n	800d0bc <USB_HC_StartXfer+0x48>
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	79db      	ldrb	r3, [r3, #7]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d10f      	bne.n	800d0dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	015a      	lsls	r2, r3, #5
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	69fa      	ldr	r2, [r7, #28]
 800d0cc:	0151      	lsls	r1, r2, #5
 800d0ce:	6a3a      	ldr	r2, [r7, #32]
 800d0d0:	440a      	add	r2, r1
 800d0d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <USB_HC_StartXfer+0x86>
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	795b      	ldrb	r3, [r3, #5]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d107      	bne.n	800d0fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	785b      	ldrb	r3, [r3, #1]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 fa0f 	bl	800d514 <USB_DoPing>
      return HAL_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e0f8      	b.n	800d2ec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d018      	beq.n	800d134 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	8912      	ldrh	r2, [r2, #8]
 800d10a:	4413      	add	r3, r2
 800d10c:	3b01      	subs	r3, #1
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	8912      	ldrh	r2, [r2, #8]
 800d112:	fbb3 f3f2 	udiv	r3, r3, r2
 800d116:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d118:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d11a:	8b7b      	ldrh	r3, [r7, #26]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d90b      	bls.n	800d138 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d120:	8b7b      	ldrh	r3, [r7, #26]
 800d122:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	8912      	ldrh	r2, [r2, #8]
 800d12a:	fb03 f202 	mul.w	r2, r3, r2
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	611a      	str	r2, [r3, #16]
 800d132:	e001      	b.n	800d138 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d134:	2301      	movs	r3, #1
 800d136:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	78db      	ldrb	r3, [r3, #3]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d007      	beq.n	800d150 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	8912      	ldrh	r2, [r2, #8]
 800d146:	fb03 f202 	mul.w	r2, r3, r2
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	611a      	str	r2, [r3, #16]
 800d14e:	e003      	b.n	800d158 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	695a      	ldr	r2, [r3, #20]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d160:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d162:	04d9      	lsls	r1, r3, #19
 800d164:	4b63      	ldr	r3, [pc, #396]	; (800d2f4 <USB_HC_StartXfer+0x280>)
 800d166:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d168:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	7a9b      	ldrb	r3, [r3, #10]
 800d16e:	075b      	lsls	r3, r3, #29
 800d170:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d174:	69f9      	ldr	r1, [r7, #28]
 800d176:	0148      	lsls	r0, r1, #5
 800d178:	6a39      	ldr	r1, [r7, #32]
 800d17a:	4401      	add	r1, r0
 800d17c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d180:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d182:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	68d9      	ldr	r1, [r3, #12]
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	015a      	lsls	r2, r3, #5
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	4413      	add	r3, r2
 800d196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d19a:	460a      	mov	r2, r1
 800d19c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	bf0c      	ite	eq
 800d1ae:	2301      	moveq	r3, #1
 800d1b0:	2300      	movne	r3, #0
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	015a      	lsls	r2, r3, #5
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	69fa      	ldr	r2, [r7, #28]
 800d1c6:	0151      	lsls	r1, r2, #5
 800d1c8:	6a3a      	ldr	r2, [r7, #32]
 800d1ca:	440a      	add	r2, r1
 800d1cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d1d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	015a      	lsls	r2, r3, #5
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	4413      	add	r3, r2
 800d1de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	7e7b      	ldrb	r3, [r7, #25]
 800d1e6:	075b      	lsls	r3, r3, #29
 800d1e8:	69f9      	ldr	r1, [r7, #28]
 800d1ea:	0148      	lsls	r0, r1, #5
 800d1ec:	6a39      	ldr	r1, [r7, #32]
 800d1ee:	4401      	add	r1, r0
 800d1f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d20e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	78db      	ldrb	r3, [r3, #3]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d21e:	613b      	str	r3, [r7, #16]
 800d220:	e003      	b.n	800d22a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d228:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d230:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d23e:	461a      	mov	r2, r3
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e04e      	b.n	800d2ec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	78db      	ldrb	r3, [r3, #3]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d149      	bne.n	800d2ea <USB_HC_StartXfer+0x276>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d045      	beq.n	800d2ea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	79db      	ldrb	r3, [r3, #7]
 800d262:	2b03      	cmp	r3, #3
 800d264:	d830      	bhi.n	800d2c8 <USB_HC_StartXfer+0x254>
 800d266:	a201      	add	r2, pc, #4	; (adr r2, 800d26c <USB_HC_StartXfer+0x1f8>)
 800d268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26c:	0800d27d 	.word	0x0800d27d
 800d270:	0800d2a1 	.word	0x0800d2a1
 800d274:	0800d27d 	.word	0x0800d27d
 800d278:	0800d2a1 	.word	0x0800d2a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	3303      	adds	r3, #3
 800d282:	089b      	lsrs	r3, r3, #2
 800d284:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d286:	8afa      	ldrh	r2, [r7, #22]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	429a      	cmp	r2, r3
 800d290:	d91c      	bls.n	800d2cc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	f043 0220 	orr.w	r2, r3, #32
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d29e:	e015      	b.n	800d2cc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	695b      	ldr	r3, [r3, #20]
 800d2a4:	3303      	adds	r3, #3
 800d2a6:	089b      	lsrs	r3, r3, #2
 800d2a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d2aa:	8afa      	ldrh	r2, [r7, #22]
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d90a      	bls.n	800d2d0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800d2c6:	e003      	b.n	800d2d0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d2c8:	bf00      	nop
 800d2ca:	e002      	b.n	800d2d2 <USB_HC_StartXfer+0x25e>
        break;
 800d2cc:	bf00      	nop
 800d2ce:	e000      	b.n	800d2d2 <USB_HC_StartXfer+0x25e>
        break;
 800d2d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	68d9      	ldr	r1, [r3, #12]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	785a      	ldrb	r2, [r3, #1]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	695b      	ldr	r3, [r3, #20]
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	9000      	str	r0, [sp, #0]
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f7ff fb1d 	bl	800c924 <USB_WritePacket>
  }

  return HAL_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3728      	adds	r7, #40	; 0x28
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	1ff80000 	.word	0x1ff80000

0800d2f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d30a:	695b      	ldr	r3, [r3, #20]
 800d30c:	b29b      	uxth	r3, r3
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b089      	sub	sp, #36	; 0x24
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	460b      	mov	r3, r1
 800d324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d32a:	78fb      	ldrb	r3, [r7, #3]
 800d32c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	015a      	lsls	r2, r3, #5
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	4413      	add	r3, r2
 800d33a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	0c9b      	lsrs	r3, r3, #18
 800d342:	f003 0303 	and.w	r3, r3, #3
 800d346:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	0fdb      	lsrs	r3, r3, #31
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f003 0320 	and.w	r3, r3, #32
 800d366:	2b20      	cmp	r3, #32
 800d368:	d104      	bne.n	800d374 <USB_HC_Halt+0x5a>
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	e0c8      	b.n	800d506 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <USB_HC_Halt+0x66>
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d163      	bne.n	800d448 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	015a      	lsls	r2, r3, #5
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	4413      	add	r3, r2
 800d388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	0151      	lsls	r1, r2, #5
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	440a      	add	r2, r1
 800d396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d39a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d39e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f003 0320 	and.w	r3, r3, #32
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f040 80ab 	bne.w	800d504 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d133      	bne.n	800d422 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	0151      	lsls	r1, r2, #5
 800d3cc:	69fa      	ldr	r2, [r7, #28]
 800d3ce:	440a      	add	r2, r1
 800d3d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	015a      	lsls	r2, r3, #5
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	69ba      	ldr	r2, [r7, #24]
 800d3ea:	0151      	lsls	r1, r2, #5
 800d3ec:	69fa      	ldr	r2, [r7, #28]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3f8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d406:	d81d      	bhi.n	800d444 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d41a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d41e:	d0ec      	beq.n	800d3fa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d420:	e070      	b.n	800d504 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	0151      	lsls	r1, r2, #5
 800d434:	69fa      	ldr	r2, [r7, #28]
 800d436:	440a      	add	r2, r1
 800d438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d43c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d440:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d442:	e05f      	b.n	800d504 <USB_HC_Halt+0x1ea>
            break;
 800d444:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d446:	e05d      	b.n	800d504 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	015a      	lsls	r2, r3, #5
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	4413      	add	r3, r2
 800d450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	0151      	lsls	r1, r2, #5
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	440a      	add	r2, r1
 800d45e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d466:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d133      	bne.n	800d4e0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	015a      	lsls	r2, r3, #5
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	4413      	add	r3, r2
 800d480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	69ba      	ldr	r2, [r7, #24]
 800d488:	0151      	lsls	r1, r2, #5
 800d48a:	69fa      	ldr	r2, [r7, #28]
 800d48c:	440a      	add	r2, r1
 800d48e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d496:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	69ba      	ldr	r2, [r7, #24]
 800d4a8:	0151      	lsls	r1, r2, #5
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	440a      	add	r2, r1
 800d4ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4b6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4c4:	d81d      	bhi.n	800d502 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	015a      	lsls	r2, r3, #5
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4dc:	d0ec      	beq.n	800d4b8 <USB_HC_Halt+0x19e>
 800d4de:	e011      	b.n	800d504 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	015a      	lsls	r2, r3, #5
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	0151      	lsls	r1, r2, #5
 800d4f2:	69fa      	ldr	r2, [r7, #28]
 800d4f4:	440a      	add	r2, r1
 800d4f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	e000      	b.n	800d504 <USB_HC_Halt+0x1ea>
          break;
 800d502:	bf00      	nop
    }
  }

  return HAL_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3724      	adds	r7, #36	; 0x24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
	...

0800d514 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d514:	b480      	push	{r7}
 800d516:	b087      	sub	sp, #28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d524:	78fb      	ldrb	r3, [r7, #3]
 800d526:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d528:	2301      	movs	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	04da      	lsls	r2, r3, #19
 800d530:	4b15      	ldr	r3, [pc, #84]	; (800d588 <USB_DoPing+0x74>)
 800d532:	4013      	ands	r3, r2
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	0151      	lsls	r1, r2, #5
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	440a      	add	r2, r1
 800d53c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d544:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	015a      	lsls	r2, r3, #5
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	4413      	add	r3, r2
 800d54e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d55c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d564:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	015a      	lsls	r2, r3, #5
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	4413      	add	r3, r2
 800d56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d572:	461a      	mov	r2, r3
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	371c      	adds	r7, #28
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	1ff80000 	.word	0x1ff80000

0800d58c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d594:	2300      	movs	r3, #0
 800d596:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d59c:	2300      	movs	r3, #0
 800d59e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff f8fe 	bl	800c7a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d5a6:	2110      	movs	r1, #16
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff f957 	bl	800c85c <USB_FlushTxFifo>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff f983 	bl	800c8c4 <USB_FlushRxFifo>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	61bb      	str	r3, [r7, #24]
 800d5cc:	e01f      	b.n	800d60e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	015a      	lsls	r2, r3, #5
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	015a      	lsls	r2, r3, #5
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d602:	461a      	mov	r2, r3
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	3301      	adds	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	2b0f      	cmp	r3, #15
 800d612:	d9dc      	bls.n	800d5ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d614:	2300      	movs	r3, #0
 800d616:	61bb      	str	r3, [r7, #24]
 800d618:	e034      	b.n	800d684 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	015a      	lsls	r2, r3, #5
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	4413      	add	r3, r2
 800d622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d630:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d638:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d640:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	015a      	lsls	r2, r3, #5
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	4413      	add	r3, r2
 800d64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d64e:	461a      	mov	r2, r3
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	3301      	adds	r3, #1
 800d658:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d660:	d80c      	bhi.n	800d67c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d662:	69bb      	ldr	r3, [r7, #24]
 800d664:	015a      	lsls	r2, r3, #5
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	4413      	add	r3, r2
 800d66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d678:	d0ec      	beq.n	800d654 <USB_StopHost+0xc8>
 800d67a:	e000      	b.n	800d67e <USB_StopHost+0xf2>
        break;
 800d67c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	3301      	adds	r3, #1
 800d682:	61bb      	str	r3, [r7, #24]
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	2b0f      	cmp	r3, #15
 800d688:	d9c7      	bls.n	800d61a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d690:	461a      	mov	r2, r3
 800d692:	f04f 33ff 	mov.w	r3, #4294967295
 800d696:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f04f 32ff 	mov.w	r2, #4294967295
 800d69e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff f86d 	bl	800c780 <USB_EnableGlobalInt>

  return ret;
 800d6a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3720      	adds	r7, #32
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d6b4:	4904      	ldr	r1, [pc, #16]	; (800d6c8 <MX_FATFS_Init+0x18>)
 800d6b6:	4805      	ldr	r0, [pc, #20]	; (800d6cc <MX_FATFS_Init+0x1c>)
 800d6b8:	f002 fcdc 	bl	8010074 <FATFS_LinkDriver>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	461a      	mov	r2, r3
 800d6c0:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <MX_FATFS_Init+0x20>)
 800d6c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d6c4:	bf00      	nop
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20000d88 	.word	0x20000d88
 800d6cc:	08013004 	.word	0x08013004
 800d6d0:	20000d84 	.word	0x20000d84

0800d6d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d6de:	f000 f87b 	bl	800d7d8 <BSP_SD_IsDetected>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d001      	beq.n	800d6ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	e012      	b.n	800d712 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d6ec:	480b      	ldr	r0, [pc, #44]	; (800d71c <BSP_SD_Init+0x48>)
 800d6ee:	f7fb fa87 	bl	8008c00 <HAL_SD_Init>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d6f6:	79fb      	ldrb	r3, [r7, #7]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d109      	bne.n	800d710 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d6fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d700:	4806      	ldr	r0, [pc, #24]	; (800d71c <BSP_SD_Init+0x48>)
 800d702:	f7fb fed7 	bl	80094b4 <HAL_SD_ConfigWideBusOperation>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d710:	79fb      	ldrb	r3, [r7, #7]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	200008dc 	.word	0x200008dc

0800d720 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	68f9      	ldr	r1, [r7, #12]
 800d736:	4806      	ldr	r0, [pc, #24]	; (800d750 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d738:	f7fb fb1a 	bl	8008d70 <HAL_SD_ReadBlocks_DMA>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d746:	7dfb      	ldrb	r3, [r7, #23]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	200008dc 	.word	0x200008dc

0800d754 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	68f9      	ldr	r1, [r7, #12]
 800d76a:	4806      	ldr	r0, [pc, #24]	; (800d784 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d76c:	f7fb fbe2 	bl	8008f34 <HAL_SD_WriteBlocks_DMA>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3718      	adds	r7, #24
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	200008dc 	.word	0x200008dc

0800d788 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d78c:	4805      	ldr	r0, [pc, #20]	; (800d7a4 <BSP_SD_GetCardState+0x1c>)
 800d78e:	f7fb ff2b 	bl	80095e8 <HAL_SD_GetCardState>
 800d792:	4603      	mov	r3, r0
 800d794:	2b04      	cmp	r3, #4
 800d796:	bf14      	ite	ne
 800d798:	2301      	movne	r3, #1
 800d79a:	2300      	moveq	r3, #0
 800d79c:	b2db      	uxtb	r3, r3
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	200008dc 	.word	0x200008dc

0800d7a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	4803      	ldr	r0, [pc, #12]	; (800d7c0 <BSP_SD_GetCardInfo+0x18>)
 800d7b4:	f7fb fe52 	bl	800945c <HAL_SD_GetCardInfo>
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	200008dc 	.word	0x200008dc

0800d7c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d7cc:	f000 f9b2 	bl	800db34 <BSP_SD_ReadCpltCallback>
}
 800d7d0:	bf00      	nop
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d7e2:	f000 f80b 	bl	800d7fc <BSP_PlatformIsDetected>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	b2db      	uxtb	r3, r3
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d802:	2301      	movs	r3, #1
 800d804:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d80a:	4806      	ldr	r0, [pc, #24]	; (800d824 <BSP_PlatformIsDetected+0x28>)
 800d80c:	f7f6 ff60 	bl	80046d0 <HAL_GPIO_ReadPin>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d816:	2300      	movs	r3, #0
 800d818:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d81a:	79fb      	ldrb	r3, [r7, #7]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	40020800 	.word	0x40020800

0800d828 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d830:	f002 fc6c 	bl	801010c <osKernelSysTick>
 800d834:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d836:	e006      	b.n	800d846 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d838:	f7ff ffa6 	bl	800d788 <BSP_SD_GetCardState>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d101      	bne.n	800d846 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d842:	2300      	movs	r3, #0
 800d844:	e009      	b.n	800d85a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d846:	f002 fc61 	bl	801010c <osKernelSysTick>
 800d84a:	4602      	mov	r2, r0
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	429a      	cmp	r2, r3
 800d854:	d8f0      	bhi.n	800d838 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
	...

0800d864 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	4603      	mov	r3, r0
 800d86c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d86e:	4b0b      	ldr	r3, [pc, #44]	; (800d89c <SD_CheckStatus+0x38>)
 800d870:	2201      	movs	r2, #1
 800d872:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d874:	f7ff ff88 	bl	800d788 <BSP_SD_GetCardState>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d107      	bne.n	800d88e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d87e:	4b07      	ldr	r3, [pc, #28]	; (800d89c <SD_CheckStatus+0x38>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f023 0301 	bic.w	r3, r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	4b04      	ldr	r3, [pc, #16]	; (800d89c <SD_CheckStatus+0x38>)
 800d88c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d88e:	4b03      	ldr	r3, [pc, #12]	; (800d89c <SD_CheckStatus+0x38>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	b2db      	uxtb	r3, r3
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	20000009 	.word	0x20000009

0800d8a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d8aa:	4b20      	ldr	r3, [pc, #128]	; (800d92c <SD_initialize+0x8c>)
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d8b0:	f002 fc20 	bl	80100f4 <osKernelRunning>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d030      	beq.n	800d91c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d8ba:	f7ff ff0b 	bl	800d6d4 <BSP_SD_Init>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d107      	bne.n	800d8d4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d8c4:	79fb      	ldrb	r3, [r7, #7]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff ffcc 	bl	800d864 <SD_CheckStatus>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	4b16      	ldr	r3, [pc, #88]	; (800d92c <SD_initialize+0x8c>)
 800d8d2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d8d4:	4b15      	ldr	r3, [pc, #84]	; (800d92c <SD_initialize+0x8c>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d01e      	beq.n	800d91c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d8de:	4b14      	ldr	r3, [pc, #80]	; (800d930 <SD_initialize+0x90>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10e      	bne.n	800d904 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d8e6:	4b13      	ldr	r3, [pc, #76]	; (800d934 <SD_initialize+0x94>)
 800d8e8:	f107 0408 	add.w	r4, r7, #8
 800d8ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d8f2:	f107 0308 	add.w	r3, r7, #8
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f002 fc77 	bl	80101ec <osMessageCreate>
 800d8fe:	4603      	mov	r3, r0
 800d900:	4a0b      	ldr	r2, [pc, #44]	; (800d930 <SD_initialize+0x90>)
 800d902:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d904:	4b0a      	ldr	r3, [pc, #40]	; (800d930 <SD_initialize+0x90>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d107      	bne.n	800d91c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d90c:	4b07      	ldr	r3, [pc, #28]	; (800d92c <SD_initialize+0x8c>)
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	b2db      	uxtb	r3, r3
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <SD_initialize+0x8c>)
 800d91a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d91c:	4b03      	ldr	r3, [pc, #12]	; (800d92c <SD_initialize+0x8c>)
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	b2db      	uxtb	r3, r3
}
 800d922:	4618      	mov	r0, r3
 800d924:	371c      	adds	r7, #28
 800d926:	46bd      	mov	sp, r7
 800d928:	bd90      	pop	{r4, r7, pc}
 800d92a:	bf00      	nop
 800d92c:	20000009 	.word	0x20000009
 800d930:	20000d8c 	.word	0x20000d8c
 800d934:	08012f98 	.word	0x08012f98

0800d938 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d942:	79fb      	ldrb	r3, [r7, #7]
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff ff8d 	bl	800d864 <SD_CheckStatus>
 800d94a:	4603      	mov	r3, r0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b08a      	sub	sp, #40	; 0x28
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	607a      	str	r2, [r7, #4]
 800d95e:	603b      	str	r3, [r7, #0]
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d964:	2301      	movs	r3, #1
 800d966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d96a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d96e:	f7ff ff5b 	bl	800d828 <SD_CheckStatusWithTimeout>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	da02      	bge.n	800d97e <SD_read+0x2a>
  {
    return res;
 800d978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d97c:	e032      	b.n	800d9e4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	6879      	ldr	r1, [r7, #4]
 800d982:	68b8      	ldr	r0, [r7, #8]
 800d984:	f7ff fecc 	bl	800d720 <BSP_SD_ReadBlocks_DMA>
 800d988:	4603      	mov	r3, r0
 800d98a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d98e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d992:	2b00      	cmp	r3, #0
 800d994:	d124      	bne.n	800d9e0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d996:	4b15      	ldr	r3, [pc, #84]	; (800d9ec <SD_read+0x98>)
 800d998:	6819      	ldr	r1, [r3, #0]
 800d99a:	f107 0314 	add.w	r3, r7, #20
 800d99e:	f247 5230 	movw	r2, #30000	; 0x7530
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fc8a 	bl	80102bc <osMessageGet>

    if (event.status == osEventMessage)
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	2b10      	cmp	r3, #16
 800d9ac:	d118      	bne.n	800d9e0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d115      	bne.n	800d9e0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d9b4:	f002 fbaa 	bl	801010c <osKernelSysTick>
 800d9b8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d9ba:	e008      	b.n	800d9ce <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9bc:	f7ff fee4 	bl	800d788 <BSP_SD_GetCardState>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d103      	bne.n	800d9ce <SD_read+0x7a>
              {
                res = RES_OK;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d9cc:	e008      	b.n	800d9e0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d9ce:	f002 fb9d 	bl	801010c <osKernelSysTick>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d9ed      	bls.n	800d9bc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3728      	adds	r7, #40	; 0x28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20000d8c 	.word	0x20000d8c

0800d9f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b08a      	sub	sp, #40	; 0x28
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60b9      	str	r1, [r7, #8]
 800d9f8:	607a      	str	r2, [r7, #4]
 800d9fa:	603b      	str	r3, [r7, #0]
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800da06:	f247 5030 	movw	r0, #30000	; 0x7530
 800da0a:	f7ff ff0d 	bl	800d828 <SD_CheckStatusWithTimeout>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	da02      	bge.n	800da1a <SD_write+0x2a>
  {
    return res;
 800da14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da18:	e02e      	b.n	800da78 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	68b8      	ldr	r0, [r7, #8]
 800da20:	f7ff fe98 	bl	800d754 <BSP_SD_WriteBlocks_DMA>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d124      	bne.n	800da74 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800da2a:	4b15      	ldr	r3, [pc, #84]	; (800da80 <SD_write+0x90>)
 800da2c:	6819      	ldr	r1, [r3, #0]
 800da2e:	f107 0314 	add.w	r3, r7, #20
 800da32:	f247 5230 	movw	r2, #30000	; 0x7530
 800da36:	4618      	mov	r0, r3
 800da38:	f002 fc40 	bl	80102bc <osMessageGet>

    if (event.status == osEventMessage)
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	2b10      	cmp	r3, #16
 800da40:	d118      	bne.n	800da74 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	2b02      	cmp	r3, #2
 800da46:	d115      	bne.n	800da74 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800da48:	f002 fb60 	bl	801010c <osKernelSysTick>
 800da4c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800da4e:	e008      	b.n	800da62 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800da50:	f7ff fe9a 	bl	800d788 <BSP_SD_GetCardState>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d103      	bne.n	800da62 <SD_write+0x72>
          {
            res = RES_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800da60:	e008      	b.n	800da74 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800da62:	f002 fb53 	bl	801010c <osKernelSysTick>
 800da66:	4602      	mov	r2, r0
 800da68:	6a3b      	ldr	r3, [r7, #32]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	f247 522f 	movw	r2, #29999	; 0x752f
 800da70:	4293      	cmp	r3, r2
 800da72:	d9ed      	bls.n	800da50 <SD_write+0x60>
    }

  }
#endif

  return res;
 800da74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3728      	adds	r7, #40	; 0x28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	20000d8c 	.word	0x20000d8c

0800da84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08c      	sub	sp, #48	; 0x30
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	603a      	str	r2, [r7, #0]
 800da8e:	71fb      	strb	r3, [r7, #7]
 800da90:	460b      	mov	r3, r1
 800da92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da9a:	4b25      	ldr	r3, [pc, #148]	; (800db30 <SD_ioctl+0xac>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f003 0301 	and.w	r3, r3, #1
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <SD_ioctl+0x28>
 800daa8:	2303      	movs	r3, #3
 800daaa:	e03c      	b.n	800db26 <SD_ioctl+0xa2>

  switch (cmd)
 800daac:	79bb      	ldrb	r3, [r7, #6]
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d834      	bhi.n	800db1c <SD_ioctl+0x98>
 800dab2:	a201      	add	r2, pc, #4	; (adr r2, 800dab8 <SD_ioctl+0x34>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800dac9 	.word	0x0800dac9
 800dabc:	0800dad1 	.word	0x0800dad1
 800dac0:	0800dae9 	.word	0x0800dae9
 800dac4:	0800db03 	.word	0x0800db03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dace:	e028      	b.n	800db22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dad0:	f107 030c 	add.w	r3, r7, #12
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7ff fe67 	bl	800d7a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dae6:	e01c      	b.n	800db22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dae8:	f107 030c 	add.w	r3, r7, #12
 800daec:	4618      	mov	r0, r3
 800daee:	f7ff fe5b 	bl	800d7a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db00:	e00f      	b.n	800db22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db02:	f107 030c 	add.w	r3, r7, #12
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff fe4e 	bl	800d7a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	0a5a      	lsrs	r2, r3, #9
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db1a:	e002      	b.n	800db22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800db1c:	2304      	movs	r3, #4
 800db1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800db22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db26:	4618      	mov	r0, r3
 800db28:	3730      	adds	r7, #48	; 0x30
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20000009 	.word	0x20000009

0800db34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800db38:	4b04      	ldr	r3, [pc, #16]	; (800db4c <BSP_SD_ReadCpltCallback+0x18>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2200      	movs	r2, #0
 800db3e:	2101      	movs	r1, #1
 800db40:	4618      	mov	r0, r3
 800db42:	f002 fb7b 	bl	801023c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800db46:	bf00      	nop
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	20000d8c 	.word	0x20000d8c

0800db50 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800db50:	b590      	push	{r4, r7, lr}
 800db52:	b089      	sub	sp, #36	; 0x24
 800db54:	af04      	add	r7, sp, #16
 800db56:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800db58:	2301      	movs	r3, #1
 800db5a:	2202      	movs	r2, #2
 800db5c:	2102      	movs	r1, #2
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fcd7 	bl	800e512 <USBH_FindInterface>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	2bff      	cmp	r3, #255	; 0xff
 800db6c:	d002      	beq.n	800db74 <USBH_CDC_InterfaceInit+0x24>
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d901      	bls.n	800db78 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800db74:	2302      	movs	r3, #2
 800db76:	e13d      	b.n	800ddf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fcac 	bl	800e4da <USBH_SelectInterface>
 800db82:	4603      	mov	r3, r0
 800db84:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800db86:	7bbb      	ldrb	r3, [r7, #14]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800db8c:	2302      	movs	r3, #2
 800db8e:	e131      	b.n	800ddf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800db96:	2050      	movs	r0, #80	; 0x50
 800db98:	f005 f884 	bl	8012ca4 <malloc>
 800db9c:	4603      	mov	r3, r0
 800db9e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dba6:	69db      	ldr	r3, [r3, #28]
 800dba8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e11f      	b.n	800ddf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800dbb4:	2250      	movs	r2, #80	; 0x50
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	68b8      	ldr	r0, [r7, #8]
 800dbba:	f005 f92f 	bl	8012e1c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	211a      	movs	r1, #26
 800dbc4:	fb01 f303 	mul.w	r3, r1, r3
 800dbc8:	4413      	add	r3, r2
 800dbca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	da15      	bge.n	800dc02 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	211a      	movs	r1, #26
 800dbdc:	fb01 f303 	mul.w	r3, r1, r3
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbe6:	781a      	ldrb	r2, [r3, #0]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	211a      	movs	r1, #26
 800dbf2:	fb01 f303 	mul.w	r3, r1, r3
 800dbf6:	4413      	add	r3, r2
 800dbf8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dbfc:	881a      	ldrh	r2, [r3, #0]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	785b      	ldrb	r3, [r3, #1]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f002 f984 	bl	800ff16 <USBH_AllocPipe>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461a      	mov	r2, r3
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	7819      	ldrb	r1, [r3, #0]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	7858      	ldrb	r0, [r3, #1]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	8952      	ldrh	r2, [r2, #10]
 800dc2e:	9202      	str	r2, [sp, #8]
 800dc30:	2203      	movs	r2, #3
 800dc32:	9201      	str	r2, [sp, #4]
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	4623      	mov	r3, r4
 800dc38:	4602      	mov	r2, r0
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f002 f93c 	bl	800feb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2200      	movs	r2, #0
 800dc46:	4619      	mov	r1, r3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f004 ffa7 	bl	8012b9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2200      	movs	r2, #0
 800dc52:	210a      	movs	r1, #10
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fc5c 	bl	800e512 <USBH_FindInterface>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dc5e:	7bfb      	ldrb	r3, [r7, #15]
 800dc60:	2bff      	cmp	r3, #255	; 0xff
 800dc62:	d002      	beq.n	800dc6a <USBH_CDC_InterfaceInit+0x11a>
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d901      	bls.n	800dc6e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	e0c2      	b.n	800ddf4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800dc6e:	7bfb      	ldrb	r3, [r7, #15]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	211a      	movs	r1, #26
 800dc74:	fb01 f303 	mul.w	r3, r1, r3
 800dc78:	4413      	add	r3, r2
 800dc7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	b25b      	sxtb	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	da16      	bge.n	800dcb4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	211a      	movs	r1, #26
 800dc8c:	fb01 f303 	mul.w	r3, r1, r3
 800dc90:	4413      	add	r3, r2
 800dc92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc96:	781a      	ldrb	r2, [r3, #0]
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	211a      	movs	r1, #26
 800dca2:	fb01 f303 	mul.w	r3, r1, r3
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dcac:	881a      	ldrh	r2, [r3, #0]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	835a      	strh	r2, [r3, #26]
 800dcb2:	e015      	b.n	800dce0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dcb4:	7bfb      	ldrb	r3, [r7, #15]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	211a      	movs	r1, #26
 800dcba:	fb01 f303 	mul.w	r3, r1, r3
 800dcbe:	4413      	add	r3, r2
 800dcc0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dcc4:	781a      	ldrb	r2, [r3, #0]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dcca:	7bfb      	ldrb	r3, [r7, #15]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	211a      	movs	r1, #26
 800dcd0:	fb01 f303 	mul.w	r3, r1, r3
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dcda:	881a      	ldrh	r2, [r3, #0]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	211a      	movs	r1, #26
 800dce6:	fb01 f303 	mul.w	r3, r1, r3
 800dcea:	4413      	add	r3, r2
 800dcec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b25b      	sxtb	r3, r3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	da16      	bge.n	800dd26 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	211a      	movs	r1, #26
 800dcfe:	fb01 f303 	mul.w	r3, r1, r3
 800dd02:	4413      	add	r3, r2
 800dd04:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd08:	781a      	ldrb	r2, [r3, #0]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	211a      	movs	r1, #26
 800dd14:	fb01 f303 	mul.w	r3, r1, r3
 800dd18:	4413      	add	r3, r2
 800dd1a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dd1e:	881a      	ldrh	r2, [r3, #0]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	835a      	strh	r2, [r3, #26]
 800dd24:	e015      	b.n	800dd52 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	211a      	movs	r1, #26
 800dd2c:	fb01 f303 	mul.w	r3, r1, r3
 800dd30:	4413      	add	r3, r2
 800dd32:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd36:	781a      	ldrb	r2, [r3, #0]
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	211a      	movs	r1, #26
 800dd42:	fb01 f303 	mul.w	r3, r1, r3
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dd4c:	881a      	ldrh	r2, [r3, #0]
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	7b9b      	ldrb	r3, [r3, #14]
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f002 f8dc 	bl	800ff16 <USBH_AllocPipe>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	461a      	mov	r2, r3
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	7bdb      	ldrb	r3, [r3, #15]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f002 f8d2 	bl	800ff16 <USBH_AllocPipe>
 800dd72:	4603      	mov	r3, r0
 800dd74:	461a      	mov	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	7b59      	ldrb	r1, [r3, #13]
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	7b98      	ldrb	r0, [r3, #14]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	8b12      	ldrh	r2, [r2, #24]
 800dd92:	9202      	str	r2, [sp, #8]
 800dd94:	2202      	movs	r2, #2
 800dd96:	9201      	str	r2, [sp, #4]
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	4623      	mov	r3, r4
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f002 f88a 	bl	800feb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	7b19      	ldrb	r1, [r3, #12]
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	7bd8      	ldrb	r0, [r3, #15]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	8b52      	ldrh	r2, [r2, #26]
 800ddbc:	9202      	str	r2, [sp, #8]
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	9201      	str	r2, [sp, #4]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4623      	mov	r3, r4
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f002 f875 	bl	800feb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	7b5b      	ldrb	r3, [r3, #13]
 800ddda:	2200      	movs	r2, #0
 800dddc:	4619      	mov	r1, r3
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f004 fedc 	bl	8012b9c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	7b1b      	ldrb	r3, [r3, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f004 fed5 	bl	8012b9c <USBH_LL_SetToggle>

  return USBH_OK;
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3714      	adds	r7, #20
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd90      	pop	{r4, r7, pc}

0800ddfc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de0a:	69db      	ldr	r3, [r3, #28]
 800de0c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00e      	beq.n	800de34 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f002 f86a 	bl	800fef6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f002 f895 	bl	800ff58 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	7b1b      	ldrb	r3, [r3, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00e      	beq.n	800de5a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	7b1b      	ldrb	r3, [r3, #12]
 800de40:	4619      	mov	r1, r3
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f002 f857 	bl	800fef6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	7b1b      	ldrb	r3, [r3, #12]
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f002 f882 	bl	800ff58 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	7b5b      	ldrb	r3, [r3, #13]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00e      	beq.n	800de80 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	7b5b      	ldrb	r3, [r3, #13]
 800de66:	4619      	mov	r1, r3
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f002 f844 	bl	800fef6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	7b5b      	ldrb	r3, [r3, #13]
 800de72:	4619      	mov	r1, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f002 f86f 	bl	800ff58 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de86:	69db      	ldr	r3, [r3, #28]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00b      	beq.n	800dea4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de92:	69db      	ldr	r3, [r3, #28]
 800de94:	4618      	mov	r0, r3
 800de96:	f004 ff0d 	bl	8012cb4 <free>
    phost->pActiveClass->pData = 0U;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dea0:	2200      	movs	r2, #0
 800dea2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b084      	sub	sp, #16
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800debc:	69db      	ldr	r3, [r3, #28]
 800debe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	3340      	adds	r3, #64	; 0x40
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f8b1 	bl	800e02e <GetLineCoding>
 800decc:	4603      	mov	r3, r0
 800dece:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ded0:	7afb      	ldrb	r3, [r7, #11]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d105      	bne.n	800dee2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dedc:	2102      	movs	r1, #2
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dee2:	7afb      	ldrb	r3, [r7, #11]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800def4:	2301      	movs	r3, #1
 800def6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df02:	69db      	ldr	r3, [r3, #28]
 800df04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d877      	bhi.n	800e000 <USBH_CDC_Process+0x114>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <USBH_CDC_Process+0x2c>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800df2d 	.word	0x0800df2d
 800df1c:	0800df33 	.word	0x0800df33
 800df20:	0800df63 	.word	0x0800df63
 800df24:	0800dfd7 	.word	0x0800dfd7
 800df28:	0800dfe5 	.word	0x0800dfe5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73fb      	strb	r3, [r7, #15]
      break;
 800df30:	e06d      	b.n	800e00e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df36:	4619      	mov	r1, r3
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f897 	bl	800e06c <SetLineCoding>
 800df3e:	4603      	mov	r3, r0
 800df40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d104      	bne.n	800df52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2202      	movs	r2, #2
 800df4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800df50:	e058      	b.n	800e004 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800df52:	7bbb      	ldrb	r3, [r7, #14]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d055      	beq.n	800e004 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	2204      	movs	r2, #4
 800df5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800df60:	e050      	b.n	800e004 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	3340      	adds	r3, #64	; 0x40
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f860 	bl	800e02e <GetLineCoding>
 800df6e:	4603      	mov	r3, r0
 800df70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df72:	7bbb      	ldrb	r3, [r7, #14]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d126      	bne.n	800dfc6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df8a:	791b      	ldrb	r3, [r3, #4]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d13b      	bne.n	800e008 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d133      	bne.n	800e008 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfaa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d12b      	bne.n	800e008 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfb8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d124      	bne.n	800e008 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f982 	bl	800e2c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dfc4:	e020      	b.n	800e008 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d01d      	beq.n	800e008 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2204      	movs	r2, #4
 800dfd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dfd4:	e018      	b.n	800e008 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f867 	bl	800e0aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f8f6 	bl	800e1ce <CDC_ProcessReception>
      break;
 800dfe2:	e014      	b.n	800e00e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f001 f97b 	bl	800f2e2 <USBH_ClrFeature>
 800dfec:	4603      	mov	r3, r0
 800dfee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dff0:	7bbb      	ldrb	r3, [r7, #14]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10a      	bne.n	800e00c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800dffe:	e005      	b.n	800e00c <USBH_CDC_Process+0x120>

    default:
      break;
 800e000:	bf00      	nop
 800e002:	e004      	b.n	800e00e <USBH_CDC_Process+0x122>
      break;
 800e004:	bf00      	nop
 800e006:	e002      	b.n	800e00e <USBH_CDC_Process+0x122>
      break;
 800e008:	bf00      	nop
 800e00a:	e000      	b.n	800e00e <USBH_CDC_Process+0x122>
      break;
 800e00c:	bf00      	nop

  }

  return status;
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	22a1      	movs	r2, #161	; 0xa1
 800e03c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2221      	movs	r2, #33	; 0x21
 800e042:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2207      	movs	r2, #7
 800e054:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	2207      	movs	r2, #7
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f001 fbe9 	bl	800f834 <USBH_CtlReq>
 800e062:	4603      	mov	r3, r0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2221      	movs	r2, #33	; 0x21
 800e07a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2220      	movs	r2, #32
 800e080:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2207      	movs	r2, #7
 800e092:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2207      	movs	r2, #7
 800e098:	4619      	mov	r1, r3
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f001 fbca 	bl	800f834 <USBH_CtlReq>
 800e0a0:	4603      	mov	r3, r0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b086      	sub	sp, #24
 800e0ae:	af02      	add	r7, sp, #8
 800e0b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d002      	beq.n	800e0d0 <CDC_ProcessTransmission+0x26>
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d023      	beq.n	800e116 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e0ce:	e07a      	b.n	800e1c6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	8b12      	ldrh	r2, [r2, #24]
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d90b      	bls.n	800e0f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	69d9      	ldr	r1, [r3, #28]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8b1a      	ldrh	r2, [r3, #24]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	7b5b      	ldrb	r3, [r3, #13]
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	9000      	str	r0, [sp, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 fea0 	bl	800fe32 <USBH_BulkSendData>
 800e0f2:	e00b      	b.n	800e10c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	7b5b      	ldrb	r3, [r3, #13]
 800e102:	2001      	movs	r0, #1
 800e104:	9000      	str	r0, [sp, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f001 fe93 	bl	800fe32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2202      	movs	r2, #2
 800e110:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e114:	e057      	b.n	800e1c6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	7b5b      	ldrb	r3, [r3, #13]
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f004 fd13 	bl	8012b48 <USBH_LL_GetURBState>
 800e122:	4603      	mov	r3, r0
 800e124:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e126:	7afb      	ldrb	r3, [r7, #11]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d136      	bne.n	800e19a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	8b12      	ldrh	r2, [r2, #24]
 800e134:	4293      	cmp	r3, r2
 800e136:	d90e      	bls.n	800e156 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	8b12      	ldrh	r2, [r2, #24]
 800e140:	1a9a      	subs	r2, r3, r2
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	8b12      	ldrh	r2, [r2, #24]
 800e14e:	441a      	add	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	61da      	str	r2, [r3, #28]
 800e154:	e002      	b.n	800e15c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e160:	2b00      	cmp	r3, #0
 800e162:	d004      	beq.n	800e16e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e16c:	e006      	b.n	800e17c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f892 	bl	800e2a0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2204      	movs	r2, #4
 800e180:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e190:	2200      	movs	r2, #0
 800e192:	4619      	mov	r1, r3
 800e194:	f002 f852 	bl	801023c <osMessagePut>
      break;
 800e198:	e014      	b.n	800e1c4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800e19a:	7afb      	ldrb	r3, [r7, #11]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d111      	bne.n	800e1c4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2204      	movs	r2, #4
 800e1ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4619      	mov	r1, r3
 800e1c0:	f002 f83c 	bl	801023c <osMessagePut>
      break;
 800e1c4:	bf00      	nop
  }
}
 800e1c6:	bf00      	nop
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b086      	sub	sp, #24
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d002      	beq.n	800e1f4 <CDC_ProcessReception+0x26>
 800e1ee:	2b04      	cmp	r3, #4
 800e1f0:	d00e      	beq.n	800e210 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e1f2:	e051      	b.n	800e298 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	6a19      	ldr	r1, [r3, #32]
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	8b5a      	ldrh	r2, [r3, #26]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	7b1b      	ldrb	r3, [r3, #12]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f001 fe3b 	bl	800fe7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2204      	movs	r2, #4
 800e20a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e20e:	e043      	b.n	800e298 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	7b1b      	ldrb	r3, [r3, #12]
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f004 fc96 	bl	8012b48 <USBH_LL_GetURBState>
 800e21c:	4603      	mov	r3, r0
 800e21e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e220:	7cfb      	ldrb	r3, [r7, #19]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d137      	bne.n	800e296 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	7b1b      	ldrb	r3, [r3, #12]
 800e22a:	4619      	mov	r1, r3
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f004 fbf9 	bl	8012a24 <USBH_LL_GetLastXferSize>
 800e232:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d016      	beq.n	800e26c <CDC_ProcessReception+0x9e>
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	8b5b      	ldrh	r3, [r3, #26]
 800e242:	461a      	mov	r2, r3
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4293      	cmp	r3, r2
 800e248:	d910      	bls.n	800e26c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	1ad2      	subs	r2, r2, r3
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	6a1a      	ldr	r2, [r3, #32]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	441a      	add	r2, r3
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2203      	movs	r2, #3
 800e266:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e26a:	e006      	b.n	800e27a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f81d 	bl	800e2b4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2204      	movs	r2, #4
 800e27e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e28e:	2200      	movs	r2, #0
 800e290:	4619      	mov	r1, r3
 800e292:	f001 ffd3 	bl	801023c <osMessagePut>
      break;
 800e296:	bf00      	nop
  }
}
 800e298:	bf00      	nop
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2bc:	bf00      	nop
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800e2dc:	b5b0      	push	{r4, r5, r7, lr}
 800e2de:	b090      	sub	sp, #64	; 0x40
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d101      	bne.n	800e2f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e2f0:	2302      	movs	r3, #2
 800e2f2:	e04d      	b.n	800e390 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	79fa      	ldrb	r2, [r7, #7]
 800e2f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2200      	movs	r2, #0
 800e308:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f000 f847 	bl	800e3a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d003      	beq.n	800e340 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e340:	4b15      	ldr	r3, [pc, #84]	; (800e398 <USBH_Init+0xbc>)
 800e342:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e34c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e350:	2100      	movs	r1, #0
 800e352:	4618      	mov	r0, r3
 800e354:	f001 ff4a 	bl	80101ec <osMessageCreate>
 800e358:	4602      	mov	r2, r0
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e360:	4b0e      	ldr	r3, [pc, #56]	; (800e39c <USBH_Init+0xc0>)
 800e362:	f107 0414 	add.w	r4, r7, #20
 800e366:	461d      	mov	r5, r3
 800e368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e36c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e374:	f107 0314 	add.w	r3, r7, #20
 800e378:	68f9      	ldr	r1, [r7, #12]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f001 fed6 	bl	801012c <osThreadCreate>
 800e380:	4602      	mov	r2, r0
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f004 fa97 	bl	80128bc <USBH_LL_Init>

  return USBH_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3740      	adds	r7, #64	; 0x40
 800e394:	46bd      	mov	sp, r7
 800e396:	bdb0      	pop	{r4, r5, r7, pc}
 800e398:	08012fac 	.word	0x08012fac
 800e39c:	08012fc8 	.word	0x08012fc8

0800e3a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	e009      	b.n	800e3c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	33e0      	adds	r3, #224	; 0xe0
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	2200      	movs	r2, #0
 800e3be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	60fb      	str	r3, [r7, #12]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b0f      	cmp	r3, #15
 800e3ca:	d9f2      	bls.n	800e3b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	60fb      	str	r3, [r7, #12]
 800e3d0:	e009      	b.n	800e3e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e3dc:	2200      	movs	r2, #0
 800e3de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3ec:	d3f1      	bcc.n	800e3d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2240      	movs	r2, #64	; 0x40
 800e412:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2201      	movs	r2, #1
 800e426:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	331c      	adds	r3, #28
 800e43e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e442:	2100      	movs	r1, #0
 800e444:	4618      	mov	r0, r3
 800e446:	f004 fce9 	bl	8012e1c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e450:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e454:	2100      	movs	r1, #0
 800e456:	4618      	mov	r0, r3
 800e458:	f004 fce0 	bl	8012e1c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800e462:	2212      	movs	r2, #18
 800e464:	2100      	movs	r1, #0
 800e466:	4618      	mov	r0, r3
 800e468:	f004 fcd8 	bl	8012e1c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e472:	223e      	movs	r2, #62	; 0x3e
 800e474:	2100      	movs	r1, #0
 800e476:	4618      	mov	r0, r3
 800e478:	f004 fcd0 	bl	8012e1c <memset>

  return USBH_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e486:	b480      	push	{r7}
 800e488:	b085      	sub	sp, #20
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
 800e48e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d016      	beq.n	800e4c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10e      	bne.n	800e4c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e4aa:	1c59      	adds	r1, r3, #1
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	33de      	adds	r3, #222	; 0xde
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	73fb      	strb	r3, [r7, #15]
 800e4c0:	e004      	b.n	800e4cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	73fb      	strb	r3, [r7, #15]
 800e4c6:	e001      	b.n	800e4cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b085      	sub	sp, #20
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e4f0:	78fa      	ldrb	r2, [r7, #3]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d204      	bcs.n	800e500 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	78fa      	ldrb	r2, [r7, #3]
 800e4fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e4fe:	e001      	b.n	800e504 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e500:	2302      	movs	r3, #2
 800e502:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e504:	7bfb      	ldrb	r3, [r7, #15]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e512:	b480      	push	{r7}
 800e514:	b087      	sub	sp, #28
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	4608      	mov	r0, r1
 800e51c:	4611      	mov	r1, r2
 800e51e:	461a      	mov	r2, r3
 800e520:	4603      	mov	r3, r0
 800e522:	70fb      	strb	r3, [r7, #3]
 800e524:	460b      	mov	r3, r1
 800e526:	70bb      	strb	r3, [r7, #2]
 800e528:	4613      	mov	r3, r2
 800e52a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e52c:	2300      	movs	r3, #0
 800e52e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e530:	2300      	movs	r3, #0
 800e532:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e53a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e53c:	e025      	b.n	800e58a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e53e:	7dfb      	ldrb	r3, [r7, #23]
 800e540:	221a      	movs	r2, #26
 800e542:	fb02 f303 	mul.w	r3, r2, r3
 800e546:	3308      	adds	r3, #8
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4413      	add	r3, r2
 800e54c:	3302      	adds	r3, #2
 800e54e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	795b      	ldrb	r3, [r3, #5]
 800e554:	78fa      	ldrb	r2, [r7, #3]
 800e556:	429a      	cmp	r2, r3
 800e558:	d002      	beq.n	800e560 <USBH_FindInterface+0x4e>
 800e55a:	78fb      	ldrb	r3, [r7, #3]
 800e55c:	2bff      	cmp	r3, #255	; 0xff
 800e55e:	d111      	bne.n	800e584 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e564:	78ba      	ldrb	r2, [r7, #2]
 800e566:	429a      	cmp	r2, r3
 800e568:	d002      	beq.n	800e570 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e56a:	78bb      	ldrb	r3, [r7, #2]
 800e56c:	2bff      	cmp	r3, #255	; 0xff
 800e56e:	d109      	bne.n	800e584 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e574:	787a      	ldrb	r2, [r7, #1]
 800e576:	429a      	cmp	r2, r3
 800e578:	d002      	beq.n	800e580 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e57a:	787b      	ldrb	r3, [r7, #1]
 800e57c:	2bff      	cmp	r3, #255	; 0xff
 800e57e:	d101      	bne.n	800e584 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	e006      	b.n	800e592 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e584:	7dfb      	ldrb	r3, [r7, #23]
 800e586:	3301      	adds	r3, #1
 800e588:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d9d6      	bls.n	800e53e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e590:	23ff      	movs	r3, #255	; 0xff
}
 800e592:	4618      	mov	r0, r3
 800e594:	371c      	adds	r7, #28
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr

0800e59e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f004 f9c4 	bl	8012934 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f004 fadd 	bl	8012b6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
	...

0800e5c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af04      	add	r7, sp, #16
 800e5c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e5c8:	2302      	movs	r3, #2
 800e5ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d102      	bne.n	800e5e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2203      	movs	r2, #3
 800e5e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b0b      	cmp	r3, #11
 800e5ea:	f200 8247 	bhi.w	800ea7c <USBH_Process+0x4bc>
 800e5ee:	a201      	add	r2, pc, #4	; (adr r2, 800e5f4 <USBH_Process+0x34>)
 800e5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f4:	0800e625 	.word	0x0800e625
 800e5f8:	0800e673 	.word	0x0800e673
 800e5fc:	0800e6f7 	.word	0x0800e6f7
 800e600:	0800e9fb 	.word	0x0800e9fb
 800e604:	0800ea7d 	.word	0x0800ea7d
 800e608:	0800e7b7 	.word	0x0800e7b7
 800e60c:	0800e985 	.word	0x0800e985
 800e610:	0800e809 	.word	0x0800e809
 800e614:	0800e845 	.word	0x0800e845
 800e618:	0800e87f 	.word	0x0800e87f
 800e61c:	0800e8dd 	.word	0x0800e8dd
 800e620:	0800e9e3 	.word	0x0800e9e3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f000 8227 	beq.w	800ea80 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e638:	20c8      	movs	r0, #200	; 0xc8
 800e63a:	f004 fadf 	bl	8012bfc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f004 f9d5 	bl	80129ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e668:	2200      	movs	r2, #0
 800e66a:	4619      	mov	r1, r3
 800e66c:	f001 fde6 	bl	801023c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e670:	e206      	b.n	800ea80 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d107      	bne.n	800e68c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2200      	movs	r2, #0
 800e680:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2202      	movs	r2, #2
 800e688:	701a      	strb	r2, [r3, #0]
 800e68a:	e025      	b.n	800e6d8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e696:	d914      	bls.n	800e6c2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e69e:	3301      	adds	r3, #1
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e6ae:	2b03      	cmp	r3, #3
 800e6b0:	d903      	bls.n	800e6ba <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	220d      	movs	r2, #13
 800e6b6:	701a      	strb	r2, [r3, #0]
 800e6b8:	e00e      	b.n	800e6d8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	701a      	strb	r2, [r3, #0]
 800e6c0:	e00a      	b.n	800e6d8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e6c8:	f103 020a 	add.w	r2, r3, #10
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e6d2:	200a      	movs	r0, #10
 800e6d4:	f004 fa92 	bl	8012bfc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	f001 fda4 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e6f4:	e1cb      	b.n	800ea8e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d005      	beq.n	800e70c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e706:	2104      	movs	r1, #4
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e70c:	2064      	movs	r0, #100	; 0x64
 800e70e:	f004 fa75 	bl	8012bfc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f004 f944 	bl	80129a0 <USBH_LL_GetSpeed>
 800e718:	4603      	mov	r3, r0
 800e71a:	461a      	mov	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2205      	movs	r2, #5
 800e726:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e728:	2100      	movs	r1, #0
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f001 fbf3 	bl	800ff16 <USBH_AllocPipe>
 800e730:	4603      	mov	r3, r0
 800e732:	461a      	mov	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e738:	2180      	movs	r1, #128	; 0x80
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f001 fbeb 	bl	800ff16 <USBH_AllocPipe>
 800e740:	4603      	mov	r3, r0
 800e742:	461a      	mov	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	7919      	ldrb	r1, [r3, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e75c:	b292      	uxth	r2, r2
 800e75e:	9202      	str	r2, [sp, #8]
 800e760:	2200      	movs	r2, #0
 800e762:	9201      	str	r2, [sp, #4]
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	4603      	mov	r3, r0
 800e768:	2280      	movs	r2, #128	; 0x80
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f001 fba4 	bl	800feb8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	7959      	ldrb	r1, [r3, #5]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e784:	b292      	uxth	r2, r2
 800e786:	9202      	str	r2, [sp, #8]
 800e788:	2200      	movs	r2, #0
 800e78a:	9201      	str	r2, [sp, #4]
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	4603      	mov	r3, r0
 800e790:	2200      	movs	r2, #0
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f001 fb90 	bl	800feb8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	f001 fd44 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e7b4:	e16b      	b.n	800ea8e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f96e 	bl	800ea98 <USBH_HandleEnum>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f040 815d 	bne.w	800ea84 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d103      	bne.n	800e7e4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2208      	movs	r2, #8
 800e7e0:	701a      	strb	r2, [r3, #0]
 800e7e2:	e002      	b.n	800e7ea <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2207      	movs	r2, #7
 800e7e8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2205      	movs	r2, #5
 800e7ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7fe:	2200      	movs	r2, #0
 800e800:	4619      	mov	r1, r3
 800e802:	f001 fd1b 	bl	801023c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e806:	e13d      	b.n	800ea84 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 813a 	beq.w	800ea88 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e81a:	2101      	movs	r1, #1
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2208      	movs	r2, #8
 800e824:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2205      	movs	r2, #5
 800e82a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e83a:	2200      	movs	r2, #0
 800e83c:	4619      	mov	r1, r3
 800e83e:	f001 fcfd 	bl	801023c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e842:	e121      	b.n	800ea88 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 fd00 	bl	800f254 <USBH_SetCfg>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d102      	bne.n	800e860 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2209      	movs	r2, #9
 800e85e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e874:	2200      	movs	r2, #0
 800e876:	4619      	mov	r1, r3
 800e878:	f001 fce0 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e87c:	e107      	b.n	800ea8e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e884:	f003 0320 	and.w	r3, r3, #32
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d015      	beq.n	800e8b8 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e88c:	2101      	movs	r1, #1
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fd03 	bl	800f29a <USBH_SetFeature>
 800e894:	4603      	mov	r3, r0
 800e896:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e898:	7bbb      	ldrb	r3, [r7, #14]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d103      	bne.n	800e8a8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	220a      	movs	r2, #10
 800e8a4:	701a      	strb	r2, [r3, #0]
 800e8a6:	e00a      	b.n	800e8be <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800e8a8:	7bbb      	ldrb	r3, [r7, #14]
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b03      	cmp	r3, #3
 800e8ae:	d106      	bne.n	800e8be <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	220a      	movs	r2, #10
 800e8b4:	701a      	strb	r2, [r3, #0]
 800e8b6:	e002      	b.n	800e8be <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	220a      	movs	r2, #10
 800e8bc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f001 fcb1 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e8da:	e0d8      	b.n	800ea8e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d03f      	beq.n	800e966 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	73fb      	strb	r3, [r7, #15]
 800e8f2:	e016      	b.n	800e922 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e8f4:	7bfa      	ldrb	r2, [r7, #15]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	32de      	adds	r2, #222	; 0xde
 800e8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8fe:	791a      	ldrb	r2, [r3, #4]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e906:	429a      	cmp	r2, r3
 800e908:	d108      	bne.n	800e91c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e90a:	7bfa      	ldrb	r2, [r7, #15]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	32de      	adds	r2, #222	; 0xde
 800e910:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e91a:	e005      	b.n	800e928 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
 800e91e:	3301      	adds	r3, #1
 800e920:	73fb      	strb	r3, [r7, #15]
 800e922:	7bfb      	ldrb	r3, [r7, #15]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d0e5      	beq.n	800e8f4 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d016      	beq.n	800e960 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	4798      	blx	r3
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d109      	bne.n	800e958 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2206      	movs	r2, #6
 800e948:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e950:	2103      	movs	r1, #3
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	4798      	blx	r3
 800e956:	e006      	b.n	800e966 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	220d      	movs	r2, #13
 800e95c:	701a      	strb	r2, [r3, #0]
 800e95e:	e002      	b.n	800e966 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	220d      	movs	r2, #13
 800e964:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2205      	movs	r2, #5
 800e96a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e97a:	2200      	movs	r2, #0
 800e97c:	4619      	mov	r1, r3
 800e97e:	f001 fc5d 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e982:	e084      	b.n	800ea8e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d017      	beq.n	800e9be <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	4798      	blx	r3
 800e99a:	4603      	mov	r3, r0
 800e99c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e99e:	7bbb      	ldrb	r3, [r7, #14]
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d103      	bne.n	800e9ae <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	220b      	movs	r2, #11
 800e9aa:	701a      	strb	r2, [r3, #0]
 800e9ac:	e00a      	b.n	800e9c4 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800e9ae:	7bbb      	ldrb	r3, [r7, #14]
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	d106      	bne.n	800e9c4 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	220d      	movs	r2, #13
 800e9ba:	701a      	strb	r2, [r3, #0]
 800e9bc:	e002      	b.n	800e9c4 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	220d      	movs	r2, #13
 800e9c2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2205      	movs	r2, #5
 800e9c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e9d8:	2200      	movs	r2, #0
 800e9da:	4619      	mov	r1, r3
 800e9dc:	f001 fc2e 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e9e0:	e055      	b.n	800ea8e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d04f      	beq.n	800ea8c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	4798      	blx	r3
      }
      break;
 800e9f8:	e048      	b.n	800ea8c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff fccc 	bl	800e3a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d009      	beq.n	800ea26 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea36:	2105      	movs	r1, #5
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d107      	bne.n	800ea58 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7ff fda4 	bl	800e59e <USBH_Start>
 800ea56:	e002      	b.n	800ea5e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f003 ff6b 	bl	8012934 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea72:	2200      	movs	r2, #0
 800ea74:	4619      	mov	r1, r3
 800ea76:	f001 fbe1 	bl	801023c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ea7a:	e008      	b.n	800ea8e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800ea7c:	bf00      	nop
 800ea7e:	e006      	b.n	800ea8e <USBH_Process+0x4ce>
      break;
 800ea80:	bf00      	nop
 800ea82:	e004      	b.n	800ea8e <USBH_Process+0x4ce>
      break;
 800ea84:	bf00      	nop
 800ea86:	e002      	b.n	800ea8e <USBH_Process+0x4ce>
    break;
 800ea88:	bf00      	nop
 800ea8a:	e000      	b.n	800ea8e <USBH_Process+0x4ce>
      break;
 800ea8c:	bf00      	nop
  }
  return USBH_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b088      	sub	sp, #32
 800ea9c:	af04      	add	r7, sp, #16
 800ea9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	785b      	ldrb	r3, [r3, #1]
 800eaac:	2b07      	cmp	r3, #7
 800eaae:	f200 8208 	bhi.w	800eec2 <USBH_HandleEnum+0x42a>
 800eab2:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <USBH_HandleEnum+0x20>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800ead9 	.word	0x0800ead9
 800eabc:	0800eb97 	.word	0x0800eb97
 800eac0:	0800ec01 	.word	0x0800ec01
 800eac4:	0800ec8f 	.word	0x0800ec8f
 800eac8:	0800ecf9 	.word	0x0800ecf9
 800eacc:	0800ed69 	.word	0x0800ed69
 800ead0:	0800ee05 	.word	0x0800ee05
 800ead4:	0800ee83 	.word	0x0800ee83
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ead8:	2108      	movs	r1, #8
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 faea 	bl	800f0b4 <USBH_Get_DevDesc>
 800eae0:	4603      	mov	r3, r0
 800eae2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eae4:	7bbb      	ldrb	r3, [r7, #14]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d130      	bne.n	800eb4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	7919      	ldrb	r1, [r3, #4]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eb0e:	b292      	uxth	r2, r2
 800eb10:	9202      	str	r2, [sp, #8]
 800eb12:	2200      	movs	r2, #0
 800eb14:	9201      	str	r2, [sp, #4]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2280      	movs	r2, #128	; 0x80
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f001 f9cb 	bl	800feb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7959      	ldrb	r1, [r3, #5]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eb36:	b292      	uxth	r2, r2
 800eb38:	9202      	str	r2, [sp, #8]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	9201      	str	r2, [sp, #4]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	4603      	mov	r3, r0
 800eb42:	2200      	movs	r2, #0
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f001 f9b7 	bl	800feb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eb4a:	e1bc      	b.n	800eec6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb4c:	7bbb      	ldrb	r3, [r7, #14]
 800eb4e:	2b03      	cmp	r3, #3
 800eb50:	f040 81b9 	bne.w	800eec6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb6a:	2b03      	cmp	r3, #3
 800eb6c:	d903      	bls.n	800eb76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	220d      	movs	r2, #13
 800eb72:	701a      	strb	r2, [r3, #0]
      break;
 800eb74:	e1a7      	b.n	800eec6 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	795b      	ldrb	r3, [r3, #5]
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f001 f9eb 	bl	800ff58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	791b      	ldrb	r3, [r3, #4]
 800eb86:	4619      	mov	r1, r3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 f9e5 	bl	800ff58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	701a      	strb	r2, [r3, #0]
      break;
 800eb94:	e197      	b.n	800eec6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800eb96:	2112      	movs	r1, #18
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 fa8b 	bl	800f0b4 <USBH_Get_DevDesc>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eba2:	7bbb      	ldrb	r3, [r7, #14]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d103      	bne.n	800ebb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2202      	movs	r2, #2
 800ebac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ebae:	e18c      	b.n	800eeca <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ebb0:	7bbb      	ldrb	r3, [r7, #14]
 800ebb2:	2b03      	cmp	r3, #3
 800ebb4:	f040 8189 	bne.w	800eeca <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d903      	bls.n	800ebda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	220d      	movs	r2, #13
 800ebd6:	701a      	strb	r2, [r3, #0]
      break;
 800ebd8:	e177      	b.n	800eeca <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	795b      	ldrb	r3, [r3, #5]
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f001 f9b9 	bl	800ff58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	791b      	ldrb	r3, [r3, #4]
 800ebea:	4619      	mov	r1, r3
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f001 f9b3 	bl	800ff58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	701a      	strb	r2, [r3, #0]
      break;
 800ebfe:	e164      	b.n	800eeca <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ec00:	2101      	movs	r1, #1
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fb02 	bl	800f20c <USBH_SetAddress>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec0c:	7bbb      	ldrb	r3, [r7, #14]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d132      	bne.n	800ec78 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ec12:	2002      	movs	r0, #2
 800ec14:	f003 fff2 	bl	8012bfc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2203      	movs	r2, #3
 800ec24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7919      	ldrb	r1, [r3, #4]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ec3a:	b292      	uxth	r2, r2
 800ec3c:	9202      	str	r2, [sp, #8]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	9201      	str	r2, [sp, #4]
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	4603      	mov	r3, r0
 800ec46:	2280      	movs	r2, #128	; 0x80
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 f935 	bl	800feb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	7959      	ldrb	r1, [r3, #5]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ec62:	b292      	uxth	r2, r2
 800ec64:	9202      	str	r2, [sp, #8]
 800ec66:	2200      	movs	r2, #0
 800ec68:	9201      	str	r2, [sp, #4]
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2200      	movs	r2, #0
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f001 f921 	bl	800feb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ec76:	e12a      	b.n	800eece <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
 800ec7a:	2b03      	cmp	r3, #3
 800ec7c:	f040 8127 	bne.w	800eece <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	220d      	movs	r2, #13
 800ec84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	705a      	strb	r2, [r3, #1]
      break;
 800ec8c:	e11f      	b.n	800eece <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ec8e:	2109      	movs	r1, #9
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 fa37 	bl	800f104 <USBH_Get_CfgDesc>
 800ec96:	4603      	mov	r3, r0
 800ec98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec9a:	7bbb      	ldrb	r3, [r7, #14]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d103      	bne.n	800eca8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2204      	movs	r2, #4
 800eca4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eca6:	e114      	b.n	800eed2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eca8:	7bbb      	ldrb	r3, [r7, #14]
 800ecaa:	2b03      	cmp	r3, #3
 800ecac:	f040 8111 	bne.w	800eed2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecc6:	2b03      	cmp	r3, #3
 800ecc8:	d903      	bls.n	800ecd2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	220d      	movs	r2, #13
 800ecce:	701a      	strb	r2, [r3, #0]
      break;
 800ecd0:	e0ff      	b.n	800eed2 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	795b      	ldrb	r3, [r3, #5]
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f001 f93d 	bl	800ff58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	791b      	ldrb	r3, [r3, #4]
 800ece2:	4619      	mov	r1, r3
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f001 f937 	bl	800ff58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	701a      	strb	r2, [r3, #0]
      break;
 800ecf6:	e0ec      	b.n	800eed2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 f9ff 	bl	800f104 <USBH_Get_CfgDesc>
 800ed06:	4603      	mov	r3, r0
 800ed08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ed0a:	7bbb      	ldrb	r3, [r7, #14]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d103      	bne.n	800ed18 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2205      	movs	r2, #5
 800ed14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ed16:	e0de      	b.n	800eed6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed18:	7bbb      	ldrb	r3, [r7, #14]
 800ed1a:	2b03      	cmp	r3, #3
 800ed1c:	f040 80db 	bne.w	800eed6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed26:	3301      	adds	r3, #1
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	d903      	bls.n	800ed42 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	220d      	movs	r2, #13
 800ed3e:	701a      	strb	r2, [r3, #0]
      break;
 800ed40:	e0c9      	b.n	800eed6 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	795b      	ldrb	r3, [r3, #5]
 800ed46:	4619      	mov	r1, r3
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f001 f905 	bl	800ff58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	791b      	ldrb	r3, [r3, #4]
 800ed52:	4619      	mov	r1, r3
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f001 f8ff 	bl	800ff58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	701a      	strb	r2, [r3, #0]
      break;
 800ed66:	e0b6      	b.n	800eed6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d036      	beq.n	800ede0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ed7e:	23ff      	movs	r3, #255	; 0xff
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f9e3 	bl	800f14c <USBH_Get_StringDesc>
 800ed86:	4603      	mov	r3, r0
 800ed88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed8a:	7bbb      	ldrb	r3, [r7, #14]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d111      	bne.n	800edb4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2206      	movs	r2, #6
 800ed94:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2205      	movs	r2, #5
 800ed9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edaa:	2200      	movs	r2, #0
 800edac:	4619      	mov	r1, r3
 800edae:	f001 fa45 	bl	801023c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800edb2:	e092      	b.n	800eeda <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800edb4:	7bbb      	ldrb	r3, [r7, #14]
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	f040 808f 	bne.w	800eeda <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2206      	movs	r2, #6
 800edc0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2205      	movs	r2, #5
 800edc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edd6:	2200      	movs	r2, #0
 800edd8:	4619      	mov	r1, r3
 800edda:	f001 fa2f 	bl	801023c <osMessagePut>
      break;
 800edde:	e07c      	b.n	800eeda <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2206      	movs	r2, #6
 800ede4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2205      	movs	r2, #5
 800edea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edfa:	2200      	movs	r2, #0
 800edfc:	4619      	mov	r1, r3
 800edfe:	f001 fa1d 	bl	801023c <osMessagePut>
      break;
 800ee02:	e06a      	b.n	800eeda <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d027      	beq.n	800ee5e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ee1a:	23ff      	movs	r3, #255	; 0xff
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f995 	bl	800f14c <USBH_Get_StringDesc>
 800ee22:	4603      	mov	r3, r0
 800ee24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d103      	bne.n	800ee34 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2207      	movs	r2, #7
 800ee30:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ee32:	e054      	b.n	800eede <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee34:	7bbb      	ldrb	r3, [r7, #14]
 800ee36:	2b03      	cmp	r3, #3
 800ee38:	d151      	bne.n	800eede <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2207      	movs	r2, #7
 800ee3e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2205      	movs	r2, #5
 800ee44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee54:	2200      	movs	r2, #0
 800ee56:	4619      	mov	r1, r3
 800ee58:	f001 f9f0 	bl	801023c <osMessagePut>
      break;
 800ee5c:	e03f      	b.n	800eede <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2207      	movs	r2, #7
 800ee62:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2205      	movs	r2, #5
 800ee68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee78:	2200      	movs	r2, #0
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	f001 f9de 	bl	801023c <osMessagePut>
      break;
 800ee80:	e02d      	b.n	800eede <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d017      	beq.n	800eebc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ee98:	23ff      	movs	r3, #255	; 0xff
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f956 	bl	800f14c <USBH_Get_StringDesc>
 800eea0:	4603      	mov	r3, r0
 800eea2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eea4:	7bbb      	ldrb	r3, [r7, #14]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d102      	bne.n	800eeb0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800eeae:	e018      	b.n	800eee2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
 800eeb2:	2b03      	cmp	r3, #3
 800eeb4:	d115      	bne.n	800eee2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	73fb      	strb	r3, [r7, #15]
      break;
 800eeba:	e012      	b.n	800eee2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800eebc:	2300      	movs	r3, #0
 800eebe:	73fb      	strb	r3, [r7, #15]
      break;
 800eec0:	e00f      	b.n	800eee2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800eec2:	bf00      	nop
 800eec4:	e00e      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eec6:	bf00      	nop
 800eec8:	e00c      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eeca:	bf00      	nop
 800eecc:	e00a      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eece:	bf00      	nop
 800eed0:	e008      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eed2:	bf00      	nop
 800eed4:	e006      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eed6:	bf00      	nop
 800eed8:	e004      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eeda:	bf00      	nop
 800eedc:	e002      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eede:	bf00      	nop
 800eee0:	e000      	b.n	800eee4 <USBH_HandleEnum+0x44c>
      break;
 800eee2:	bf00      	nop
  }
  return Status;
 800eee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop

0800eef0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ef02:	bf00      	nop
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 f804 	bl	800ef32 <USBH_HandleSof>
}
 800ef2a:	bf00      	nop
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b082      	sub	sp, #8
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b0b      	cmp	r3, #11
 800ef42:	d10a      	bne.n	800ef5a <USBH_HandleSof+0x28>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d005      	beq.n	800ef5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	4798      	blx	r3
  }
}
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef86:	2200      	movs	r2, #0
 800ef88:	4619      	mov	r1, r3
 800ef8a:	f001 f957 	bl	801023c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ef8e:	bf00      	nop
}
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ef96:	b480      	push	{r7}
 800ef98:	b083      	sub	sp, #12
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800efa6:	bf00      	nop
}
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b082      	sub	sp, #8
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2201      	movs	r2, #1
 800efbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2201      	movs	r2, #1
 800efd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800efe6:	2200      	movs	r2, #0
 800efe8:	4619      	mov	r1, r3
 800efea:	f001 f927 	bl	801023c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f003 fca6 	bl	801296a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	791b      	ldrb	r3, [r3, #4]
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 ff97 	bl	800ff58 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	795b      	ldrb	r3, [r3, #5]
 800f02e:	4619      	mov	r1, r3
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 ff91 	bl	800ff58 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f04a:	2200      	movs	r2, #0
 800f04c:	4619      	mov	r1, r3
 800f04e:	f001 f8f5 	bl	801023c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800f06a:	f107 030c 	add.w	r3, r7, #12
 800f06e:	f04f 32ff 	mov.w	r2, #4294967295
 800f072:	4618      	mov	r0, r3
 800f074:	f001 f922 	bl	80102bc <osMessageGet>
    if (event.status == osEventMessage)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b10      	cmp	r3, #16
 800f07c:	d1f2      	bne.n	800f064 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7ff fa9e 	bl	800e5c0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f084:	e7ee      	b.n	800f064 <USBH_Process_OS+0x8>

0800f086 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2201      	movs	r2, #1
 800f092:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	f001 f8c9 	bl	801023c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af02      	add	r7, sp, #8
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800f0c6:	78fb      	ldrb	r3, [r7, #3]
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f864 	bl	800f1a2 <USBH_GetDescriptor>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d10a      	bne.n	800f0fa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f0f0:	78fa      	ldrb	r2, [r7, #3]
 800f0f2:	b292      	uxth	r2, r2
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	f000 f919 	bl	800f32c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3710      	adds	r7, #16
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af02      	add	r7, sp, #8
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	331c      	adds	r3, #28
 800f114:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f116:	887b      	ldrh	r3, [r7, #2]
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f120:	2100      	movs	r1, #0
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f83d 	bl	800f1a2 <USBH_GetDescriptor>
 800f128:	4603      	mov	r3, r0
 800f12a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d107      	bne.n	800f142 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800f132:	887b      	ldrh	r3, [r7, #2]
 800f134:	461a      	mov	r2, r3
 800f136:	68b9      	ldr	r1, [r7, #8]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f989 	bl	800f450 <USBH_ParseCfgDesc>
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f142:	7bfb      	ldrb	r3, [r7, #15]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b088      	sub	sp, #32
 800f150:	af02      	add	r7, sp, #8
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	607a      	str	r2, [r7, #4]
 800f156:	461a      	mov	r2, r3
 800f158:	460b      	mov	r3, r1
 800f15a:	72fb      	strb	r3, [r7, #11]
 800f15c:	4613      	mov	r3, r2
 800f15e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800f160:	7afb      	ldrb	r3, [r7, #11]
 800f162:	b29b      	uxth	r3, r3
 800f164:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f168:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800f170:	893b      	ldrh	r3, [r7, #8]
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	460b      	mov	r3, r1
 800f176:	2100      	movs	r1, #0
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 f812 	bl	800f1a2 <USBH_GetDescriptor>
 800f17e:	4603      	mov	r3, r0
 800f180:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800f182:	7dfb      	ldrb	r3, [r7, #23]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d107      	bne.n	800f198 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f18e:	893a      	ldrh	r2, [r7, #8]
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 fb00 	bl	800f798 <USBH_ParseStringDesc>
  }

  return status;
 800f198:	7dfb      	ldrb	r3, [r7, #23]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3718      	adds	r7, #24
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b084      	sub	sp, #16
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	60f8      	str	r0, [r7, #12]
 800f1aa:	607b      	str	r3, [r7, #4]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	72fb      	strb	r3, [r7, #11]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	789b      	ldrb	r3, [r3, #2]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d11c      	bne.n	800f1f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f1bc:	7afb      	ldrb	r3, [r7, #11]
 800f1be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2206      	movs	r2, #6
 800f1cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	893a      	ldrh	r2, [r7, #8]
 800f1d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f1d4:	893b      	ldrh	r3, [r7, #8]
 800f1d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f1da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1de:	d104      	bne.n	800f1ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f240 4209 	movw	r2, #1033	; 0x409
 800f1e6:	829a      	strh	r2, [r3, #20]
 800f1e8:	e002      	b.n	800f1f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	8b3a      	ldrh	r2, [r7, #24]
 800f1f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f1f6:	8b3b      	ldrh	r3, [r7, #24]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f000 fb19 	bl	800f834 <USBH_CtlReq>
 800f202:	4603      	mov	r3, r0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	460b      	mov	r3, r1
 800f216:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	789b      	ldrb	r3, [r3, #2]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d10f      	bne.n	800f240 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2205      	movs	r2, #5
 800f22a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f22c:	78fb      	ldrb	r3, [r7, #3]
 800f22e:	b29a      	uxth	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f240:	2200      	movs	r2, #0
 800f242:	2100      	movs	r1, #0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 faf5 	bl	800f834 <USBH_CtlReq>
 800f24a:	4603      	mov	r3, r0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	460b      	mov	r3, r1
 800f25e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	789b      	ldrb	r3, [r3, #2]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d10e      	bne.n	800f286 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2209      	movs	r2, #9
 800f272:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	887a      	ldrh	r2, [r7, #2]
 800f278:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f286:	2200      	movs	r2, #0
 800f288:	2100      	movs	r1, #0
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 fad2 	bl	800f834 <USBH_CtlReq>
 800f290:	4603      	mov	r3, r0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	789b      	ldrb	r3, [r3, #2]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d10f      	bne.n	800f2ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2203      	movs	r2, #3
 800f2b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f2ba:	78fb      	ldrb	r3, [r7, #3]
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 faae 	bl	800f834 <USBH_CtlReq>
 800f2d8:	4603      	mov	r3, r0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b082      	sub	sp, #8
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	789b      	ldrb	r3, [r3, #2]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d10f      	bne.n	800f316 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f308:	78fb      	ldrb	r3, [r7, #3]
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800f316:	2200      	movs	r2, #0
 800f318:	2100      	movs	r1, #0
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fa8a 	bl	800f834 <USBH_CtlReq>
 800f320:	4603      	mov	r3, r0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	4613      	mov	r3, r2
 800f338:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	781a      	ldrb	r2, [r3, #0]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	785a      	ldrb	r2, [r3, #1]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	3302      	adds	r3, #2
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	b29a      	uxth	r2, r3
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	3303      	adds	r3, #3
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	b29b      	uxth	r3, r3
 800f35a:	021b      	lsls	r3, r3, #8
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	4313      	orrs	r3, r2
 800f360:	b29a      	uxth	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	791a      	ldrb	r2, [r3, #4]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	795a      	ldrb	r2, [r3, #5]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	799a      	ldrb	r2, [r3, #6]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	79da      	ldrb	r2, [r3, #7]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	79db      	ldrb	r3, [r3, #7]
 800f38a:	2b20      	cmp	r3, #32
 800f38c:	dc0f      	bgt.n	800f3ae <USBH_ParseDevDesc+0x82>
 800f38e:	2b08      	cmp	r3, #8
 800f390:	db14      	blt.n	800f3bc <USBH_ParseDevDesc+0x90>
 800f392:	3b08      	subs	r3, #8
 800f394:	4a2d      	ldr	r2, [pc, #180]	; (800f44c <USBH_ParseDevDesc+0x120>)
 800f396:	fa22 f303 	lsr.w	r3, r2, r3
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	bf14      	ite	ne
 800f3a2:	2301      	movne	r3, #1
 800f3a4:	2300      	moveq	r3, #0
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d102      	bne.n	800f3b2 <USBH_ParseDevDesc+0x86>
 800f3ac:	e006      	b.n	800f3bc <USBH_ParseDevDesc+0x90>
 800f3ae:	2b40      	cmp	r3, #64	; 0x40
 800f3b0:	d104      	bne.n	800f3bc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	79da      	ldrb	r2, [r3, #7]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	71da      	strb	r2, [r3, #7]
      break;
 800f3ba:	e003      	b.n	800f3c4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2240      	movs	r2, #64	; 0x40
 800f3c0:	71da      	strb	r2, [r3, #7]
      break;
 800f3c2:	bf00      	nop
  }

  if (length > 8U)
 800f3c4:	88fb      	ldrh	r3, [r7, #6]
 800f3c6:	2b08      	cmp	r3, #8
 800f3c8:	d939      	bls.n	800f43e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	3308      	adds	r3, #8
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3309      	adds	r3, #9
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	021b      	lsls	r3, r3, #8
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	330a      	adds	r3, #10
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	b29a      	uxth	r2, r3
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	330b      	adds	r3, #11
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	021b      	lsls	r3, r3, #8
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	330c      	adds	r3, #12
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	330d      	adds	r3, #13
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	b29b      	uxth	r3, r3
 800f412:	021b      	lsls	r3, r3, #8
 800f414:	b29b      	uxth	r3, r3
 800f416:	4313      	orrs	r3, r2
 800f418:	b29a      	uxth	r2, r3
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	7b9a      	ldrb	r2, [r3, #14]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	7bda      	ldrb	r2, [r3, #15]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	7c1a      	ldrb	r2, [r3, #16]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	7c5a      	ldrb	r2, [r3, #17]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	745a      	strb	r2, [r3, #17]
  }
}
 800f43e:	bf00      	nop
 800f440:	3714      	adds	r7, #20
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	01000101 	.word	0x01000101

0800f450 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b08c      	sub	sp, #48	; 0x30
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	4613      	mov	r3, r2
 800f45c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f464:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800f466:	2300      	movs	r3, #0
 800f468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f470:	2300      	movs	r3, #0
 800f472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800f476:	2300      	movs	r3, #0
 800f478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	781a      	ldrb	r2, [r3, #0]
 800f484:	6a3b      	ldr	r3, [r7, #32]
 800f486:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	785a      	ldrb	r2, [r3, #1]
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	3302      	adds	r3, #2
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	b29a      	uxth	r2, r3
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	3303      	adds	r3, #3
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	021b      	lsls	r3, r3, #8
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ac:	bf28      	it	cs
 800f4ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	791a      	ldrb	r2, [r3, #4]
 800f4bc:	6a3b      	ldr	r3, [r7, #32]
 800f4be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	795a      	ldrb	r2, [r3, #5]
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
 800f4c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	799a      	ldrb	r2, [r3, #6]
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	79da      	ldrb	r2, [r3, #7]
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	7a1a      	ldrb	r2, [r3, #8]
 800f4dc:	6a3b      	ldr	r3, [r7, #32]
 800f4de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800f4e0:	6a3b      	ldr	r3, [r7, #32]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b09      	cmp	r3, #9
 800f4e6:	d002      	beq.n	800f4ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	2209      	movs	r2, #9
 800f4ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f4ee:	88fb      	ldrh	r3, [r7, #6]
 800f4f0:	2b09      	cmp	r3, #9
 800f4f2:	f240 8099 	bls.w	800f628 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 800f4f6:	2309      	movs	r3, #9
 800f4f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f4fe:	e07d      	b.n	800f5fc <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f500:	f107 0316 	add.w	r3, r7, #22
 800f504:	4619      	mov	r1, r3
 800f506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f508:	f000 f979 	bl	800f7fe <USBH_GetNextDesc>
 800f50c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	785b      	ldrb	r3, [r3, #1]
 800f512:	2b04      	cmp	r3, #4
 800f514:	d172      	bne.n	800f5fc <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	2b09      	cmp	r3, #9
 800f51c:	d002      	beq.n	800f524 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	2209      	movs	r2, #9
 800f522:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f528:	221a      	movs	r2, #26
 800f52a:	fb02 f303 	mul.w	r3, r2, r3
 800f52e:	3308      	adds	r3, #8
 800f530:	6a3a      	ldr	r2, [r7, #32]
 800f532:	4413      	add	r3, r2
 800f534:	3302      	adds	r3, #2
 800f536:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f53a:	69f8      	ldr	r0, [r7, #28]
 800f53c:	f000 f87a 	bl	800f634 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f540:	2300      	movs	r3, #0
 800f542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f546:	2300      	movs	r3, #0
 800f548:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f54a:	e03f      	b.n	800f5cc <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f54c:	f107 0316 	add.w	r3, r7, #22
 800f550:	4619      	mov	r1, r3
 800f552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f554:	f000 f953 	bl	800f7fe <USBH_GetNextDesc>
 800f558:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	2b05      	cmp	r3, #5
 800f560:	d134      	bne.n	800f5cc <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	795b      	ldrb	r3, [r3, #5]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d10f      	bne.n	800f58a <USBH_ParseCfgDesc+0x13a>
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	799b      	ldrb	r3, [r3, #6]
 800f56e:	2b02      	cmp	r3, #2
 800f570:	d10b      	bne.n	800f58a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	79db      	ldrb	r3, [r3, #7]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10b      	bne.n	800f592 <USBH_ParseCfgDesc+0x142>
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	2b09      	cmp	r3, #9
 800f580:	d007      	beq.n	800f592 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 800f582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f584:	2209      	movs	r2, #9
 800f586:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f588:	e003      	b.n	800f592 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58c:	2207      	movs	r2, #7
 800f58e:	701a      	strb	r2, [r3, #0]
 800f590:	e000      	b.n	800f594 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f592:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f598:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f59c:	3201      	adds	r2, #1
 800f59e:	00d2      	lsls	r2, r2, #3
 800f5a0:	211a      	movs	r1, #26
 800f5a2:	fb01 f303 	mul.w	r3, r1, r3
 800f5a6:	4413      	add	r3, r2
 800f5a8:	3308      	adds	r3, #8
 800f5aa:	6a3a      	ldr	r2, [r7, #32]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5b4:	69b9      	ldr	r1, [r7, #24]
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	f000 f86c 	bl	800f694 <USBH_ParseEPDesc>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800f5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	791b      	ldrb	r3, [r3, #4]
 800f5d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d204      	bcs.n	800f5e2 <USBH_ParseCfgDesc+0x192>
 800f5d8:	6a3b      	ldr	r3, [r7, #32]
 800f5da:	885a      	ldrh	r2, [r3, #2]
 800f5dc:	8afb      	ldrh	r3, [r7, #22]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d8b4      	bhi.n	800f54c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	791b      	ldrb	r3, [r3, #4]
 800f5e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d201      	bcs.n	800f5f2 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	e01c      	b.n	800f62c <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 800f5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f600:	2b01      	cmp	r3, #1
 800f602:	d805      	bhi.n	800f610 <USBH_ParseCfgDesc+0x1c0>
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	885a      	ldrh	r2, [r3, #2]
 800f608:	8afb      	ldrh	r3, [r7, #22]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	f63f af78 	bhi.w	800f500 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f610:	6a3b      	ldr	r3, [r7, #32]
 800f612:	791b      	ldrb	r3, [r3, #4]
 800f614:	2b02      	cmp	r3, #2
 800f616:	bf28      	it	cs
 800f618:	2302      	movcs	r3, #2
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f620:	429a      	cmp	r2, r3
 800f622:	d201      	bcs.n	800f628 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 800f624:	2303      	movs	r3, #3
 800f626:	e001      	b.n	800f62c <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 800f628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3730      	adds	r7, #48	; 0x30
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	781a      	ldrb	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	785a      	ldrb	r2, [r3, #1]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	789a      	ldrb	r2, [r3, #2]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	78da      	ldrb	r2, [r3, #3]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	791a      	ldrb	r2, [r3, #4]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	795a      	ldrb	r2, [r3, #5]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	799a      	ldrb	r2, [r3, #6]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	79da      	ldrb	r2, [r3, #7]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	7a1a      	ldrb	r2, [r3, #8]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	721a      	strb	r2, [r3, #8]
}
 800f686:	bf00      	nop
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
	...

0800f694 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	781a      	ldrb	r2, [r3, #0]
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	785a      	ldrb	r2, [r3, #1]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	789a      	ldrb	r2, [r3, #2]
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	78da      	ldrb	r2, [r3, #3]
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3305      	adds	r3, #5
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	021b      	lsls	r3, r3, #8
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	799a      	ldrb	r2, [r3, #6]
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	889b      	ldrh	r3, [r3, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d102      	bne.n	800f6f6 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f6f0:	2303      	movs	r3, #3
 800f6f2:	75fb      	strb	r3, [r7, #23]
 800f6f4:	e00d      	b.n	800f712 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	889a      	ldrh	r2, [r3, #4]
 800f6fa:	4b26      	ldr	r3, [pc, #152]	; (800f794 <USBH_ParseEPDesc+0x100>)
 800f6fc:	4013      	ands	r3, r2
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	889b      	ldrh	r3, [r3, #4]
 800f708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d116      	bne.n	800f74a <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	78db      	ldrb	r3, [r3, #3]
 800f720:	f003 0303 	and.w	r3, r3, #3
 800f724:	2b01      	cmp	r3, #1
 800f726:	d005      	beq.n	800f734 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	78db      	ldrb	r3, [r3, #3]
 800f72c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f730:	2b03      	cmp	r3, #3
 800f732:	d127      	bne.n	800f784 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	799b      	ldrb	r3, [r3, #6]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d003      	beq.n	800f744 <USBH_ParseEPDesc+0xb0>
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	799b      	ldrb	r3, [r3, #6]
 800f740:	2b10      	cmp	r3, #16
 800f742:	d91f      	bls.n	800f784 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 800f744:	2303      	movs	r3, #3
 800f746:	75fb      	strb	r3, [r7, #23]
 800f748:	e01c      	b.n	800f784 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	78db      	ldrb	r3, [r3, #3]
 800f74e:	f003 0303 	and.w	r3, r3, #3
 800f752:	2b01      	cmp	r3, #1
 800f754:	d10a      	bne.n	800f76c <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	799b      	ldrb	r3, [r3, #6]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d003      	beq.n	800f766 <USBH_ParseEPDesc+0xd2>
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	799b      	ldrb	r3, [r3, #6]
 800f762:	2b10      	cmp	r3, #16
 800f764:	d90e      	bls.n	800f784 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 800f766:	2303      	movs	r3, #3
 800f768:	75fb      	strb	r3, [r7, #23]
 800f76a:	e00b      	b.n	800f784 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	78db      	ldrb	r3, [r3, #3]
 800f770:	f003 0303 	and.w	r3, r3, #3
 800f774:	2b03      	cmp	r3, #3
 800f776:	d105      	bne.n	800f784 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	799b      	ldrb	r3, [r3, #6]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d101      	bne.n	800f784 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 800f780:	2303      	movs	r3, #3
 800f782:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f784:	7dfb      	ldrb	r3, [r7, #23]
}
 800f786:	4618      	mov	r0, r3
 800f788:	371c      	adds	r7, #28
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	fffff800 	.word	0xfffff800

0800f798 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f798:	b480      	push	{r7}
 800f79a:	b087      	sub	sp, #28
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2b03      	cmp	r3, #3
 800f7ae:	d120      	bne.n	800f7f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	1e9a      	subs	r2, r3, #2
 800f7b6:	88fb      	ldrh	r3, [r7, #6]
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	bf28      	it	cs
 800f7bc:	4613      	movcs	r3, r2
 800f7be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	3302      	adds	r3, #2
 800f7c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	82fb      	strh	r3, [r7, #22]
 800f7ca:	e00b      	b.n	800f7e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f7cc:	8afb      	ldrh	r3, [r7, #22]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	781a      	ldrb	r2, [r3, #0]
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f7de:	8afb      	ldrh	r3, [r7, #22]
 800f7e0:	3302      	adds	r3, #2
 800f7e2:	82fb      	strh	r3, [r7, #22]
 800f7e4:	8afa      	ldrh	r2, [r7, #22]
 800f7e6:	8abb      	ldrh	r3, [r7, #20]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d3ef      	bcc.n	800f7cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	701a      	strb	r2, [r3, #0]
  }
}
 800f7f2:	bf00      	nop
 800f7f4:	371c      	adds	r7, #28
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr

0800f7fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f7fe:	b480      	push	{r7}
 800f800:	b085      	sub	sp, #20
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	881a      	ldrh	r2, [r3, #0]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	b29b      	uxth	r3, r3
 800f812:	4413      	add	r3, r2
 800f814:	b29a      	uxth	r2, r3
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4413      	add	r3, r2
 800f824:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f826:	68fb      	ldr	r3, [r7, #12]
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3714      	adds	r7, #20
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	4613      	mov	r3, r2
 800f840:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f842:	2301      	movs	r3, #1
 800f844:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	789b      	ldrb	r3, [r3, #2]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d002      	beq.n	800f854 <USBH_CtlReq+0x20>
 800f84e:	2b02      	cmp	r3, #2
 800f850:	d01d      	beq.n	800f88e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f852:	e043      	b.n	800f8dc <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	68ba      	ldr	r2, [r7, #8]
 800f858:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	88fa      	ldrh	r2, [r7, #6]
 800f85e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2201      	movs	r2, #1
 800f864:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2202      	movs	r2, #2
 800f86a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f86c:	2301      	movs	r3, #1
 800f86e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2203      	movs	r2, #3
 800f874:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f884:	2200      	movs	r2, #0
 800f886:	4619      	mov	r1, r3
 800f888:	f000 fcd8 	bl	801023c <osMessagePut>
      break;
 800f88c:	e026      	b.n	800f8dc <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f000 f82a 	bl	800f8e8 <USBH_HandleControl>
 800f894:	4603      	mov	r3, r0
 800f896:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f898:	7dfb      	ldrb	r3, [r7, #23]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d002      	beq.n	800f8a4 <USBH_CtlReq+0x70>
 800f89e:	7dfb      	ldrb	r3, [r7, #23]
 800f8a0:	2b03      	cmp	r3, #3
 800f8a2:	d106      	bne.n	800f8b2 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	761a      	strb	r2, [r3, #24]
 800f8b0:	e005      	b.n	800f8be <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d102      	bne.n	800f8be <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2203      	movs	r2, #3
 800f8c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	f000 fcb1 	bl	801023c <osMessagePut>
      break;
 800f8da:	bf00      	nop
  }
  return status;
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3718      	adds	r7, #24
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af02      	add	r7, sp, #8
 800f8ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	7e1b      	ldrb	r3, [r3, #24]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	2b0a      	cmp	r3, #10
 800f900:	f200 8229 	bhi.w	800fd56 <USBH_HandleControl+0x46e>
 800f904:	a201      	add	r2, pc, #4	; (adr r2, 800f90c <USBH_HandleControl+0x24>)
 800f906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90a:	bf00      	nop
 800f90c:	0800f939 	.word	0x0800f939
 800f910:	0800f953 	.word	0x0800f953
 800f914:	0800f9f5 	.word	0x0800f9f5
 800f918:	0800fa1b 	.word	0x0800fa1b
 800f91c:	0800faa7 	.word	0x0800faa7
 800f920:	0800fad1 	.word	0x0800fad1
 800f924:	0800fb93 	.word	0x0800fb93
 800f928:	0800fbb5 	.word	0x0800fbb5
 800f92c:	0800fc47 	.word	0x0800fc47
 800f930:	0800fc6d 	.word	0x0800fc6d
 800f934:	0800fcff 	.word	0x0800fcff
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f103 0110 	add.w	r1, r3, #16
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	795b      	ldrb	r3, [r3, #5]
 800f942:	461a      	mov	r2, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fa17 	bl	800fd78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2202      	movs	r2, #2
 800f94e:	761a      	strb	r2, [r3, #24]
      break;
 800f950:	e20c      	b.n	800fd6c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	795b      	ldrb	r3, [r3, #5]
 800f956:	4619      	mov	r1, r3
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f003 f8f5 	bl	8012b48 <USBH_LL_GetURBState>
 800f95e:	4603      	mov	r3, r0
 800f960:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f962:	7bbb      	ldrb	r3, [r7, #14]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d12c      	bne.n	800f9c2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	7c1b      	ldrb	r3, [r3, #16]
 800f96c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f970:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8adb      	ldrh	r3, [r3, #22]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00a      	beq.n	800f990 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f97a:	7b7b      	ldrb	r3, [r7, #13]
 800f97c:	2b80      	cmp	r3, #128	; 0x80
 800f97e:	d103      	bne.n	800f988 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2203      	movs	r2, #3
 800f984:	761a      	strb	r2, [r3, #24]
 800f986:	e00d      	b.n	800f9a4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2205      	movs	r2, #5
 800f98c:	761a      	strb	r2, [r3, #24]
 800f98e:	e009      	b.n	800f9a4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f990:	7b7b      	ldrb	r3, [r7, #13]
 800f992:	2b80      	cmp	r3, #128	; 0x80
 800f994:	d103      	bne.n	800f99e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2209      	movs	r2, #9
 800f99a:	761a      	strb	r2, [r3, #24]
 800f99c:	e002      	b.n	800f9a4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2207      	movs	r2, #7
 800f9a2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2203      	movs	r2, #3
 800f9a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	f000 fc3e 	bl	801023c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f9c0:	e1cb      	b.n	800fd5a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f9c2:	7bbb      	ldrb	r3, [r7, #14]
 800f9c4:	2b04      	cmp	r3, #4
 800f9c6:	d003      	beq.n	800f9d0 <USBH_HandleControl+0xe8>
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	f040 81c5 	bne.w	800fd5a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	220b      	movs	r2, #11
 800f9d4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2203      	movs	r2, #3
 800f9da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	f000 fc25 	bl	801023c <osMessagePut>
      break;
 800f9f2:	e1b2      	b.n	800fd5a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6899      	ldr	r1, [r3, #8]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	899a      	ldrh	r2, [r3, #12]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	791b      	ldrb	r3, [r3, #4]
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f9f2 	bl	800fdf6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2204      	movs	r2, #4
 800fa16:	761a      	strb	r2, [r3, #24]
      break;
 800fa18:	e1a8      	b.n	800fd6c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	791b      	ldrb	r3, [r3, #4]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f003 f891 	bl	8012b48 <USBH_LL_GetURBState>
 800fa26:	4603      	mov	r3, r0
 800fa28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fa2a:	7bbb      	ldrb	r3, [r7, #14]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d110      	bne.n	800fa52 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2209      	movs	r2, #9
 800fa34:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2203      	movs	r2, #3
 800fa3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	f000 fbf5 	bl	801023c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
 800fa54:	2b05      	cmp	r3, #5
 800fa56:	d110      	bne.n	800fa7a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fa58:	2303      	movs	r3, #3
 800fa5a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2203      	movs	r2, #3
 800fa60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa70:	2200      	movs	r2, #0
 800fa72:	4619      	mov	r1, r3
 800fa74:	f000 fbe2 	bl	801023c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fa78:	e171      	b.n	800fd5e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800fa7a:	7bbb      	ldrb	r3, [r7, #14]
 800fa7c:	2b04      	cmp	r3, #4
 800fa7e:	f040 816e 	bne.w	800fd5e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	220b      	movs	r2, #11
 800fa86:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2203      	movs	r2, #3
 800fa8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	4619      	mov	r1, r3
 800faa0:	f000 fbcc 	bl	801023c <osMessagePut>
      break;
 800faa4:	e15b      	b.n	800fd5e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6899      	ldr	r1, [r3, #8]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	899a      	ldrh	r2, [r3, #12]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	795b      	ldrb	r3, [r3, #5]
 800fab2:	2001      	movs	r0, #1
 800fab4:	9000      	str	r0, [sp, #0]
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f978 	bl	800fdac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2206      	movs	r2, #6
 800facc:	761a      	strb	r2, [r3, #24]
      break;
 800face:	e14d      	b.n	800fd6c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	795b      	ldrb	r3, [r3, #5]
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f003 f836 	bl	8012b48 <USBH_LL_GetURBState>
 800fadc:	4603      	mov	r3, r0
 800fade:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d111      	bne.n	800fb0a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2207      	movs	r2, #7
 800faea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2203      	movs	r2, #3
 800faf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb00:	2200      	movs	r2, #0
 800fb02:	4619      	mov	r1, r3
 800fb04:	f000 fb9a 	bl	801023c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fb08:	e12b      	b.n	800fd62 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800fb0a:	7bbb      	ldrb	r3, [r7, #14]
 800fb0c:	2b05      	cmp	r3, #5
 800fb0e:	d113      	bne.n	800fb38 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	220c      	movs	r2, #12
 800fb14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fb16:	2303      	movs	r3, #3
 800fb18:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2203      	movs	r2, #3
 800fb1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb2e:	2200      	movs	r2, #0
 800fb30:	4619      	mov	r1, r3
 800fb32:	f000 fb83 	bl	801023c <osMessagePut>
      break;
 800fb36:	e114      	b.n	800fd62 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fb38:	7bbb      	ldrb	r3, [r7, #14]
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d111      	bne.n	800fb62 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2205      	movs	r2, #5
 800fb42:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2203      	movs	r2, #3
 800fb48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	f000 fb6e 	bl	801023c <osMessagePut>
      break;
 800fb60:	e0ff      	b.n	800fd62 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fb62:	7bbb      	ldrb	r3, [r7, #14]
 800fb64:	2b04      	cmp	r3, #4
 800fb66:	f040 80fc 	bne.w	800fd62 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	220b      	movs	r2, #11
 800fb6e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fb70:	2302      	movs	r3, #2
 800fb72:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2203      	movs	r2, #3
 800fb78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb88:	2200      	movs	r2, #0
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	f000 fb56 	bl	801023c <osMessagePut>
      break;
 800fb90:	e0e7      	b.n	800fd62 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	791b      	ldrb	r3, [r3, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	2100      	movs	r1, #0
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f92b 	bl	800fdf6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2208      	movs	r2, #8
 800fbb0:	761a      	strb	r2, [r3, #24]

      break;
 800fbb2:	e0db      	b.n	800fd6c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	791b      	ldrb	r3, [r3, #4]
 800fbb8:	4619      	mov	r1, r3
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f002 ffc4 	bl	8012b48 <USBH_LL_GetURBState>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fbc4:	7bbb      	ldrb	r3, [r7, #14]
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d113      	bne.n	800fbf2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	220d      	movs	r2, #13
 800fbce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2203      	movs	r2, #3
 800fbd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fbe8:	2200      	movs	r2, #0
 800fbea:	4619      	mov	r1, r3
 800fbec:	f000 fb26 	bl	801023c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fbf0:	e0b9      	b.n	800fd66 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800fbf2:	7bbb      	ldrb	r3, [r7, #14]
 800fbf4:	2b04      	cmp	r3, #4
 800fbf6:	d111      	bne.n	800fc1c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	220b      	movs	r2, #11
 800fbfc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2203      	movs	r2, #3
 800fc02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc12:	2200      	movs	r2, #0
 800fc14:	4619      	mov	r1, r3
 800fc16:	f000 fb11 	bl	801023c <osMessagePut>
      break;
 800fc1a:	e0a4      	b.n	800fd66 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800fc1c:	7bbb      	ldrb	r3, [r7, #14]
 800fc1e:	2b05      	cmp	r3, #5
 800fc20:	f040 80a1 	bne.w	800fd66 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800fc24:	2303      	movs	r3, #3
 800fc26:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2203      	movs	r2, #3
 800fc2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	4619      	mov	r1, r3
 800fc40:	f000 fafc 	bl	801023c <osMessagePut>
      break;
 800fc44:	e08f      	b.n	800fd66 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	795b      	ldrb	r3, [r3, #5]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	9200      	str	r2, [sp, #0]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2100      	movs	r1, #0
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f8aa 	bl	800fdac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	220a      	movs	r2, #10
 800fc68:	761a      	strb	r2, [r3, #24]
      break;
 800fc6a:	e07f      	b.n	800fd6c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	795b      	ldrb	r3, [r3, #5]
 800fc70:	4619      	mov	r1, r3
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f002 ff68 	bl	8012b48 <USBH_LL_GetURBState>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fc7c:	7bbb      	ldrb	r3, [r7, #14]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d113      	bne.n	800fcaa <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800fc82:	2300      	movs	r3, #0
 800fc84:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	220d      	movs	r2, #13
 800fc8a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2203      	movs	r2, #3
 800fc90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fca0:	2200      	movs	r2, #0
 800fca2:	4619      	mov	r1, r3
 800fca4:	f000 faca 	bl	801023c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fca8:	e05f      	b.n	800fd6a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fcaa:	7bbb      	ldrb	r3, [r7, #14]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d111      	bne.n	800fcd4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2209      	movs	r2, #9
 800fcb4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2203      	movs	r2, #3
 800fcba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fcca:	2200      	movs	r2, #0
 800fccc:	4619      	mov	r1, r3
 800fcce:	f000 fab5 	bl	801023c <osMessagePut>
      break;
 800fcd2:	e04a      	b.n	800fd6a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800fcd4:	7bbb      	ldrb	r3, [r7, #14]
 800fcd6:	2b04      	cmp	r3, #4
 800fcd8:	d147      	bne.n	800fd6a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	220b      	movs	r2, #11
 800fcde:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2203      	movs	r2, #3
 800fce4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	f000 faa0 	bl	801023c <osMessagePut>
      break;
 800fcfc:	e035      	b.n	800fd6a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	7e5b      	ldrb	r3, [r3, #25]
 800fd02:	3301      	adds	r3, #1
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	765a      	strb	r2, [r3, #25]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	7e5b      	ldrb	r3, [r3, #25]
 800fd0e:	2b02      	cmp	r3, #2
 800fd10:	d806      	bhi.n	800fd20 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2201      	movs	r2, #1
 800fd16:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fd1e:	e025      	b.n	800fd6c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fd26:	2106      	movs	r1, #6
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	795b      	ldrb	r3, [r3, #5]
 800fd36:	4619      	mov	r1, r3
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f90d 	bl	800ff58 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	791b      	ldrb	r3, [r3, #4]
 800fd42:	4619      	mov	r1, r3
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f907 	bl	800ff58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fd50:	2302      	movs	r3, #2
 800fd52:	73fb      	strb	r3, [r7, #15]
      break;
 800fd54:	e00a      	b.n	800fd6c <USBH_HandleControl+0x484>

    default:
      break;
 800fd56:	bf00      	nop
 800fd58:	e008      	b.n	800fd6c <USBH_HandleControl+0x484>
      break;
 800fd5a:	bf00      	nop
 800fd5c:	e006      	b.n	800fd6c <USBH_HandleControl+0x484>
      break;
 800fd5e:	bf00      	nop
 800fd60:	e004      	b.n	800fd6c <USBH_HandleControl+0x484>
      break;
 800fd62:	bf00      	nop
 800fd64:	e002      	b.n	800fd6c <USBH_HandleControl+0x484>
      break;
 800fd66:	bf00      	nop
 800fd68:	e000      	b.n	800fd6c <USBH_HandleControl+0x484>
      break;
 800fd6a:	bf00      	nop
  }

  return status;
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop

0800fd78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b088      	sub	sp, #32
 800fd7c:	af04      	add	r7, sp, #16
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	4613      	mov	r3, r2
 800fd84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fd86:	79f9      	ldrb	r1, [r7, #7]
 800fd88:	2300      	movs	r3, #0
 800fd8a:	9303      	str	r3, [sp, #12]
 800fd8c:	2308      	movs	r3, #8
 800fd8e:	9302      	str	r3, [sp, #8]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	2300      	movs	r3, #0
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f002 fea2 	bl	8012ae6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b088      	sub	sp, #32
 800fdb0:	af04      	add	r7, sp, #16
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	461a      	mov	r2, r3
 800fdba:	460b      	mov	r3, r1
 800fdbc:	80fb      	strh	r3, [r7, #6]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fdd0:	7979      	ldrb	r1, [r7, #5]
 800fdd2:	7e3b      	ldrb	r3, [r7, #24]
 800fdd4:	9303      	str	r3, [sp, #12]
 800fdd6:	88fb      	ldrh	r3, [r7, #6]
 800fdd8:	9302      	str	r3, [sp, #8]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	9301      	str	r3, [sp, #4]
 800fdde:	2301      	movs	r3, #1
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	2300      	movs	r3, #0
 800fde4:	2200      	movs	r2, #0
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f002 fe7d 	bl	8012ae6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b088      	sub	sp, #32
 800fdfa:	af04      	add	r7, sp, #16
 800fdfc:	60f8      	str	r0, [r7, #12]
 800fdfe:	60b9      	str	r1, [r7, #8]
 800fe00:	4611      	mov	r1, r2
 800fe02:	461a      	mov	r2, r3
 800fe04:	460b      	mov	r3, r1
 800fe06:	80fb      	strh	r3, [r7, #6]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fe0c:	7979      	ldrb	r1, [r7, #5]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	9303      	str	r3, [sp, #12]
 800fe12:	88fb      	ldrh	r3, [r7, #6]
 800fe14:	9302      	str	r3, [sp, #8]
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	2201      	movs	r2, #1
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f002 fe5f 	bl	8012ae6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800fe28:	2300      	movs	r3, #0

}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b088      	sub	sp, #32
 800fe36:	af04      	add	r7, sp, #16
 800fe38:	60f8      	str	r0, [r7, #12]
 800fe3a:	60b9      	str	r1, [r7, #8]
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	461a      	mov	r2, r3
 800fe40:	460b      	mov	r3, r1
 800fe42:	80fb      	strh	r3, [r7, #6]
 800fe44:	4613      	mov	r3, r2
 800fe46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fe56:	7979      	ldrb	r1, [r7, #5]
 800fe58:	7e3b      	ldrb	r3, [r7, #24]
 800fe5a:	9303      	str	r3, [sp, #12]
 800fe5c:	88fb      	ldrh	r3, [r7, #6]
 800fe5e:	9302      	str	r3, [sp, #8]
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	9301      	str	r3, [sp, #4]
 800fe64:	2301      	movs	r3, #1
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	2302      	movs	r3, #2
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f002 fe3a 	bl	8012ae6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b088      	sub	sp, #32
 800fe80:	af04      	add	r7, sp, #16
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	4611      	mov	r1, r2
 800fe88:	461a      	mov	r2, r3
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	80fb      	strh	r3, [r7, #6]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fe92:	7979      	ldrb	r1, [r7, #5]
 800fe94:	2300      	movs	r3, #0
 800fe96:	9303      	str	r3, [sp, #12]
 800fe98:	88fb      	ldrh	r3, [r7, #6]
 800fe9a:	9302      	str	r3, [sp, #8]
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	2301      	movs	r3, #1
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	2302      	movs	r3, #2
 800fea6:	2201      	movs	r2, #1
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f002 fe1c 	bl	8012ae6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800feae:	2300      	movs	r3, #0
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3710      	adds	r7, #16
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af04      	add	r7, sp, #16
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	4608      	mov	r0, r1
 800fec2:	4611      	mov	r1, r2
 800fec4:	461a      	mov	r2, r3
 800fec6:	4603      	mov	r3, r0
 800fec8:	70fb      	strb	r3, [r7, #3]
 800feca:	460b      	mov	r3, r1
 800fecc:	70bb      	strb	r3, [r7, #2]
 800fece:	4613      	mov	r3, r2
 800fed0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fed2:	7878      	ldrb	r0, [r7, #1]
 800fed4:	78ba      	ldrb	r2, [r7, #2]
 800fed6:	78f9      	ldrb	r1, [r7, #3]
 800fed8:	8b3b      	ldrh	r3, [r7, #24]
 800feda:	9302      	str	r3, [sp, #8]
 800fedc:	7d3b      	ldrb	r3, [r7, #20]
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	7c3b      	ldrb	r3, [r7, #16]
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	4603      	mov	r3, r0
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f002 fdaf 	bl	8012a4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800feec:	2300      	movs	r3, #0
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b082      	sub	sp, #8
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
 800fefe:	460b      	mov	r3, r1
 800ff00:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ff02:	78fb      	ldrb	r3, [r7, #3]
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f002 fdce 	bl	8012aa8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ff0c:	2300      	movs	r3, #0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b084      	sub	sp, #16
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	460b      	mov	r3, r1
 800ff20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 f836 	bl	800ff94 <USBH_GetFreePipe>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ff2c:	89fb      	ldrh	r3, [r7, #14]
 800ff2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d00a      	beq.n	800ff4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ff36:	78fa      	ldrb	r2, [r7, #3]
 800ff38:	89fb      	ldrh	r3, [r7, #14]
 800ff3a:	f003 030f 	and.w	r3, r3, #15
 800ff3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff42:	6879      	ldr	r1, [r7, #4]
 800ff44:	33e0      	adds	r3, #224	; 0xe0
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	440b      	add	r3, r1
 800ff4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ff4c:	89fb      	ldrh	r3, [r7, #14]
 800ff4e:	b2db      	uxtb	r3, r3
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ff64:	78fb      	ldrb	r3, [r7, #3]
 800ff66:	2b0f      	cmp	r3, #15
 800ff68:	d80d      	bhi.n	800ff86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ff6a:	78fb      	ldrb	r3, [r7, #3]
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	33e0      	adds	r3, #224	; 0xe0
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4413      	add	r3, r2
 800ff74:	685a      	ldr	r2, [r3, #4]
 800ff76:	78fb      	ldrb	r3, [r7, #3]
 800ff78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ff7c:	6879      	ldr	r1, [r7, #4]
 800ff7e:	33e0      	adds	r3, #224	; 0xe0
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	440b      	add	r3, r1
 800ff84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ff86:	2300      	movs	r3, #0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	73fb      	strb	r3, [r7, #15]
 800ffa4:	e00f      	b.n	800ffc6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ffa6:	7bfb      	ldrb	r3, [r7, #15]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	33e0      	adds	r3, #224	; 0xe0
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d102      	bne.n	800ffc0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ffba:	7bfb      	ldrb	r3, [r7, #15]
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	e007      	b.n	800ffd0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ffc0:	7bfb      	ldrb	r3, [r7, #15]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	73fb      	strb	r3, [r7, #15]
 800ffc6:	7bfb      	ldrb	r3, [r7, #15]
 800ffc8:	2b0f      	cmp	r3, #15
 800ffca:	d9ec      	bls.n	800ffa6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ffcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ffea:	2301      	movs	r3, #1
 800ffec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fff2:	4b1f      	ldr	r3, [pc, #124]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 800fff4:	7a5b      	ldrb	r3, [r3, #9]
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d131      	bne.n	8010060 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fffc:	4b1c      	ldr	r3, [pc, #112]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 800fffe:	7a5b      	ldrb	r3, [r3, #9]
 8010000:	b2db      	uxtb	r3, r3
 8010002:	461a      	mov	r2, r3
 8010004:	4b1a      	ldr	r3, [pc, #104]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 8010006:	2100      	movs	r1, #0
 8010008:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801000a:	4b19      	ldr	r3, [pc, #100]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 801000c:	7a5b      	ldrb	r3, [r3, #9]
 801000e:	b2db      	uxtb	r3, r3
 8010010:	4a17      	ldr	r2, [pc, #92]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	4413      	add	r3, r2
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801001a:	4b15      	ldr	r3, [pc, #84]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 801001c:	7a5b      	ldrb	r3, [r3, #9]
 801001e:	b2db      	uxtb	r3, r3
 8010020:	461a      	mov	r2, r3
 8010022:	4b13      	ldr	r3, [pc, #76]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 8010024:	4413      	add	r3, r2
 8010026:	79fa      	ldrb	r2, [r7, #7]
 8010028:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801002a:	4b11      	ldr	r3, [pc, #68]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 801002c:	7a5b      	ldrb	r3, [r3, #9]
 801002e:	b2db      	uxtb	r3, r3
 8010030:	1c5a      	adds	r2, r3, #1
 8010032:	b2d1      	uxtb	r1, r2
 8010034:	4a0e      	ldr	r2, [pc, #56]	; (8010070 <FATFS_LinkDriverEx+0x94>)
 8010036:	7251      	strb	r1, [r2, #9]
 8010038:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801003a:	7dbb      	ldrb	r3, [r7, #22]
 801003c:	3330      	adds	r3, #48	; 0x30
 801003e:	b2da      	uxtb	r2, r3
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	3301      	adds	r3, #1
 8010048:	223a      	movs	r2, #58	; 0x3a
 801004a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	3302      	adds	r3, #2
 8010050:	222f      	movs	r2, #47	; 0x2f
 8010052:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	3303      	adds	r3, #3
 8010058:	2200      	movs	r2, #0
 801005a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801005c:	2300      	movs	r3, #0
 801005e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010060:	7dfb      	ldrb	r3, [r7, #23]
}
 8010062:	4618      	mov	r0, r3
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	20000d90 	.word	0x20000d90

08010074 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801007e:	2200      	movs	r2, #0
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff ffaa 	bl	800ffdc <FATFS_LinkDriverEx>
 8010088:	4603      	mov	r3, r0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010092:	b480      	push	{r7}
 8010094:	b085      	sub	sp, #20
 8010096:	af00      	add	r7, sp, #0
 8010098:	4603      	mov	r3, r0
 801009a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801009c:	2300      	movs	r3, #0
 801009e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80100a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80100a4:	2b84      	cmp	r3, #132	; 0x84
 80100a6:	d005      	beq.n	80100b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80100a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	4413      	add	r3, r2
 80100b0:	3303      	adds	r3, #3
 80100b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80100b4:	68fb      	ldr	r3, [r7, #12]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3714      	adds	r7, #20
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b083      	sub	sp, #12
 80100c6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100c8:	f3ef 8305 	mrs	r3, IPSR
 80100cc:	607b      	str	r3, [r7, #4]
  return(result);
 80100ce:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	bf14      	ite	ne
 80100d4:	2301      	movne	r3, #1
 80100d6:	2300      	moveq	r3, #0
 80100d8:	b2db      	uxtb	r3, r3
}
 80100da:	4618      	mov	r0, r3
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80100ea:	f001 f95b 	bl	80113a4 <vTaskStartScheduler>
  
  return osOK;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80100f8:	f001 fdae 	bl	8011c58 <xTaskGetSchedulerState>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d101      	bne.n	8010106 <osKernelRunning+0x12>
    return 0;
 8010102:	2300      	movs	r3, #0
 8010104:	e000      	b.n	8010108 <osKernelRunning+0x14>
  else
    return 1;
 8010106:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010108:	4618      	mov	r0, r3
 801010a:	bd80      	pop	{r7, pc}

0801010c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010110:	f7ff ffd7 	bl	80100c2 <inHandlerMode>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d003      	beq.n	8010122 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801011a:	f001 fa63 	bl	80115e4 <xTaskGetTickCountFromISR>
 801011e:	4603      	mov	r3, r0
 8010120:	e002      	b.n	8010128 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010122:	f001 fa4f 	bl	80115c4 <xTaskGetTickCount>
 8010126:	4603      	mov	r3, r0
  }
}
 8010128:	4618      	mov	r0, r3
 801012a:	bd80      	pop	{r7, pc}

0801012c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801012c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801012e:	b089      	sub	sp, #36	; 0x24
 8010130:	af04      	add	r7, sp, #16
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	695b      	ldr	r3, [r3, #20]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d020      	beq.n	8010180 <osThreadCreate+0x54>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	699b      	ldr	r3, [r3, #24]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d01c      	beq.n	8010180 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685c      	ldr	r4, [r3, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	691e      	ldr	r6, [r3, #16]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff ff9a 	bl	8010092 <makeFreeRtosPriority>
 801015e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010168:	9202      	str	r2, [sp, #8]
 801016a:	9301      	str	r3, [sp, #4]
 801016c:	9100      	str	r1, [sp, #0]
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	4632      	mov	r2, r6
 8010172:	4629      	mov	r1, r5
 8010174:	4620      	mov	r0, r4
 8010176:	f000 ff39 	bl	8010fec <xTaskCreateStatic>
 801017a:	4603      	mov	r3, r0
 801017c:	60fb      	str	r3, [r7, #12]
 801017e:	e01c      	b.n	80101ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685c      	ldr	r4, [r3, #4]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801018c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010194:	4618      	mov	r0, r3
 8010196:	f7ff ff7c 	bl	8010092 <makeFreeRtosPriority>
 801019a:	4602      	mov	r2, r0
 801019c:	f107 030c 	add.w	r3, r7, #12
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	9200      	str	r2, [sp, #0]
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	4632      	mov	r2, r6
 80101a8:	4629      	mov	r1, r5
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 ff81 	bl	80110b2 <xTaskCreate>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d001      	beq.n	80101ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e000      	b.n	80101bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80101ba:	68fb      	ldr	r3, [r7, #12]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d001      	beq.n	80101da <osDelay+0x16>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	e000      	b.n	80101dc <osDelay+0x18>
 80101da:	2301      	movs	r3, #1
 80101dc:	4618      	mov	r0, r3
 80101de:	f001 f8ab 	bl	8011338 <vTaskDelay>
  
  return osOK;
 80101e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80101ec:	b590      	push	{r4, r7, lr}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d011      	beq.n	8010222 <osMessageCreate+0x36>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00d      	beq.n	8010222 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6818      	ldr	r0, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6859      	ldr	r1, [r3, #4]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	689a      	ldr	r2, [r3, #8]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	2400      	movs	r4, #0
 8010218:	9400      	str	r4, [sp, #0]
 801021a:	f000 f9e1 	bl	80105e0 <xQueueGenericCreateStatic>
 801021e:	4603      	mov	r3, r0
 8010220:	e008      	b.n	8010234 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	4619      	mov	r1, r3
 801022e:	f000 fa59 	bl	80106e4 <xQueueGenericCreate>
 8010232:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010234:	4618      	mov	r0, r3
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	bd90      	pop	{r4, r7, pc}

0801023c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010248:	2300      	movs	r3, #0
 801024a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d101      	bne.n	801025a <osMessagePut+0x1e>
    ticks = 1;
 8010256:	2301      	movs	r3, #1
 8010258:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801025a:	f7ff ff32 	bl	80100c2 <inHandlerMode>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d018      	beq.n	8010296 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010264:	f107 0210 	add.w	r2, r7, #16
 8010268:	f107 0108 	add.w	r1, r7, #8
 801026c:	2300      	movs	r3, #0
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f000 fba0 	bl	80109b4 <xQueueGenericSendFromISR>
 8010274:	4603      	mov	r3, r0
 8010276:	2b01      	cmp	r3, #1
 8010278:	d001      	beq.n	801027e <osMessagePut+0x42>
      return osErrorOS;
 801027a:	23ff      	movs	r3, #255	; 0xff
 801027c:	e018      	b.n	80102b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d014      	beq.n	80102ae <osMessagePut+0x72>
 8010284:	4b0c      	ldr	r3, [pc, #48]	; (80102b8 <osMessagePut+0x7c>)
 8010286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	e00b      	b.n	80102ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010296:	f107 0108 	add.w	r1, r7, #8
 801029a:	2300      	movs	r3, #0
 801029c:	697a      	ldr	r2, [r7, #20]
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 fa82 	bl	80107a8 <xQueueGenericSend>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d001      	beq.n	80102ae <osMessagePut+0x72>
      return osErrorOS;
 80102aa:	23ff      	movs	r3, #255	; 0xff
 80102ac:	e000      	b.n	80102b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3718      	adds	r7, #24
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	e000ed04 	.word	0xe000ed04

080102bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80102bc:	b590      	push	{r4, r7, lr}
 80102be:	b08b      	sub	sp, #44	; 0x2c
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d10a      	bne.n	80102ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80102d6:	2380      	movs	r3, #128	; 0x80
 80102d8:	617b      	str	r3, [r7, #20]
    return event;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	461c      	mov	r4, r3
 80102de:	f107 0314 	add.w	r3, r7, #20
 80102e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80102ea:	e054      	b.n	8010396 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80102ec:	2300      	movs	r3, #0
 80102ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102fa:	d103      	bne.n	8010304 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80102fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010300:	627b      	str	r3, [r7, #36]	; 0x24
 8010302:	e009      	b.n	8010318 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <osMessageGet+0x5c>
      ticks = 1;
 8010314:	2301      	movs	r3, #1
 8010316:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010318:	f7ff fed3 	bl	80100c2 <inHandlerMode>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d01c      	beq.n	801035c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010322:	f107 0220 	add.w	r2, r7, #32
 8010326:	f107 0314 	add.w	r3, r7, #20
 801032a:	3304      	adds	r3, #4
 801032c:	4619      	mov	r1, r3
 801032e:	68b8      	ldr	r0, [r7, #8]
 8010330:	f000 fcc6 	bl	8010cc0 <xQueueReceiveFromISR>
 8010334:	4603      	mov	r3, r0
 8010336:	2b01      	cmp	r3, #1
 8010338:	d102      	bne.n	8010340 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801033a:	2310      	movs	r3, #16
 801033c:	617b      	str	r3, [r7, #20]
 801033e:	e001      	b.n	8010344 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010340:	2300      	movs	r3, #0
 8010342:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010344:	6a3b      	ldr	r3, [r7, #32]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d01d      	beq.n	8010386 <osMessageGet+0xca>
 801034a:	4b15      	ldr	r3, [pc, #84]	; (80103a0 <osMessageGet+0xe4>)
 801034c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	f3bf 8f4f 	dsb	sy
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	e014      	b.n	8010386 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801035c:	f107 0314 	add.w	r3, r7, #20
 8010360:	3304      	adds	r3, #4
 8010362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010364:	4619      	mov	r1, r3
 8010366:	68b8      	ldr	r0, [r7, #8]
 8010368:	f000 fbc4 	bl	8010af4 <xQueueReceive>
 801036c:	4603      	mov	r3, r0
 801036e:	2b01      	cmp	r3, #1
 8010370:	d102      	bne.n	8010378 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010372:	2310      	movs	r3, #16
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	e006      	b.n	8010386 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <osMessageGet+0xc6>
 801037e:	2300      	movs	r3, #0
 8010380:	e000      	b.n	8010384 <osMessageGet+0xc8>
 8010382:	2340      	movs	r3, #64	; 0x40
 8010384:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	461c      	mov	r4, r3
 801038a:	f107 0314 	add.w	r3, r7, #20
 801038e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	372c      	adds	r7, #44	; 0x2c
 801039a:	46bd      	mov	sp, r7
 801039c:	bd90      	pop	{r4, r7, pc}
 801039e:	bf00      	nop
 80103a0:	e000ed04 	.word	0xe000ed04

080103a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f103 0208 	add.w	r2, r3, #8
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f04f 32ff 	mov.w	r2, #4294967295
 80103bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f103 0208 	add.w	r2, r3, #8
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f103 0208 	add.w	r2, r3, #8
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80103d8:	bf00      	nop
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80103f2:	bf00      	nop
 80103f4:	370c      	adds	r7, #12
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr

080103fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103fe:	b480      	push	{r7}
 8010400:	b085      	sub	sp, #20
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	689a      	ldr	r2, [r3, #8]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	683a      	ldr	r2, [r7, #0]
 8010422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	1c5a      	adds	r2, r3, #1
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
}
 801043a:	bf00      	nop
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr

08010446 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010446:	b480      	push	{r7}
 8010448:	b085      	sub	sp, #20
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045c:	d103      	bne.n	8010466 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	60fb      	str	r3, [r7, #12]
 8010464:	e00c      	b.n	8010480 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	3308      	adds	r3, #8
 801046a:	60fb      	str	r3, [r7, #12]
 801046c:	e002      	b.n	8010474 <vListInsert+0x2e>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	60fb      	str	r3, [r7, #12]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	429a      	cmp	r2, r3
 801047e:	d2f6      	bcs.n	801046e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	685a      	ldr	r2, [r3, #4]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	683a      	ldr	r2, [r7, #0]
 801049a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	1c5a      	adds	r2, r3, #1
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	601a      	str	r2, [r3, #0]
}
 80104ac:	bf00      	nop
 80104ae:	3714      	adds	r7, #20
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	6892      	ldr	r2, [r2, #8]
 80104ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	689b      	ldr	r3, [r3, #8]
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	6852      	ldr	r2, [r2, #4]
 80104d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d103      	bne.n	80104ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689a      	ldr	r2, [r3, #8]
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2200      	movs	r2, #0
 80104f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	1e5a      	subs	r2, r3, #1
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3714      	adds	r7, #20
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10c      	bne.n	801053a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	b672      	cpsid	i
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	b662      	cpsie	i
 8010534:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010536:	bf00      	nop
 8010538:	e7fe      	b.n	8010538 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801053a:	f001 fda7 	bl	801208c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010546:	68f9      	ldr	r1, [r7, #12]
 8010548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801054a:	fb01 f303 	mul.w	r3, r1, r3
 801054e:	441a      	add	r2, r3
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2200      	movs	r2, #0
 8010558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801056a:	3b01      	subs	r3, #1
 801056c:	68f9      	ldr	r1, [r7, #12]
 801056e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010570:	fb01 f303 	mul.w	r3, r1, r3
 8010574:	441a      	add	r2, r3
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	22ff      	movs	r2, #255	; 0xff
 801057e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	22ff      	movs	r2, #255	; 0xff
 8010586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d114      	bne.n	80105ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	691b      	ldr	r3, [r3, #16]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d01a      	beq.n	80105ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	3310      	adds	r3, #16
 801059c:	4618      	mov	r0, r3
 801059e:	f001 f995 	bl	80118cc <xTaskRemoveFromEventList>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d012      	beq.n	80105ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80105a8:	4b0c      	ldr	r3, [pc, #48]	; (80105dc <xQueueGenericReset+0xd0>)
 80105aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ae:	601a      	str	r2, [r3, #0]
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	e009      	b.n	80105ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	3310      	adds	r3, #16
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff fef0 	bl	80103a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	3324      	adds	r3, #36	; 0x24
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff feeb 	bl	80103a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80105ce:	f001 fd91 	bl	80120f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80105d2:	2301      	movs	r3, #1
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	e000ed04 	.word	0xe000ed04

080105e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b08e      	sub	sp, #56	; 0x38
 80105e4:	af02      	add	r7, sp, #8
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
 80105ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d10c      	bne.n	801060e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80105f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f8:	b672      	cpsid	i
 80105fa:	f383 8811 	msr	BASEPRI, r3
 80105fe:	f3bf 8f6f 	isb	sy
 8010602:	f3bf 8f4f 	dsb	sy
 8010606:	b662      	cpsie	i
 8010608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801060a:	bf00      	nop
 801060c:	e7fe      	b.n	801060c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10c      	bne.n	801062e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010618:	b672      	cpsid	i
 801061a:	f383 8811 	msr	BASEPRI, r3
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f3bf 8f4f 	dsb	sy
 8010626:	b662      	cpsie	i
 8010628:	627b      	str	r3, [r7, #36]	; 0x24
}
 801062a:	bf00      	nop
 801062c:	e7fe      	b.n	801062c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <xQueueGenericCreateStatic+0x5a>
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d001      	beq.n	801063e <xQueueGenericCreateStatic+0x5e>
 801063a:	2301      	movs	r3, #1
 801063c:	e000      	b.n	8010640 <xQueueGenericCreateStatic+0x60>
 801063e:	2300      	movs	r3, #0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10c      	bne.n	801065e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	b672      	cpsid	i
 801064a:	f383 8811 	msr	BASEPRI, r3
 801064e:	f3bf 8f6f 	isb	sy
 8010652:	f3bf 8f4f 	dsb	sy
 8010656:	b662      	cpsie	i
 8010658:	623b      	str	r3, [r7, #32]
}
 801065a:	bf00      	nop
 801065c:	e7fe      	b.n	801065c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d102      	bne.n	801066a <xQueueGenericCreateStatic+0x8a>
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d101      	bne.n	801066e <xQueueGenericCreateStatic+0x8e>
 801066a:	2301      	movs	r3, #1
 801066c:	e000      	b.n	8010670 <xQueueGenericCreateStatic+0x90>
 801066e:	2300      	movs	r3, #0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d10c      	bne.n	801068e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8010674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010678:	b672      	cpsid	i
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	b662      	cpsie	i
 8010688:	61fb      	str	r3, [r7, #28]
}
 801068a:	bf00      	nop
 801068c:	e7fe      	b.n	801068c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801068e:	2348      	movs	r3, #72	; 0x48
 8010690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2b48      	cmp	r3, #72	; 0x48
 8010696:	d00c      	beq.n	80106b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8010698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069c:	b672      	cpsid	i
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	b662      	cpsie	i
 80106ac:	61bb      	str	r3, [r7, #24]
}
 80106ae:	bf00      	nop
 80106b0:	e7fe      	b.n	80106b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80106b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00d      	beq.n	80106da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	2201      	movs	r2, #1
 80106c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80106c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80106ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	4613      	mov	r3, r2
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	68b9      	ldr	r1, [r7, #8]
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 f847 	bl	8010768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80106dc:	4618      	mov	r0, r3
 80106de:	3730      	adds	r7, #48	; 0x30
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08a      	sub	sp, #40	; 0x28
 80106e8:	af02      	add	r7, sp, #8
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	4613      	mov	r3, r2
 80106f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d10c      	bne.n	8010712 <xQueueGenericCreate+0x2e>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	b672      	cpsid	i
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	b662      	cpsie	i
 801070c:	613b      	str	r3, [r7, #16]
}
 801070e:	bf00      	nop
 8010710:	e7fe      	b.n	8010710 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010718:	2300      	movs	r3, #0
 801071a:	61fb      	str	r3, [r7, #28]
 801071c:	e004      	b.n	8010728 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	fb02 f303 	mul.w	r3, r2, r3
 8010726:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	3348      	adds	r3, #72	; 0x48
 801072c:	4618      	mov	r0, r3
 801072e:	f001 fdd9 	bl	80122e4 <pvPortMalloc>
 8010732:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d011      	beq.n	801075e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	3348      	adds	r3, #72	; 0x48
 8010742:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801074c:	79fa      	ldrb	r2, [r7, #7]
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	4613      	mov	r3, r2
 8010754:	697a      	ldr	r2, [r7, #20]
 8010756:	68b9      	ldr	r1, [r7, #8]
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f000 f805 	bl	8010768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801075e:	69bb      	ldr	r3, [r7, #24]
	}
 8010760:	4618      	mov	r0, r3
 8010762:	3720      	adds	r7, #32
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
 8010774:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d103      	bne.n	8010784 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	69ba      	ldr	r2, [r7, #24]
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	e002      	b.n	801078a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010790:	69bb      	ldr	r3, [r7, #24]
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010796:	2101      	movs	r1, #1
 8010798:	69b8      	ldr	r0, [r7, #24]
 801079a:	f7ff feb7 	bl	801050c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801079e:	bf00      	nop
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
	...

080107a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b08e      	sub	sp, #56	; 0x38
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80107b6:	2300      	movs	r3, #0
 80107b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10c      	bne.n	80107de <xQueueGenericSend+0x36>
	__asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c8:	b672      	cpsid	i
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	b662      	cpsie	i
 80107d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80107da:	bf00      	nop
 80107dc:	e7fe      	b.n	80107dc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d103      	bne.n	80107ec <xQueueGenericSend+0x44>
 80107e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d101      	bne.n	80107f0 <xQueueGenericSend+0x48>
 80107ec:	2301      	movs	r3, #1
 80107ee:	e000      	b.n	80107f2 <xQueueGenericSend+0x4a>
 80107f0:	2300      	movs	r3, #0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10c      	bne.n	8010810 <xQueueGenericSend+0x68>
	__asm volatile
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	b672      	cpsid	i
 80107fc:	f383 8811 	msr	BASEPRI, r3
 8010800:	f3bf 8f6f 	isb	sy
 8010804:	f3bf 8f4f 	dsb	sy
 8010808:	b662      	cpsie	i
 801080a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801080c:	bf00      	nop
 801080e:	e7fe      	b.n	801080e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	2b02      	cmp	r3, #2
 8010814:	d103      	bne.n	801081e <xQueueGenericSend+0x76>
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801081a:	2b01      	cmp	r3, #1
 801081c:	d101      	bne.n	8010822 <xQueueGenericSend+0x7a>
 801081e:	2301      	movs	r3, #1
 8010820:	e000      	b.n	8010824 <xQueueGenericSend+0x7c>
 8010822:	2300      	movs	r3, #0
 8010824:	2b00      	cmp	r3, #0
 8010826:	d10c      	bne.n	8010842 <xQueueGenericSend+0x9a>
	__asm volatile
 8010828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082c:	b672      	cpsid	i
 801082e:	f383 8811 	msr	BASEPRI, r3
 8010832:	f3bf 8f6f 	isb	sy
 8010836:	f3bf 8f4f 	dsb	sy
 801083a:	b662      	cpsie	i
 801083c:	623b      	str	r3, [r7, #32]
}
 801083e:	bf00      	nop
 8010840:	e7fe      	b.n	8010840 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010842:	f001 fa09 	bl	8011c58 <xTaskGetSchedulerState>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d102      	bne.n	8010852 <xQueueGenericSend+0xaa>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d101      	bne.n	8010856 <xQueueGenericSend+0xae>
 8010852:	2301      	movs	r3, #1
 8010854:	e000      	b.n	8010858 <xQueueGenericSend+0xb0>
 8010856:	2300      	movs	r3, #0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10c      	bne.n	8010876 <xQueueGenericSend+0xce>
	__asm volatile
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	b672      	cpsid	i
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	b662      	cpsie	i
 8010870:	61fb      	str	r3, [r7, #28]
}
 8010872:	bf00      	nop
 8010874:	e7fe      	b.n	8010874 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010876:	f001 fc09 	bl	801208c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801087e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010882:	429a      	cmp	r2, r3
 8010884:	d302      	bcc.n	801088c <xQueueGenericSend+0xe4>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2b02      	cmp	r3, #2
 801088a:	d129      	bne.n	80108e0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	68b9      	ldr	r1, [r7, #8]
 8010890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010892:	f000 fa9b 	bl	8010dcc <prvCopyDataToQueue>
 8010896:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801089c:	2b00      	cmp	r3, #0
 801089e:	d010      	beq.n	80108c2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a2:	3324      	adds	r3, #36	; 0x24
 80108a4:	4618      	mov	r0, r3
 80108a6:	f001 f811 	bl	80118cc <xTaskRemoveFromEventList>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d013      	beq.n	80108d8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80108b0:	4b3f      	ldr	r3, [pc, #252]	; (80109b0 <xQueueGenericSend+0x208>)
 80108b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108b6:	601a      	str	r2, [r3, #0]
 80108b8:	f3bf 8f4f 	dsb	sy
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	e00a      	b.n	80108d8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d007      	beq.n	80108d8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80108c8:	4b39      	ldr	r3, [pc, #228]	; (80109b0 <xQueueGenericSend+0x208>)
 80108ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ce:	601a      	str	r2, [r3, #0]
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80108d8:	f001 fc0c 	bl	80120f4 <vPortExitCritical>
				return pdPASS;
 80108dc:	2301      	movs	r3, #1
 80108de:	e063      	b.n	80109a8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d103      	bne.n	80108ee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108e6:	f001 fc05 	bl	80120f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80108ea:	2300      	movs	r3, #0
 80108ec:	e05c      	b.n	80109a8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d106      	bne.n	8010902 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108f4:	f107 0314 	add.w	r3, r7, #20
 80108f8:	4618      	mov	r0, r3
 80108fa:	f001 f84b 	bl	8011994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108fe:	2301      	movs	r3, #1
 8010900:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010902:	f001 fbf7 	bl	80120f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010906:	f000 fdb1 	bl	801146c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801090a:	f001 fbbf 	bl	801208c <vPortEnterCritical>
 801090e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010914:	b25b      	sxtb	r3, r3
 8010916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801091a:	d103      	bne.n	8010924 <xQueueGenericSend+0x17c>
 801091c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801092a:	b25b      	sxtb	r3, r3
 801092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010930:	d103      	bne.n	801093a <xQueueGenericSend+0x192>
 8010932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010934:	2200      	movs	r2, #0
 8010936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801093a:	f001 fbdb 	bl	80120f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801093e:	1d3a      	adds	r2, r7, #4
 8010940:	f107 0314 	add.w	r3, r7, #20
 8010944:	4611      	mov	r1, r2
 8010946:	4618      	mov	r0, r3
 8010948:	f001 f83a 	bl	80119c0 <xTaskCheckForTimeOut>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d124      	bne.n	801099c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010954:	f000 fb32 	bl	8010fbc <prvIsQueueFull>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d018      	beq.n	8010990 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	3310      	adds	r3, #16
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	4611      	mov	r1, r2
 8010966:	4618      	mov	r0, r3
 8010968:	f000 ff8a 	bl	8011880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801096c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801096e:	f000 fabd 	bl	8010eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010972:	f000 fd89 	bl	8011488 <xTaskResumeAll>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	f47f af7c 	bne.w	8010876 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801097e:	4b0c      	ldr	r3, [pc, #48]	; (80109b0 <xQueueGenericSend+0x208>)
 8010980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	f3bf 8f6f 	isb	sy
 801098e:	e772      	b.n	8010876 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010992:	f000 faab 	bl	8010eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010996:	f000 fd77 	bl	8011488 <xTaskResumeAll>
 801099a:	e76c      	b.n	8010876 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801099c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801099e:	f000 faa5 	bl	8010eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109a2:	f000 fd71 	bl	8011488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80109a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3738      	adds	r7, #56	; 0x38
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	e000ed04 	.word	0xe000ed04

080109b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08e      	sub	sp, #56	; 0x38
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
 80109c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10c      	bne.n	80109e6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	b672      	cpsid	i
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	b662      	cpsie	i
 80109e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d103      	bne.n	80109f4 <xQueueGenericSendFromISR+0x40>
 80109ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <xQueueGenericSendFromISR+0x44>
 80109f4:	2301      	movs	r3, #1
 80109f6:	e000      	b.n	80109fa <xQueueGenericSendFromISR+0x46>
 80109f8:	2300      	movs	r3, #0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10c      	bne.n	8010a18 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	b672      	cpsid	i
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	b662      	cpsie	i
 8010a12:	623b      	str	r3, [r7, #32]
}
 8010a14:	bf00      	nop
 8010a16:	e7fe      	b.n	8010a16 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d103      	bne.n	8010a26 <xQueueGenericSendFromISR+0x72>
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a22:	2b01      	cmp	r3, #1
 8010a24:	d101      	bne.n	8010a2a <xQueueGenericSendFromISR+0x76>
 8010a26:	2301      	movs	r3, #1
 8010a28:	e000      	b.n	8010a2c <xQueueGenericSendFromISR+0x78>
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10c      	bne.n	8010a4a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a34:	b672      	cpsid	i
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	b662      	cpsie	i
 8010a44:	61fb      	str	r3, [r7, #28]
}
 8010a46:	bf00      	nop
 8010a48:	e7fe      	b.n	8010a48 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a4a:	f001 fc07 	bl	801225c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8010a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a56:	b672      	cpsid	i
 8010a58:	f383 8811 	msr	BASEPRI, r3
 8010a5c:	f3bf 8f6f 	isb	sy
 8010a60:	f3bf 8f4f 	dsb	sy
 8010a64:	b662      	cpsie	i
 8010a66:	61ba      	str	r2, [r7, #24]
 8010a68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010a6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d302      	bcc.n	8010a80 <xQueueGenericSendFromISR+0xcc>
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b02      	cmp	r3, #2
 8010a7e:	d12c      	bne.n	8010ada <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	68b9      	ldr	r1, [r7, #8]
 8010a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a90:	f000 f99c 	bl	8010dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a9c:	d112      	bne.n	8010ac4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d016      	beq.n	8010ad4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa8:	3324      	adds	r3, #36	; 0x24
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 ff0e 	bl	80118cc <xTaskRemoveFromEventList>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00e      	beq.n	8010ad4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	601a      	str	r2, [r3, #0]
 8010ac2:	e007      	b.n	8010ad4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010ac8:	3301      	adds	r3, #1
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	b25a      	sxtb	r2, r3
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010ad8:	e001      	b.n	8010ade <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	637b      	str	r3, [r7, #52]	; 0x34
 8010ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010ae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3738      	adds	r7, #56	; 0x38
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08c      	sub	sp, #48	; 0x30
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b00:	2300      	movs	r3, #0
 8010b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10c      	bne.n	8010b28 <xQueueReceive+0x34>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	b672      	cpsid	i
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	b662      	cpsie	i
 8010b22:	623b      	str	r3, [r7, #32]
}
 8010b24:	bf00      	nop
 8010b26:	e7fe      	b.n	8010b26 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d103      	bne.n	8010b36 <xQueueReceive+0x42>
 8010b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d101      	bne.n	8010b3a <xQueueReceive+0x46>
 8010b36:	2301      	movs	r3, #1
 8010b38:	e000      	b.n	8010b3c <xQueueReceive+0x48>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10c      	bne.n	8010b5a <xQueueReceive+0x66>
	__asm volatile
 8010b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b44:	b672      	cpsid	i
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	b662      	cpsie	i
 8010b54:	61fb      	str	r3, [r7, #28]
}
 8010b56:	bf00      	nop
 8010b58:	e7fe      	b.n	8010b58 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b5a:	f001 f87d 	bl	8011c58 <xTaskGetSchedulerState>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d102      	bne.n	8010b6a <xQueueReceive+0x76>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d101      	bne.n	8010b6e <xQueueReceive+0x7a>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e000      	b.n	8010b70 <xQueueReceive+0x7c>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d10c      	bne.n	8010b8e <xQueueReceive+0x9a>
	__asm volatile
 8010b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b78:	b672      	cpsid	i
 8010b7a:	f383 8811 	msr	BASEPRI, r3
 8010b7e:	f3bf 8f6f 	isb	sy
 8010b82:	f3bf 8f4f 	dsb	sy
 8010b86:	b662      	cpsie	i
 8010b88:	61bb      	str	r3, [r7, #24]
}
 8010b8a:	bf00      	nop
 8010b8c:	e7fe      	b.n	8010b8c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b8e:	f001 fa7d 	bl	801208c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d01f      	beq.n	8010bde <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b9e:	68b9      	ldr	r1, [r7, #8]
 8010ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ba2:	f000 f97d 	bl	8010ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	1e5a      	subs	r2, r3, #1
 8010baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb0:	691b      	ldr	r3, [r3, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00f      	beq.n	8010bd6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb8:	3310      	adds	r3, #16
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 fe86 	bl	80118cc <xTaskRemoveFromEventList>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d007      	beq.n	8010bd6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bc6:	4b3d      	ldr	r3, [pc, #244]	; (8010cbc <xQueueReceive+0x1c8>)
 8010bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bcc:	601a      	str	r2, [r3, #0]
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010bd6:	f001 fa8d 	bl	80120f4 <vPortExitCritical>
				return pdPASS;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e069      	b.n	8010cb2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d103      	bne.n	8010bec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010be4:	f001 fa86 	bl	80120f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010be8:	2300      	movs	r3, #0
 8010bea:	e062      	b.n	8010cb2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d106      	bne.n	8010c00 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bf2:	f107 0310 	add.w	r3, r7, #16
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 fecc 	bl	8011994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c00:	f001 fa78 	bl	80120f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c04:	f000 fc32 	bl	801146c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c08:	f001 fa40 	bl	801208c <vPortEnterCritical>
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c12:	b25b      	sxtb	r3, r3
 8010c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c18:	d103      	bne.n	8010c22 <xQueueReceive+0x12e>
 8010c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c28:	b25b      	sxtb	r3, r3
 8010c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2e:	d103      	bne.n	8010c38 <xQueueReceive+0x144>
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c38:	f001 fa5c 	bl	80120f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c3c:	1d3a      	adds	r2, r7, #4
 8010c3e:	f107 0310 	add.w	r3, r7, #16
 8010c42:	4611      	mov	r1, r2
 8010c44:	4618      	mov	r0, r3
 8010c46:	f000 febb 	bl	80119c0 <xTaskCheckForTimeOut>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d123      	bne.n	8010c98 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c52:	f000 f99d 	bl	8010f90 <prvIsQueueEmpty>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d017      	beq.n	8010c8c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5e:	3324      	adds	r3, #36	; 0x24
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 fe0b 	bl	8011880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c6c:	f000 f93e 	bl	8010eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c70:	f000 fc0a 	bl	8011488 <xTaskResumeAll>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d189      	bne.n	8010b8e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010c7a:	4b10      	ldr	r3, [pc, #64]	; (8010cbc <xQueueReceive+0x1c8>)
 8010c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	e780      	b.n	8010b8e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c8e:	f000 f92d 	bl	8010eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c92:	f000 fbf9 	bl	8011488 <xTaskResumeAll>
 8010c96:	e77a      	b.n	8010b8e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c9a:	f000 f927 	bl	8010eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c9e:	f000 fbf3 	bl	8011488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ca4:	f000 f974 	bl	8010f90 <prvIsQueueEmpty>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f43f af6f 	beq.w	8010b8e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010cb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3730      	adds	r7, #48	; 0x30
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	e000ed04 	.word	0xe000ed04

08010cc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08e      	sub	sp, #56	; 0x38
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10c      	bne.n	8010cf0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8010cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cda:	b672      	cpsid	i
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	b662      	cpsie	i
 8010cea:	623b      	str	r3, [r7, #32]
}
 8010cec:	bf00      	nop
 8010cee:	e7fe      	b.n	8010cee <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <xQueueReceiveFromISR+0x3e>
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d101      	bne.n	8010d02 <xQueueReceiveFromISR+0x42>
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e000      	b.n	8010d04 <xQueueReceiveFromISR+0x44>
 8010d02:	2300      	movs	r3, #0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10c      	bne.n	8010d22 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	b672      	cpsid	i
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	b662      	cpsie	i
 8010d1c:	61fb      	str	r3, [r7, #28]
}
 8010d1e:	bf00      	nop
 8010d20:	e7fe      	b.n	8010d20 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d22:	f001 fa9b 	bl	801225c <vPortValidateInterruptPriority>
	__asm volatile
 8010d26:	f3ef 8211 	mrs	r2, BASEPRI
 8010d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2e:	b672      	cpsid	i
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	b662      	cpsie	i
 8010d3e:	61ba      	str	r2, [r7, #24]
 8010d40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d02f      	beq.n	8010db2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d60:	f000 f89e 	bl	8010ea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	1e5a      	subs	r2, r3, #1
 8010d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d74:	d112      	bne.n	8010d9c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d78:	691b      	ldr	r3, [r3, #16]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d016      	beq.n	8010dac <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d80:	3310      	adds	r3, #16
 8010d82:	4618      	mov	r0, r3
 8010d84:	f000 fda2 	bl	80118cc <xTaskRemoveFromEventList>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00e      	beq.n	8010dac <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d00b      	beq.n	8010dac <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2201      	movs	r2, #1
 8010d98:	601a      	str	r2, [r3, #0]
 8010d9a:	e007      	b.n	8010dac <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010da0:	3301      	adds	r3, #1
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	b25a      	sxtb	r2, r3
 8010da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010dac:	2301      	movs	r3, #1
 8010dae:	637b      	str	r3, [r7, #52]	; 0x34
 8010db0:	e001      	b.n	8010db6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8010db2:	2300      	movs	r3, #0
 8010db4:	637b      	str	r3, [r7, #52]	; 0x34
 8010db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	f383 8811 	msr	BASEPRI, r3
}
 8010dc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3738      	adds	r7, #56	; 0x38
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10d      	bne.n	8010e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d14d      	bne.n	8010e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 ff4c 	bl	8011c94 <xTaskPriorityDisinherit>
 8010dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2200      	movs	r2, #0
 8010e02:	609a      	str	r2, [r3, #8]
 8010e04:	e043      	b.n	8010e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d119      	bne.n	8010e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	6858      	ldr	r0, [r3, #4]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e14:	461a      	mov	r2, r3
 8010e16:	68b9      	ldr	r1, [r7, #8]
 8010e18:	f002 f844 	bl	8012ea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	685a      	ldr	r2, [r3, #4]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e24:	441a      	add	r2, r3
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	685a      	ldr	r2, [r3, #4]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d32b      	bcc.n	8010e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	605a      	str	r2, [r3, #4]
 8010e3e:	e026      	b.n	8010e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	68d8      	ldr	r0, [r3, #12]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e48:	461a      	mov	r2, r3
 8010e4a:	68b9      	ldr	r1, [r7, #8]
 8010e4c:	f002 f82a 	bl	8012ea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	68da      	ldr	r2, [r3, #12]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e58:	425b      	negs	r3, r3
 8010e5a:	441a      	add	r2, r3
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	68da      	ldr	r2, [r3, #12]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d207      	bcs.n	8010e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e74:	425b      	negs	r3, r3
 8010e76:	441a      	add	r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d105      	bne.n	8010e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010e96:	697b      	ldr	r3, [r7, #20]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3718      	adds	r7, #24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d018      	beq.n	8010ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	68da      	ldr	r2, [r3, #12]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eba:	441a      	add	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	68da      	ldr	r2, [r3, #12]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	689b      	ldr	r3, [r3, #8]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d303      	bcc.n	8010ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	68d9      	ldr	r1, [r3, #12]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010edc:	461a      	mov	r2, r3
 8010ede:	6838      	ldr	r0, [r7, #0]
 8010ee0:	f001 ffe0 	bl	8012ea4 <memcpy>
	}
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010ef4:	f001 f8ca 	bl	801208c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f00:	e011      	b.n	8010f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d012      	beq.n	8010f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	3324      	adds	r3, #36	; 0x24
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f000 fcdc 	bl	80118cc <xTaskRemoveFromEventList>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f1a:	f000 fdb7 	bl	8011a8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	dce9      	bgt.n	8010f02 <prvUnlockQueue+0x16>
 8010f2e:	e000      	b.n	8010f32 <prvUnlockQueue+0x46>
					break;
 8010f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	22ff      	movs	r2, #255	; 0xff
 8010f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010f3a:	f001 f8db 	bl	80120f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f3e:	f001 f8a5 	bl	801208c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f4a:	e011      	b.n	8010f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d012      	beq.n	8010f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3310      	adds	r3, #16
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f000 fcb7 	bl	80118cc <xTaskRemoveFromEventList>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d001      	beq.n	8010f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f64:	f000 fd92 	bl	8011a8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f68:	7bbb      	ldrb	r3, [r7, #14]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dce9      	bgt.n	8010f4c <prvUnlockQueue+0x60>
 8010f78:	e000      	b.n	8010f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	22ff      	movs	r2, #255	; 0xff
 8010f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010f84:	f001 f8b6 	bl	80120f4 <vPortExitCritical>
}
 8010f88:	bf00      	nop
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f98:	f001 f878 	bl	801208c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	60fb      	str	r3, [r7, #12]
 8010fa8:	e001      	b.n	8010fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010faa:	2300      	movs	r3, #0
 8010fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fae:	f001 f8a1 	bl	80120f4 <vPortExitCritical>

	return xReturn;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fc4:	f001 f862 	bl	801208c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d102      	bne.n	8010fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	60fb      	str	r3, [r7, #12]
 8010fd8:	e001      	b.n	8010fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fde:	f001 f889 	bl	80120f4 <vPortExitCritical>

	return xReturn;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b08e      	sub	sp, #56	; 0x38
 8010ff0:	af04      	add	r7, sp, #16
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d10c      	bne.n	801101a <xTaskCreateStatic+0x2e>
	__asm volatile
 8011000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011004:	b672      	cpsid	i
 8011006:	f383 8811 	msr	BASEPRI, r3
 801100a:	f3bf 8f6f 	isb	sy
 801100e:	f3bf 8f4f 	dsb	sy
 8011012:	b662      	cpsie	i
 8011014:	623b      	str	r3, [r7, #32]
}
 8011016:	bf00      	nop
 8011018:	e7fe      	b.n	8011018 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10c      	bne.n	801103a <xTaskCreateStatic+0x4e>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	b672      	cpsid	i
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	b662      	cpsie	i
 8011034:	61fb      	str	r3, [r7, #28]
}
 8011036:	bf00      	nop
 8011038:	e7fe      	b.n	8011038 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801103a:	2358      	movs	r3, #88	; 0x58
 801103c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	2b58      	cmp	r3, #88	; 0x58
 8011042:	d00c      	beq.n	801105e <xTaskCreateStatic+0x72>
	__asm volatile
 8011044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011048:	b672      	cpsid	i
 801104a:	f383 8811 	msr	BASEPRI, r3
 801104e:	f3bf 8f6f 	isb	sy
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	b662      	cpsie	i
 8011058:	61bb      	str	r3, [r7, #24]
}
 801105a:	bf00      	nop
 801105c:	e7fe      	b.n	801105c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801105e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011062:	2b00      	cmp	r3, #0
 8011064:	d01e      	beq.n	80110a4 <xTaskCreateStatic+0xb8>
 8011066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011068:	2b00      	cmp	r3, #0
 801106a:	d01b      	beq.n	80110a4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011078:	2202      	movs	r2, #2
 801107a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801107e:	2300      	movs	r3, #0
 8011080:	9303      	str	r3, [sp, #12]
 8011082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011084:	9302      	str	r3, [sp, #8]
 8011086:	f107 0314 	add.w	r3, r7, #20
 801108a:	9301      	str	r3, [sp, #4]
 801108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	68b9      	ldr	r1, [r7, #8]
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	f000 f850 	bl	801113c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801109c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801109e:	f000 f8e1 	bl	8011264 <prvAddNewTaskToReadyList>
 80110a2:	e001      	b.n	80110a8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80110a4:	2300      	movs	r3, #0
 80110a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80110a8:	697b      	ldr	r3, [r7, #20]
	}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3728      	adds	r7, #40	; 0x28
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b08c      	sub	sp, #48	; 0x30
 80110b6:	af04      	add	r7, sp, #16
 80110b8:	60f8      	str	r0, [r7, #12]
 80110ba:	60b9      	str	r1, [r7, #8]
 80110bc:	603b      	str	r3, [r7, #0]
 80110be:	4613      	mov	r3, r2
 80110c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80110c2:	88fb      	ldrh	r3, [r7, #6]
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	4618      	mov	r0, r3
 80110c8:	f001 f90c 	bl	80122e4 <pvPortMalloc>
 80110cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00e      	beq.n	80110f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80110d4:	2058      	movs	r0, #88	; 0x58
 80110d6:	f001 f905 	bl	80122e4 <pvPortMalloc>
 80110da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d003      	beq.n	80110ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	697a      	ldr	r2, [r7, #20]
 80110e6:	631a      	str	r2, [r3, #48]	; 0x30
 80110e8:	e005      	b.n	80110f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80110ea:	6978      	ldr	r0, [r7, #20]
 80110ec:	f001 f9ca 	bl	8012484 <vPortFree>
 80110f0:	e001      	b.n	80110f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80110f2:	2300      	movs	r3, #0
 80110f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d017      	beq.n	801112c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011104:	88fa      	ldrh	r2, [r7, #6]
 8011106:	2300      	movs	r3, #0
 8011108:	9303      	str	r3, [sp, #12]
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	9302      	str	r3, [sp, #8]
 801110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	68b9      	ldr	r1, [r7, #8]
 801111a:	68f8      	ldr	r0, [r7, #12]
 801111c:	f000 f80e 	bl	801113c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011120:	69f8      	ldr	r0, [r7, #28]
 8011122:	f000 f89f 	bl	8011264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011126:	2301      	movs	r3, #1
 8011128:	61bb      	str	r3, [r7, #24]
 801112a:	e002      	b.n	8011132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801112c:	f04f 33ff 	mov.w	r3, #4294967295
 8011130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011132:	69bb      	ldr	r3, [r7, #24]
	}
 8011134:	4618      	mov	r0, r3
 8011136:	3720      	adds	r7, #32
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b088      	sub	sp, #32
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
 8011148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	461a      	mov	r2, r3
 8011154:	21a5      	movs	r1, #165	; 0xa5
 8011156:	f001 fe61 	bl	8012e1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801115e:	6879      	ldr	r1, [r7, #4]
 8011160:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011164:	440b      	add	r3, r1
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4413      	add	r3, r2
 801116a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	f023 0307 	bic.w	r3, r3, #7
 8011172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	f003 0307 	and.w	r3, r3, #7
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00c      	beq.n	8011198 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801117e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011182:	b672      	cpsid	i
 8011184:	f383 8811 	msr	BASEPRI, r3
 8011188:	f3bf 8f6f 	isb	sy
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	b662      	cpsie	i
 8011192:	617b      	str	r3, [r7, #20]
}
 8011194:	bf00      	nop
 8011196:	e7fe      	b.n	8011196 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d01f      	beq.n	80111de <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801119e:	2300      	movs	r3, #0
 80111a0:	61fb      	str	r3, [r7, #28]
 80111a2:	e012      	b.n	80111ca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	4413      	add	r3, r2
 80111aa:	7819      	ldrb	r1, [r3, #0]
 80111ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	4413      	add	r3, r2
 80111b2:	3334      	adds	r3, #52	; 0x34
 80111b4:	460a      	mov	r2, r1
 80111b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80111b8:	68ba      	ldr	r2, [r7, #8]
 80111ba:	69fb      	ldr	r3, [r7, #28]
 80111bc:	4413      	add	r3, r2
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d006      	beq.n	80111d2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	3301      	adds	r3, #1
 80111c8:	61fb      	str	r3, [r7, #28]
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	2b0f      	cmp	r3, #15
 80111ce:	d9e9      	bls.n	80111a4 <prvInitialiseNewTask+0x68>
 80111d0:	e000      	b.n	80111d4 <prvInitialiseNewTask+0x98>
			{
				break;
 80111d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80111d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d6:	2200      	movs	r2, #0
 80111d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80111dc:	e003      	b.n	80111e6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80111e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e8:	2b06      	cmp	r3, #6
 80111ea:	d901      	bls.n	80111f0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80111ec:	2306      	movs	r3, #6
 80111ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80111fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fe:	2200      	movs	r2, #0
 8011200:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	3304      	adds	r3, #4
 8011206:	4618      	mov	r0, r3
 8011208:	f7ff f8ec 	bl	80103e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120e:	3318      	adds	r3, #24
 8011210:	4618      	mov	r0, r3
 8011212:	f7ff f8e7 	bl	80103e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801121a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121e:	f1c3 0207 	rsb	r2, r3, #7
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801122a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122e:	2200      	movs	r2, #0
 8011230:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011234:	2200      	movs	r2, #0
 8011236:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123a:	2200      	movs	r2, #0
 801123c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	68f9      	ldr	r1, [r7, #12]
 8011244:	69b8      	ldr	r0, [r7, #24]
 8011246:	f000 fe15 	bl	8011e74 <pxPortInitialiseStack>
 801124a:	4602      	mov	r2, r0
 801124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011252:	2b00      	cmp	r3, #0
 8011254:	d002      	beq.n	801125c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801125a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801125c:	bf00      	nop
 801125e:	3720      	adds	r7, #32
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801126c:	f000 ff0e 	bl	801208c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011270:	4b2a      	ldr	r3, [pc, #168]	; (801131c <prvAddNewTaskToReadyList+0xb8>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3301      	adds	r3, #1
 8011276:	4a29      	ldr	r2, [pc, #164]	; (801131c <prvAddNewTaskToReadyList+0xb8>)
 8011278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801127a:	4b29      	ldr	r3, [pc, #164]	; (8011320 <prvAddNewTaskToReadyList+0xbc>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d109      	bne.n	8011296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011282:	4a27      	ldr	r2, [pc, #156]	; (8011320 <prvAddNewTaskToReadyList+0xbc>)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011288:	4b24      	ldr	r3, [pc, #144]	; (801131c <prvAddNewTaskToReadyList+0xb8>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d110      	bne.n	80112b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011290:	f000 fc22 	bl	8011ad8 <prvInitialiseTaskLists>
 8011294:	e00d      	b.n	80112b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011296:	4b23      	ldr	r3, [pc, #140]	; (8011324 <prvAddNewTaskToReadyList+0xc0>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d109      	bne.n	80112b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801129e:	4b20      	ldr	r3, [pc, #128]	; (8011320 <prvAddNewTaskToReadyList+0xbc>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d802      	bhi.n	80112b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80112ac:	4a1c      	ldr	r2, [pc, #112]	; (8011320 <prvAddNewTaskToReadyList+0xbc>)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80112b2:	4b1d      	ldr	r3, [pc, #116]	; (8011328 <prvAddNewTaskToReadyList+0xc4>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	3301      	adds	r3, #1
 80112b8:	4a1b      	ldr	r2, [pc, #108]	; (8011328 <prvAddNewTaskToReadyList+0xc4>)
 80112ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c0:	2201      	movs	r2, #1
 80112c2:	409a      	lsls	r2, r3
 80112c4:	4b19      	ldr	r3, [pc, #100]	; (801132c <prvAddNewTaskToReadyList+0xc8>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4313      	orrs	r3, r2
 80112ca:	4a18      	ldr	r2, [pc, #96]	; (801132c <prvAddNewTaskToReadyList+0xc8>)
 80112cc:	6013      	str	r3, [r2, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d2:	4613      	mov	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4a15      	ldr	r2, [pc, #84]	; (8011330 <prvAddNewTaskToReadyList+0xcc>)
 80112dc:	441a      	add	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	3304      	adds	r3, #4
 80112e2:	4619      	mov	r1, r3
 80112e4:	4610      	mov	r0, r2
 80112e6:	f7ff f88a 	bl	80103fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80112ea:	f000 ff03 	bl	80120f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80112ee:	4b0d      	ldr	r3, [pc, #52]	; (8011324 <prvAddNewTaskToReadyList+0xc0>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00e      	beq.n	8011314 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80112f6:	4b0a      	ldr	r3, [pc, #40]	; (8011320 <prvAddNewTaskToReadyList+0xbc>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011300:	429a      	cmp	r2, r3
 8011302:	d207      	bcs.n	8011314 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011304:	4b0b      	ldr	r3, [pc, #44]	; (8011334 <prvAddNewTaskToReadyList+0xd0>)
 8011306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801130a:	601a      	str	r2, [r3, #0]
 801130c:	f3bf 8f4f 	dsb	sy
 8011310:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	20000e9c 	.word	0x20000e9c
 8011320:	20000d9c 	.word	0x20000d9c
 8011324:	20000ea8 	.word	0x20000ea8
 8011328:	20000eb8 	.word	0x20000eb8
 801132c:	20000ea4 	.word	0x20000ea4
 8011330:	20000da0 	.word	0x20000da0
 8011334:	e000ed04 	.word	0xe000ed04

08011338 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011340:	2300      	movs	r3, #0
 8011342:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d019      	beq.n	801137e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801134a:	4b14      	ldr	r3, [pc, #80]	; (801139c <vTaskDelay+0x64>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00c      	beq.n	801136c <vTaskDelay+0x34>
	__asm volatile
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	b672      	cpsid	i
 8011358:	f383 8811 	msr	BASEPRI, r3
 801135c:	f3bf 8f6f 	isb	sy
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	b662      	cpsie	i
 8011366:	60bb      	str	r3, [r7, #8]
}
 8011368:	bf00      	nop
 801136a:	e7fe      	b.n	801136a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801136c:	f000 f87e 	bl	801146c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011370:	2100      	movs	r1, #0
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f000 fd18 	bl	8011da8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011378:	f000 f886 	bl	8011488 <xTaskResumeAll>
 801137c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d107      	bne.n	8011394 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8011384:	4b06      	ldr	r3, [pc, #24]	; (80113a0 <vTaskDelay+0x68>)
 8011386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011394:	bf00      	nop
 8011396:	3710      	adds	r7, #16
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	20000ec4 	.word	0x20000ec4
 80113a0:	e000ed04 	.word	0xe000ed04

080113a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b08a      	sub	sp, #40	; 0x28
 80113a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80113ae:	2300      	movs	r3, #0
 80113b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113b2:	463a      	mov	r2, r7
 80113b4:	1d39      	adds	r1, r7, #4
 80113b6:	f107 0308 	add.w	r3, r7, #8
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ef f8c0 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80113c0:	6839      	ldr	r1, [r7, #0]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	68ba      	ldr	r2, [r7, #8]
 80113c6:	9202      	str	r2, [sp, #8]
 80113c8:	9301      	str	r3, [sp, #4]
 80113ca:	2300      	movs	r3, #0
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	2300      	movs	r3, #0
 80113d0:	460a      	mov	r2, r1
 80113d2:	4920      	ldr	r1, [pc, #128]	; (8011454 <vTaskStartScheduler+0xb0>)
 80113d4:	4820      	ldr	r0, [pc, #128]	; (8011458 <vTaskStartScheduler+0xb4>)
 80113d6:	f7ff fe09 	bl	8010fec <xTaskCreateStatic>
 80113da:	4603      	mov	r3, r0
 80113dc:	4a1f      	ldr	r2, [pc, #124]	; (801145c <vTaskStartScheduler+0xb8>)
 80113de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80113e0:	4b1e      	ldr	r3, [pc, #120]	; (801145c <vTaskStartScheduler+0xb8>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80113e8:	2301      	movs	r3, #1
 80113ea:	617b      	str	r3, [r7, #20]
 80113ec:	e001      	b.n	80113f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80113ee:	2300      	movs	r3, #0
 80113f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d118      	bne.n	801142a <vTaskStartScheduler+0x86>
	__asm volatile
 80113f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fc:	b672      	cpsid	i
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	b662      	cpsie	i
 801140c:	613b      	str	r3, [r7, #16]
}
 801140e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011410:	4b13      	ldr	r3, [pc, #76]	; (8011460 <vTaskStartScheduler+0xbc>)
 8011412:	f04f 32ff 	mov.w	r2, #4294967295
 8011416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011418:	4b12      	ldr	r3, [pc, #72]	; (8011464 <vTaskStartScheduler+0xc0>)
 801141a:	2201      	movs	r2, #1
 801141c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801141e:	4b12      	ldr	r3, [pc, #72]	; (8011468 <vTaskStartScheduler+0xc4>)
 8011420:	2200      	movs	r2, #0
 8011422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011424:	f000 fdb4 	bl	8011f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011428:	e010      	b.n	801144c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011430:	d10c      	bne.n	801144c <vTaskStartScheduler+0xa8>
	__asm volatile
 8011432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011436:	b672      	cpsid	i
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	b662      	cpsie	i
 8011446:	60fb      	str	r3, [r7, #12]
}
 8011448:	bf00      	nop
 801144a:	e7fe      	b.n	801144a <vTaskStartScheduler+0xa6>
}
 801144c:	bf00      	nop
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	08012fe4 	.word	0x08012fe4
 8011458:	08011aa5 	.word	0x08011aa5
 801145c:	20000ec0 	.word	0x20000ec0
 8011460:	20000ebc 	.word	0x20000ebc
 8011464:	20000ea8 	.word	0x20000ea8
 8011468:	20000ea0 	.word	0x20000ea0

0801146c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801146c:	b480      	push	{r7}
 801146e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011470:	4b04      	ldr	r3, [pc, #16]	; (8011484 <vTaskSuspendAll+0x18>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	3301      	adds	r3, #1
 8011476:	4a03      	ldr	r2, [pc, #12]	; (8011484 <vTaskSuspendAll+0x18>)
 8011478:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801147a:	bf00      	nop
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	20000ec4 	.word	0x20000ec4

08011488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801148e:	2300      	movs	r3, #0
 8011490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011492:	2300      	movs	r3, #0
 8011494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011496:	4b42      	ldr	r3, [pc, #264]	; (80115a0 <xTaskResumeAll+0x118>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d10c      	bne.n	80114b8 <xTaskResumeAll+0x30>
	__asm volatile
 801149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a2:	b672      	cpsid	i
 80114a4:	f383 8811 	msr	BASEPRI, r3
 80114a8:	f3bf 8f6f 	isb	sy
 80114ac:	f3bf 8f4f 	dsb	sy
 80114b0:	b662      	cpsie	i
 80114b2:	603b      	str	r3, [r7, #0]
}
 80114b4:	bf00      	nop
 80114b6:	e7fe      	b.n	80114b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80114b8:	f000 fde8 	bl	801208c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80114bc:	4b38      	ldr	r3, [pc, #224]	; (80115a0 <xTaskResumeAll+0x118>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3b01      	subs	r3, #1
 80114c2:	4a37      	ldr	r2, [pc, #220]	; (80115a0 <xTaskResumeAll+0x118>)
 80114c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114c6:	4b36      	ldr	r3, [pc, #216]	; (80115a0 <xTaskResumeAll+0x118>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d161      	bne.n	8011592 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80114ce:	4b35      	ldr	r3, [pc, #212]	; (80115a4 <xTaskResumeAll+0x11c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d05d      	beq.n	8011592 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114d6:	e02e      	b.n	8011536 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114d8:	4b33      	ldr	r3, [pc, #204]	; (80115a8 <xTaskResumeAll+0x120>)
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	3318      	adds	r3, #24
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fe ffe7 	bl	80104b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	3304      	adds	r3, #4
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fe ffe2 	bl	80104b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f8:	2201      	movs	r2, #1
 80114fa:	409a      	lsls	r2, r3
 80114fc:	4b2b      	ldr	r3, [pc, #172]	; (80115ac <xTaskResumeAll+0x124>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4313      	orrs	r3, r2
 8011502:	4a2a      	ldr	r2, [pc, #168]	; (80115ac <xTaskResumeAll+0x124>)
 8011504:	6013      	str	r3, [r2, #0]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801150a:	4613      	mov	r3, r2
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	4413      	add	r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	4a27      	ldr	r2, [pc, #156]	; (80115b0 <xTaskResumeAll+0x128>)
 8011514:	441a      	add	r2, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	3304      	adds	r3, #4
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f7fe ff6e 	bl	80103fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011526:	4b23      	ldr	r3, [pc, #140]	; (80115b4 <xTaskResumeAll+0x12c>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801152c:	429a      	cmp	r2, r3
 801152e:	d302      	bcc.n	8011536 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011530:	4b21      	ldr	r3, [pc, #132]	; (80115b8 <xTaskResumeAll+0x130>)
 8011532:	2201      	movs	r2, #1
 8011534:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011536:	4b1c      	ldr	r3, [pc, #112]	; (80115a8 <xTaskResumeAll+0x120>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1cc      	bne.n	80114d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d001      	beq.n	8011548 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011544:	f000 fb68 	bl	8011c18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011548:	4b1c      	ldr	r3, [pc, #112]	; (80115bc <xTaskResumeAll+0x134>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d010      	beq.n	8011576 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011554:	f000 f858 	bl	8011608 <xTaskIncrementTick>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d002      	beq.n	8011564 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801155e:	4b16      	ldr	r3, [pc, #88]	; (80115b8 <xTaskResumeAll+0x130>)
 8011560:	2201      	movs	r2, #1
 8011562:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	3b01      	subs	r3, #1
 8011568:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1f1      	bne.n	8011554 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011570:	4b12      	ldr	r3, [pc, #72]	; (80115bc <xTaskResumeAll+0x134>)
 8011572:	2200      	movs	r2, #0
 8011574:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011576:	4b10      	ldr	r3, [pc, #64]	; (80115b8 <xTaskResumeAll+0x130>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d009      	beq.n	8011592 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801157e:	2301      	movs	r3, #1
 8011580:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011582:	4b0f      	ldr	r3, [pc, #60]	; (80115c0 <xTaskResumeAll+0x138>)
 8011584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011588:	601a      	str	r2, [r3, #0]
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011592:	f000 fdaf 	bl	80120f4 <vPortExitCritical>

	return xAlreadyYielded;
 8011596:	68bb      	ldr	r3, [r7, #8]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	20000ec4 	.word	0x20000ec4
 80115a4:	20000e9c 	.word	0x20000e9c
 80115a8:	20000e5c 	.word	0x20000e5c
 80115ac:	20000ea4 	.word	0x20000ea4
 80115b0:	20000da0 	.word	0x20000da0
 80115b4:	20000d9c 	.word	0x20000d9c
 80115b8:	20000eb0 	.word	0x20000eb0
 80115bc:	20000eac 	.word	0x20000eac
 80115c0:	e000ed04 	.word	0xe000ed04

080115c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80115ca:	4b05      	ldr	r3, [pc, #20]	; (80115e0 <xTaskGetTickCount+0x1c>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80115d0:	687b      	ldr	r3, [r7, #4]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	370c      	adds	r7, #12
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop
 80115e0:	20000ea0 	.word	0x20000ea0

080115e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80115ea:	f000 fe37 	bl	801225c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80115ee:	2300      	movs	r3, #0
 80115f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80115f2:	4b04      	ldr	r3, [pc, #16]	; (8011604 <xTaskGetTickCountFromISR+0x20>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80115f8:	683b      	ldr	r3, [r7, #0]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	20000ea0 	.word	0x20000ea0

08011608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b086      	sub	sp, #24
 801160c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011612:	4b4f      	ldr	r3, [pc, #316]	; (8011750 <xTaskIncrementTick+0x148>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	f040 808a 	bne.w	8011730 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801161c:	4b4d      	ldr	r3, [pc, #308]	; (8011754 <xTaskIncrementTick+0x14c>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3301      	adds	r3, #1
 8011622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011624:	4a4b      	ldr	r2, [pc, #300]	; (8011754 <xTaskIncrementTick+0x14c>)
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d122      	bne.n	8011676 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011630:	4b49      	ldr	r3, [pc, #292]	; (8011758 <xTaskIncrementTick+0x150>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00c      	beq.n	8011654 <xTaskIncrementTick+0x4c>
	__asm volatile
 801163a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801163e:	b672      	cpsid	i
 8011640:	f383 8811 	msr	BASEPRI, r3
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	b662      	cpsie	i
 801164e:	603b      	str	r3, [r7, #0]
}
 8011650:	bf00      	nop
 8011652:	e7fe      	b.n	8011652 <xTaskIncrementTick+0x4a>
 8011654:	4b40      	ldr	r3, [pc, #256]	; (8011758 <xTaskIncrementTick+0x150>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	60fb      	str	r3, [r7, #12]
 801165a:	4b40      	ldr	r3, [pc, #256]	; (801175c <xTaskIncrementTick+0x154>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	4a3e      	ldr	r2, [pc, #248]	; (8011758 <xTaskIncrementTick+0x150>)
 8011660:	6013      	str	r3, [r2, #0]
 8011662:	4a3e      	ldr	r2, [pc, #248]	; (801175c <xTaskIncrementTick+0x154>)
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	4b3d      	ldr	r3, [pc, #244]	; (8011760 <xTaskIncrementTick+0x158>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	3301      	adds	r3, #1
 801166e:	4a3c      	ldr	r2, [pc, #240]	; (8011760 <xTaskIncrementTick+0x158>)
 8011670:	6013      	str	r3, [r2, #0]
 8011672:	f000 fad1 	bl	8011c18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011676:	4b3b      	ldr	r3, [pc, #236]	; (8011764 <xTaskIncrementTick+0x15c>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	693a      	ldr	r2, [r7, #16]
 801167c:	429a      	cmp	r2, r3
 801167e:	d348      	bcc.n	8011712 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011680:	4b35      	ldr	r3, [pc, #212]	; (8011758 <xTaskIncrementTick+0x150>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d104      	bne.n	8011694 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801168a:	4b36      	ldr	r3, [pc, #216]	; (8011764 <xTaskIncrementTick+0x15c>)
 801168c:	f04f 32ff 	mov.w	r2, #4294967295
 8011690:	601a      	str	r2, [r3, #0]
					break;
 8011692:	e03e      	b.n	8011712 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011694:	4b30      	ldr	r3, [pc, #192]	; (8011758 <xTaskIncrementTick+0x150>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80116a4:	693a      	ldr	r2, [r7, #16]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d203      	bcs.n	80116b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80116ac:	4a2d      	ldr	r2, [pc, #180]	; (8011764 <xTaskIncrementTick+0x15c>)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80116b2:	e02e      	b.n	8011712 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	3304      	adds	r3, #4
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fe fefd 	bl	80104b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d004      	beq.n	80116d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	3318      	adds	r3, #24
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7fe fef4 	bl	80104b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d4:	2201      	movs	r2, #1
 80116d6:	409a      	lsls	r2, r3
 80116d8:	4b23      	ldr	r3, [pc, #140]	; (8011768 <xTaskIncrementTick+0x160>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4313      	orrs	r3, r2
 80116de:	4a22      	ldr	r2, [pc, #136]	; (8011768 <xTaskIncrementTick+0x160>)
 80116e0:	6013      	str	r3, [r2, #0]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e6:	4613      	mov	r3, r2
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	4413      	add	r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4a1f      	ldr	r2, [pc, #124]	; (801176c <xTaskIncrementTick+0x164>)
 80116f0:	441a      	add	r2, r3
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	3304      	adds	r3, #4
 80116f6:	4619      	mov	r1, r3
 80116f8:	4610      	mov	r0, r2
 80116fa:	f7fe fe80 	bl	80103fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011702:	4b1b      	ldr	r3, [pc, #108]	; (8011770 <xTaskIncrementTick+0x168>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011708:	429a      	cmp	r2, r3
 801170a:	d3b9      	bcc.n	8011680 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801170c:	2301      	movs	r3, #1
 801170e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011710:	e7b6      	b.n	8011680 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011712:	4b17      	ldr	r3, [pc, #92]	; (8011770 <xTaskIncrementTick+0x168>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011718:	4914      	ldr	r1, [pc, #80]	; (801176c <xTaskIncrementTick+0x164>)
 801171a:	4613      	mov	r3, r2
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	440b      	add	r3, r1
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b01      	cmp	r3, #1
 8011728:	d907      	bls.n	801173a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801172a:	2301      	movs	r3, #1
 801172c:	617b      	str	r3, [r7, #20]
 801172e:	e004      	b.n	801173a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011730:	4b10      	ldr	r3, [pc, #64]	; (8011774 <xTaskIncrementTick+0x16c>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3301      	adds	r3, #1
 8011736:	4a0f      	ldr	r2, [pc, #60]	; (8011774 <xTaskIncrementTick+0x16c>)
 8011738:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801173a:	4b0f      	ldr	r3, [pc, #60]	; (8011778 <xTaskIncrementTick+0x170>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011742:	2301      	movs	r3, #1
 8011744:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011746:	697b      	ldr	r3, [r7, #20]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3718      	adds	r7, #24
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	20000ec4 	.word	0x20000ec4
 8011754:	20000ea0 	.word	0x20000ea0
 8011758:	20000e54 	.word	0x20000e54
 801175c:	20000e58 	.word	0x20000e58
 8011760:	20000eb4 	.word	0x20000eb4
 8011764:	20000ebc 	.word	0x20000ebc
 8011768:	20000ea4 	.word	0x20000ea4
 801176c:	20000da0 	.word	0x20000da0
 8011770:	20000d9c 	.word	0x20000d9c
 8011774:	20000eac 	.word	0x20000eac
 8011778:	20000eb0 	.word	0x20000eb0

0801177c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b088      	sub	sp, #32
 8011780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011782:	4b3a      	ldr	r3, [pc, #232]	; (801186c <vTaskSwitchContext+0xf0>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801178a:	4b39      	ldr	r3, [pc, #228]	; (8011870 <vTaskSwitchContext+0xf4>)
 801178c:	2201      	movs	r2, #1
 801178e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011790:	e068      	b.n	8011864 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8011792:	4b37      	ldr	r3, [pc, #220]	; (8011870 <vTaskSwitchContext+0xf4>)
 8011794:	2200      	movs	r2, #0
 8011796:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011798:	4b36      	ldr	r3, [pc, #216]	; (8011874 <vTaskSwitchContext+0xf8>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801179e:	61fb      	str	r3, [r7, #28]
 80117a0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80117a4:	61bb      	str	r3, [r7, #24]
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	69ba      	ldr	r2, [r7, #24]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d111      	bne.n	80117d4 <vTaskSwitchContext+0x58>
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	3304      	adds	r3, #4
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d10b      	bne.n	80117d4 <vTaskSwitchContext+0x58>
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	3308      	adds	r3, #8
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	69ba      	ldr	r2, [r7, #24]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d105      	bne.n	80117d4 <vTaskSwitchContext+0x58>
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	330c      	adds	r3, #12
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	69ba      	ldr	r2, [r7, #24]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d008      	beq.n	80117e6 <vTaskSwitchContext+0x6a>
 80117d4:	4b27      	ldr	r3, [pc, #156]	; (8011874 <vTaskSwitchContext+0xf8>)
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	4b26      	ldr	r3, [pc, #152]	; (8011874 <vTaskSwitchContext+0xf8>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3334      	adds	r3, #52	; 0x34
 80117de:	4619      	mov	r1, r3
 80117e0:	4610      	mov	r0, r2
 80117e2:	f7ee fe9a 	bl	800051a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117e6:	4b24      	ldr	r3, [pc, #144]	; (8011878 <vTaskSwitchContext+0xfc>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	fab3 f383 	clz	r3, r3
 80117f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80117f4:	7afb      	ldrb	r3, [r7, #11]
 80117f6:	f1c3 031f 	rsb	r3, r3, #31
 80117fa:	617b      	str	r3, [r7, #20]
 80117fc:	491f      	ldr	r1, [pc, #124]	; (801187c <vTaskSwitchContext+0x100>)
 80117fe:	697a      	ldr	r2, [r7, #20]
 8011800:	4613      	mov	r3, r2
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4413      	add	r3, r2
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	440b      	add	r3, r1
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d10c      	bne.n	801182a <vTaskSwitchContext+0xae>
	__asm volatile
 8011810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011814:	b672      	cpsid	i
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	b662      	cpsie	i
 8011824:	607b      	str	r3, [r7, #4]
}
 8011826:	bf00      	nop
 8011828:	e7fe      	b.n	8011828 <vTaskSwitchContext+0xac>
 801182a:	697a      	ldr	r2, [r7, #20]
 801182c:	4613      	mov	r3, r2
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	4413      	add	r3, r2
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	4a11      	ldr	r2, [pc, #68]	; (801187c <vTaskSwitchContext+0x100>)
 8011836:	4413      	add	r3, r2
 8011838:	613b      	str	r3, [r7, #16]
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	685a      	ldr	r2, [r3, #4]
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	605a      	str	r2, [r3, #4]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	685a      	ldr	r2, [r3, #4]
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	3308      	adds	r3, #8
 801184c:	429a      	cmp	r2, r3
 801184e:	d104      	bne.n	801185a <vTaskSwitchContext+0xde>
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	685a      	ldr	r2, [r3, #4]
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	605a      	str	r2, [r3, #4]
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	4a04      	ldr	r2, [pc, #16]	; (8011874 <vTaskSwitchContext+0xf8>)
 8011862:	6013      	str	r3, [r2, #0]
}
 8011864:	bf00      	nop
 8011866:	3720      	adds	r7, #32
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	20000ec4 	.word	0x20000ec4
 8011870:	20000eb0 	.word	0x20000eb0
 8011874:	20000d9c 	.word	0x20000d9c
 8011878:	20000ea4 	.word	0x20000ea4
 801187c:	20000da0 	.word	0x20000da0

08011880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d10c      	bne.n	80118aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011894:	b672      	cpsid	i
 8011896:	f383 8811 	msr	BASEPRI, r3
 801189a:	f3bf 8f6f 	isb	sy
 801189e:	f3bf 8f4f 	dsb	sy
 80118a2:	b662      	cpsie	i
 80118a4:	60fb      	str	r3, [r7, #12]
}
 80118a6:	bf00      	nop
 80118a8:	e7fe      	b.n	80118a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118aa:	4b07      	ldr	r3, [pc, #28]	; (80118c8 <vTaskPlaceOnEventList+0x48>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3318      	adds	r3, #24
 80118b0:	4619      	mov	r1, r3
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7fe fdc7 	bl	8010446 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118b8:	2101      	movs	r1, #1
 80118ba:	6838      	ldr	r0, [r7, #0]
 80118bc:	f000 fa74 	bl	8011da8 <prvAddCurrentTaskToDelayedList>
}
 80118c0:	bf00      	nop
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20000d9c 	.word	0x20000d9c

080118cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b086      	sub	sp, #24
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10c      	bne.n	80118fc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e6:	b672      	cpsid	i
 80118e8:	f383 8811 	msr	BASEPRI, r3
 80118ec:	f3bf 8f6f 	isb	sy
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	b662      	cpsie	i
 80118f6:	60fb      	str	r3, [r7, #12]
}
 80118f8:	bf00      	nop
 80118fa:	e7fe      	b.n	80118fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	3318      	adds	r3, #24
 8011900:	4618      	mov	r0, r3
 8011902:	f7fe fdd9 	bl	80104b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011906:	4b1d      	ldr	r3, [pc, #116]	; (801197c <xTaskRemoveFromEventList+0xb0>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d11c      	bne.n	8011948 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	3304      	adds	r3, #4
 8011912:	4618      	mov	r0, r3
 8011914:	f7fe fdd0 	bl	80104b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191c:	2201      	movs	r2, #1
 801191e:	409a      	lsls	r2, r3
 8011920:	4b17      	ldr	r3, [pc, #92]	; (8011980 <xTaskRemoveFromEventList+0xb4>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4313      	orrs	r3, r2
 8011926:	4a16      	ldr	r2, [pc, #88]	; (8011980 <xTaskRemoveFromEventList+0xb4>)
 8011928:	6013      	str	r3, [r2, #0]
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801192e:	4613      	mov	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	4a13      	ldr	r2, [pc, #76]	; (8011984 <xTaskRemoveFromEventList+0xb8>)
 8011938:	441a      	add	r2, r3
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	3304      	adds	r3, #4
 801193e:	4619      	mov	r1, r3
 8011940:	4610      	mov	r0, r2
 8011942:	f7fe fd5c 	bl	80103fe <vListInsertEnd>
 8011946:	e005      	b.n	8011954 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	3318      	adds	r3, #24
 801194c:	4619      	mov	r1, r3
 801194e:	480e      	ldr	r0, [pc, #56]	; (8011988 <xTaskRemoveFromEventList+0xbc>)
 8011950:	f7fe fd55 	bl	80103fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011958:	4b0c      	ldr	r3, [pc, #48]	; (801198c <xTaskRemoveFromEventList+0xc0>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195e:	429a      	cmp	r2, r3
 8011960:	d905      	bls.n	801196e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011962:	2301      	movs	r3, #1
 8011964:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011966:	4b0a      	ldr	r3, [pc, #40]	; (8011990 <xTaskRemoveFromEventList+0xc4>)
 8011968:	2201      	movs	r2, #1
 801196a:	601a      	str	r2, [r3, #0]
 801196c:	e001      	b.n	8011972 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801196e:	2300      	movs	r3, #0
 8011970:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011972:	697b      	ldr	r3, [r7, #20]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3718      	adds	r7, #24
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	20000ec4 	.word	0x20000ec4
 8011980:	20000ea4 	.word	0x20000ea4
 8011984:	20000da0 	.word	0x20000da0
 8011988:	20000e5c 	.word	0x20000e5c
 801198c:	20000d9c 	.word	0x20000d9c
 8011990:	20000eb0 	.word	0x20000eb0

08011994 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801199c:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <vTaskInternalSetTimeOutState+0x24>)
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80119a4:	4b05      	ldr	r3, [pc, #20]	; (80119bc <vTaskInternalSetTimeOutState+0x28>)
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	605a      	str	r2, [r3, #4]
}
 80119ac:	bf00      	nop
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	20000eb4 	.word	0x20000eb4
 80119bc:	20000ea0 	.word	0x20000ea0

080119c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d10c      	bne.n	80119ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80119d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d4:	b672      	cpsid	i
 80119d6:	f383 8811 	msr	BASEPRI, r3
 80119da:	f3bf 8f6f 	isb	sy
 80119de:	f3bf 8f4f 	dsb	sy
 80119e2:	b662      	cpsie	i
 80119e4:	613b      	str	r3, [r7, #16]
}
 80119e6:	bf00      	nop
 80119e8:	e7fe      	b.n	80119e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10c      	bne.n	8011a0a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80119f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f4:	b672      	cpsid	i
 80119f6:	f383 8811 	msr	BASEPRI, r3
 80119fa:	f3bf 8f6f 	isb	sy
 80119fe:	f3bf 8f4f 	dsb	sy
 8011a02:	b662      	cpsie	i
 8011a04:	60fb      	str	r3, [r7, #12]
}
 8011a06:	bf00      	nop
 8011a08:	e7fe      	b.n	8011a08 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011a0a:	f000 fb3f 	bl	801208c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a0e:	4b1d      	ldr	r3, [pc, #116]	; (8011a84 <xTaskCheckForTimeOut+0xc4>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	69ba      	ldr	r2, [r7, #24]
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a26:	d102      	bne.n	8011a2e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	61fb      	str	r3, [r7, #28]
 8011a2c:	e023      	b.n	8011a76 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	4b15      	ldr	r3, [pc, #84]	; (8011a88 <xTaskCheckForTimeOut+0xc8>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d007      	beq.n	8011a4a <xTaskCheckForTimeOut+0x8a>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	69ba      	ldr	r2, [r7, #24]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d302      	bcc.n	8011a4a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011a44:	2301      	movs	r3, #1
 8011a46:	61fb      	str	r3, [r7, #28]
 8011a48:	e015      	b.n	8011a76 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	697a      	ldr	r2, [r7, #20]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d20b      	bcs.n	8011a6c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	1ad2      	subs	r2, r2, r3
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff ff97 	bl	8011994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011a66:	2300      	movs	r3, #0
 8011a68:	61fb      	str	r3, [r7, #28]
 8011a6a:	e004      	b.n	8011a76 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011a72:	2301      	movs	r3, #1
 8011a74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011a76:	f000 fb3d 	bl	80120f4 <vPortExitCritical>

	return xReturn;
 8011a7a:	69fb      	ldr	r3, [r7, #28]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3720      	adds	r7, #32
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	20000ea0 	.word	0x20000ea0
 8011a88:	20000eb4 	.word	0x20000eb4

08011a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011a90:	4b03      	ldr	r3, [pc, #12]	; (8011aa0 <vTaskMissedYield+0x14>)
 8011a92:	2201      	movs	r2, #1
 8011a94:	601a      	str	r2, [r3, #0]
}
 8011a96:	bf00      	nop
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr
 8011aa0:	20000eb0 	.word	0x20000eb0

08011aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011aac:	f000 f854 	bl	8011b58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ab0:	4b07      	ldr	r3, [pc, #28]	; (8011ad0 <prvIdleTask+0x2c>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d907      	bls.n	8011ac8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011ab8:	4b06      	ldr	r3, [pc, #24]	; (8011ad4 <prvIdleTask+0x30>)
 8011aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011ac8:	f7ee fd20 	bl	800050c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011acc:	e7ee      	b.n	8011aac <prvIdleTask+0x8>
 8011ace:	bf00      	nop
 8011ad0:	20000da0 	.word	0x20000da0
 8011ad4:	e000ed04 	.word	0xe000ed04

08011ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ade:	2300      	movs	r3, #0
 8011ae0:	607b      	str	r3, [r7, #4]
 8011ae2:	e00c      	b.n	8011afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	4413      	add	r3, r2
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4a12      	ldr	r2, [pc, #72]	; (8011b38 <prvInitialiseTaskLists+0x60>)
 8011af0:	4413      	add	r3, r2
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fe fc56 	bl	80103a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	3301      	adds	r3, #1
 8011afc:	607b      	str	r3, [r7, #4]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2b06      	cmp	r3, #6
 8011b02:	d9ef      	bls.n	8011ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011b04:	480d      	ldr	r0, [pc, #52]	; (8011b3c <prvInitialiseTaskLists+0x64>)
 8011b06:	f7fe fc4d 	bl	80103a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011b0a:	480d      	ldr	r0, [pc, #52]	; (8011b40 <prvInitialiseTaskLists+0x68>)
 8011b0c:	f7fe fc4a 	bl	80103a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011b10:	480c      	ldr	r0, [pc, #48]	; (8011b44 <prvInitialiseTaskLists+0x6c>)
 8011b12:	f7fe fc47 	bl	80103a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011b16:	480c      	ldr	r0, [pc, #48]	; (8011b48 <prvInitialiseTaskLists+0x70>)
 8011b18:	f7fe fc44 	bl	80103a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011b1c:	480b      	ldr	r0, [pc, #44]	; (8011b4c <prvInitialiseTaskLists+0x74>)
 8011b1e:	f7fe fc41 	bl	80103a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011b22:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <prvInitialiseTaskLists+0x78>)
 8011b24:	4a05      	ldr	r2, [pc, #20]	; (8011b3c <prvInitialiseTaskLists+0x64>)
 8011b26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011b28:	4b0a      	ldr	r3, [pc, #40]	; (8011b54 <prvInitialiseTaskLists+0x7c>)
 8011b2a:	4a05      	ldr	r2, [pc, #20]	; (8011b40 <prvInitialiseTaskLists+0x68>)
 8011b2c:	601a      	str	r2, [r3, #0]
}
 8011b2e:	bf00      	nop
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	20000da0 	.word	0x20000da0
 8011b3c:	20000e2c 	.word	0x20000e2c
 8011b40:	20000e40 	.word	0x20000e40
 8011b44:	20000e5c 	.word	0x20000e5c
 8011b48:	20000e70 	.word	0x20000e70
 8011b4c:	20000e88 	.word	0x20000e88
 8011b50:	20000e54 	.word	0x20000e54
 8011b54:	20000e58 	.word	0x20000e58

08011b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b5e:	e019      	b.n	8011b94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011b60:	f000 fa94 	bl	801208c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b64:	4b10      	ldr	r3, [pc, #64]	; (8011ba8 <prvCheckTasksWaitingTermination+0x50>)
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3304      	adds	r3, #4
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7fe fca1 	bl	80104b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011b76:	4b0d      	ldr	r3, [pc, #52]	; (8011bac <prvCheckTasksWaitingTermination+0x54>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	4a0b      	ldr	r2, [pc, #44]	; (8011bac <prvCheckTasksWaitingTermination+0x54>)
 8011b7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011b80:	4b0b      	ldr	r3, [pc, #44]	; (8011bb0 <prvCheckTasksWaitingTermination+0x58>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	3b01      	subs	r3, #1
 8011b86:	4a0a      	ldr	r2, [pc, #40]	; (8011bb0 <prvCheckTasksWaitingTermination+0x58>)
 8011b88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011b8a:	f000 fab3 	bl	80120f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 f810 	bl	8011bb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b94:	4b06      	ldr	r3, [pc, #24]	; (8011bb0 <prvCheckTasksWaitingTermination+0x58>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1e1      	bne.n	8011b60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011b9c:	bf00      	nop
 8011b9e:	bf00      	nop
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	20000e70 	.word	0x20000e70
 8011bac:	20000e9c 	.word	0x20000e9c
 8011bb0:	20000e84 	.word	0x20000e84

08011bb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d108      	bne.n	8011bd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 fc5a 	bl	8012484 <vPortFree>
				vPortFree( pxTCB );
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f000 fc57 	bl	8012484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011bd6:	e01a      	b.n	8011c0e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d103      	bne.n	8011bea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fc4e 	bl	8012484 <vPortFree>
	}
 8011be8:	e011      	b.n	8011c0e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011bf0:	2b02      	cmp	r3, #2
 8011bf2:	d00c      	beq.n	8011c0e <prvDeleteTCB+0x5a>
	__asm volatile
 8011bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf8:	b672      	cpsid	i
 8011bfa:	f383 8811 	msr	BASEPRI, r3
 8011bfe:	f3bf 8f6f 	isb	sy
 8011c02:	f3bf 8f4f 	dsb	sy
 8011c06:	b662      	cpsie	i
 8011c08:	60fb      	str	r3, [r7, #12]
}
 8011c0a:	bf00      	nop
 8011c0c:	e7fe      	b.n	8011c0c <prvDeleteTCB+0x58>
	}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
	...

08011c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c1e:	4b0c      	ldr	r3, [pc, #48]	; (8011c50 <prvResetNextTaskUnblockTime+0x38>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d104      	bne.n	8011c32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011c28:	4b0a      	ldr	r3, [pc, #40]	; (8011c54 <prvResetNextTaskUnblockTime+0x3c>)
 8011c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011c30:	e008      	b.n	8011c44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c32:	4b07      	ldr	r3, [pc, #28]	; (8011c50 <prvResetNextTaskUnblockTime+0x38>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	4a04      	ldr	r2, [pc, #16]	; (8011c54 <prvResetNextTaskUnblockTime+0x3c>)
 8011c42:	6013      	str	r3, [r2, #0]
}
 8011c44:	bf00      	nop
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr
 8011c50:	20000e54 	.word	0x20000e54
 8011c54:	20000ebc 	.word	0x20000ebc

08011c58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011c5e:	4b0b      	ldr	r3, [pc, #44]	; (8011c8c <xTaskGetSchedulerState+0x34>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d102      	bne.n	8011c6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011c66:	2301      	movs	r3, #1
 8011c68:	607b      	str	r3, [r7, #4]
 8011c6a:	e008      	b.n	8011c7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c6c:	4b08      	ldr	r3, [pc, #32]	; (8011c90 <xTaskGetSchedulerState+0x38>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d102      	bne.n	8011c7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011c74:	2302      	movs	r3, #2
 8011c76:	607b      	str	r3, [r7, #4]
 8011c78:	e001      	b.n	8011c7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011c7e:	687b      	ldr	r3, [r7, #4]
	}
 8011c80:	4618      	mov	r0, r3
 8011c82:	370c      	adds	r7, #12
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr
 8011c8c:	20000ea8 	.word	0x20000ea8
 8011c90:	20000ec4 	.word	0x20000ec4

08011c94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b086      	sub	sp, #24
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d072      	beq.n	8011d90 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011caa:	4b3c      	ldr	r3, [pc, #240]	; (8011d9c <xTaskPriorityDisinherit+0x108>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	693a      	ldr	r2, [r7, #16]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d00c      	beq.n	8011cce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb8:	b672      	cpsid	i
 8011cba:	f383 8811 	msr	BASEPRI, r3
 8011cbe:	f3bf 8f6f 	isb	sy
 8011cc2:	f3bf 8f4f 	dsb	sy
 8011cc6:	b662      	cpsie	i
 8011cc8:	60fb      	str	r3, [r7, #12]
}
 8011cca:	bf00      	nop
 8011ccc:	e7fe      	b.n	8011ccc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d10c      	bne.n	8011cf0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cda:	b672      	cpsid	i
 8011cdc:	f383 8811 	msr	BASEPRI, r3
 8011ce0:	f3bf 8f6f 	isb	sy
 8011ce4:	f3bf 8f4f 	dsb	sy
 8011ce8:	b662      	cpsie	i
 8011cea:	60bb      	str	r3, [r7, #8]
}
 8011cec:	bf00      	nop
 8011cee:	e7fe      	b.n	8011cee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cf4:	1e5a      	subs	r2, r3, #1
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d044      	beq.n	8011d90 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d140      	bne.n	8011d90 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	3304      	adds	r3, #4
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fe fbd0 	bl	80104b8 <uxListRemove>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d115      	bne.n	8011d4a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d22:	491f      	ldr	r1, [pc, #124]	; (8011da0 <xTaskPriorityDisinherit+0x10c>)
 8011d24:	4613      	mov	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	440b      	add	r3, r1
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10a      	bne.n	8011d4a <xTaskPriorityDisinherit+0xb6>
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d38:	2201      	movs	r2, #1
 8011d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8011d3e:	43da      	mvns	r2, r3
 8011d40:	4b18      	ldr	r3, [pc, #96]	; (8011da4 <xTaskPriorityDisinherit+0x110>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4013      	ands	r3, r2
 8011d46:	4a17      	ldr	r2, [pc, #92]	; (8011da4 <xTaskPriorityDisinherit+0x110>)
 8011d48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d56:	f1c3 0207 	rsb	r2, r3, #7
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d62:	2201      	movs	r2, #1
 8011d64:	409a      	lsls	r2, r3
 8011d66:	4b0f      	ldr	r3, [pc, #60]	; (8011da4 <xTaskPriorityDisinherit+0x110>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	4a0d      	ldr	r2, [pc, #52]	; (8011da4 <xTaskPriorityDisinherit+0x110>)
 8011d6e:	6013      	str	r3, [r2, #0]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d74:	4613      	mov	r3, r2
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	4413      	add	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4a08      	ldr	r2, [pc, #32]	; (8011da0 <xTaskPriorityDisinherit+0x10c>)
 8011d7e:	441a      	add	r2, r3
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	3304      	adds	r3, #4
 8011d84:	4619      	mov	r1, r3
 8011d86:	4610      	mov	r0, r2
 8011d88:	f7fe fb39 	bl	80103fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011d90:	697b      	ldr	r3, [r7, #20]
	}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3718      	adds	r7, #24
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20000d9c 	.word	0x20000d9c
 8011da0:	20000da0 	.word	0x20000da0
 8011da4:	20000ea4 	.word	0x20000ea4

08011da8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011db2:	4b29      	ldr	r3, [pc, #164]	; (8011e58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011db8:	4b28      	ldr	r3, [pc, #160]	; (8011e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	3304      	adds	r3, #4
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fe fb7a 	bl	80104b8 <uxListRemove>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10b      	bne.n	8011de2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011dca:	4b24      	ldr	r3, [pc, #144]	; (8011e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8011dd6:	43da      	mvns	r2, r3
 8011dd8:	4b21      	ldr	r3, [pc, #132]	; (8011e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4013      	ands	r3, r2
 8011dde:	4a20      	ldr	r2, [pc, #128]	; (8011e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011de0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de8:	d10a      	bne.n	8011e00 <prvAddCurrentTaskToDelayedList+0x58>
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d007      	beq.n	8011e00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011df0:	4b1a      	ldr	r3, [pc, #104]	; (8011e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	3304      	adds	r3, #4
 8011df6:	4619      	mov	r1, r3
 8011df8:	481a      	ldr	r0, [pc, #104]	; (8011e64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011dfa:	f7fe fb00 	bl	80103fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011dfe:	e026      	b.n	8011e4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4413      	add	r3, r2
 8011e06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011e08:	4b14      	ldr	r3, [pc, #80]	; (8011e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	68ba      	ldr	r2, [r7, #8]
 8011e0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d209      	bcs.n	8011e2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e18:	4b13      	ldr	r3, [pc, #76]	; (8011e68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	4b0f      	ldr	r3, [pc, #60]	; (8011e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	3304      	adds	r3, #4
 8011e22:	4619      	mov	r1, r3
 8011e24:	4610      	mov	r0, r2
 8011e26:	f7fe fb0e 	bl	8010446 <vListInsert>
}
 8011e2a:	e010      	b.n	8011e4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e2c:	4b0f      	ldr	r3, [pc, #60]	; (8011e6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	4b0a      	ldr	r3, [pc, #40]	; (8011e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3304      	adds	r3, #4
 8011e36:	4619      	mov	r1, r3
 8011e38:	4610      	mov	r0, r2
 8011e3a:	f7fe fb04 	bl	8010446 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011e3e:	4b0c      	ldr	r3, [pc, #48]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	68ba      	ldr	r2, [r7, #8]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d202      	bcs.n	8011e4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011e48:	4a09      	ldr	r2, [pc, #36]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	6013      	str	r3, [r2, #0]
}
 8011e4e:	bf00      	nop
 8011e50:	3710      	adds	r7, #16
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	20000ea0 	.word	0x20000ea0
 8011e5c:	20000d9c 	.word	0x20000d9c
 8011e60:	20000ea4 	.word	0x20000ea4
 8011e64:	20000e88 	.word	0x20000e88
 8011e68:	20000e58 	.word	0x20000e58
 8011e6c:	20000e54 	.word	0x20000e54
 8011e70:	20000ebc 	.word	0x20000ebc

08011e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	3b04      	subs	r3, #4
 8011e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	3b04      	subs	r3, #4
 8011e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	f023 0201 	bic.w	r2, r3, #1
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3b04      	subs	r3, #4
 8011ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ea4:	4a0c      	ldr	r2, [pc, #48]	; (8011ed8 <pxPortInitialiseStack+0x64>)
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	3b14      	subs	r3, #20
 8011eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	3b04      	subs	r3, #4
 8011eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f06f 0202 	mvn.w	r2, #2
 8011ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	3b20      	subs	r3, #32
 8011ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011eca:	68fb      	ldr	r3, [r7, #12]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3714      	adds	r7, #20
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr
 8011ed8:	08011edd 	.word	0x08011edd

08011edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011edc:	b480      	push	{r7}
 8011ede:	b085      	sub	sp, #20
 8011ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ee6:	4b14      	ldr	r3, [pc, #80]	; (8011f38 <prvTaskExitError+0x5c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eee:	d00c      	beq.n	8011f0a <prvTaskExitError+0x2e>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	b672      	cpsid	i
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	b662      	cpsie	i
 8011f04:	60fb      	str	r3, [r7, #12]
}
 8011f06:	bf00      	nop
 8011f08:	e7fe      	b.n	8011f08 <prvTaskExitError+0x2c>
	__asm volatile
 8011f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0e:	b672      	cpsid	i
 8011f10:	f383 8811 	msr	BASEPRI, r3
 8011f14:	f3bf 8f6f 	isb	sy
 8011f18:	f3bf 8f4f 	dsb	sy
 8011f1c:	b662      	cpsie	i
 8011f1e:	60bb      	str	r3, [r7, #8]
}
 8011f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f22:	bf00      	nop
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d0fc      	beq.n	8011f24 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f2a:	bf00      	nop
 8011f2c:	bf00      	nop
 8011f2e:	3714      	adds	r7, #20
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr
 8011f38:	2000002c 	.word	0x2000002c
 8011f3c:	00000000 	.word	0x00000000

08011f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f40:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <pxCurrentTCBConst2>)
 8011f42:	6819      	ldr	r1, [r3, #0]
 8011f44:	6808      	ldr	r0, [r1, #0]
 8011f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f4a:	f380 8809 	msr	PSP, r0
 8011f4e:	f3bf 8f6f 	isb	sy
 8011f52:	f04f 0000 	mov.w	r0, #0
 8011f56:	f380 8811 	msr	BASEPRI, r0
 8011f5a:	4770      	bx	lr
 8011f5c:	f3af 8000 	nop.w

08011f60 <pxCurrentTCBConst2>:
 8011f60:	20000d9c 	.word	0x20000d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011f64:	bf00      	nop
 8011f66:	bf00      	nop

08011f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011f68:	4808      	ldr	r0, [pc, #32]	; (8011f8c <prvPortStartFirstTask+0x24>)
 8011f6a:	6800      	ldr	r0, [r0, #0]
 8011f6c:	6800      	ldr	r0, [r0, #0]
 8011f6e:	f380 8808 	msr	MSP, r0
 8011f72:	f04f 0000 	mov.w	r0, #0
 8011f76:	f380 8814 	msr	CONTROL, r0
 8011f7a:	b662      	cpsie	i
 8011f7c:	b661      	cpsie	f
 8011f7e:	f3bf 8f4f 	dsb	sy
 8011f82:	f3bf 8f6f 	isb	sy
 8011f86:	df00      	svc	0
 8011f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011f8a:	bf00      	nop
 8011f8c:	e000ed08 	.word	0xe000ed08

08011f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f96:	4b37      	ldr	r3, [pc, #220]	; (8012074 <xPortStartScheduler+0xe4>)
 8011f98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	22ff      	movs	r2, #255	; 0xff
 8011fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011fb0:	78fb      	ldrb	r3, [r7, #3]
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	4b2f      	ldr	r3, [pc, #188]	; (8012078 <xPortStartScheduler+0xe8>)
 8011fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011fbe:	4b2f      	ldr	r3, [pc, #188]	; (801207c <xPortStartScheduler+0xec>)
 8011fc0:	2207      	movs	r2, #7
 8011fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011fc4:	e009      	b.n	8011fda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011fc6:	4b2d      	ldr	r3, [pc, #180]	; (801207c <xPortStartScheduler+0xec>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	4a2b      	ldr	r2, [pc, #172]	; (801207c <xPortStartScheduler+0xec>)
 8011fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011fda:	78fb      	ldrb	r3, [r7, #3]
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fe2:	2b80      	cmp	r3, #128	; 0x80
 8011fe4:	d0ef      	beq.n	8011fc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011fe6:	4b25      	ldr	r3, [pc, #148]	; (801207c <xPortStartScheduler+0xec>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f1c3 0307 	rsb	r3, r3, #7
 8011fee:	2b04      	cmp	r3, #4
 8011ff0:	d00c      	beq.n	801200c <xPortStartScheduler+0x7c>
	__asm volatile
 8011ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff6:	b672      	cpsid	i
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	b662      	cpsie	i
 8012006:	60bb      	str	r3, [r7, #8]
}
 8012008:	bf00      	nop
 801200a:	e7fe      	b.n	801200a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801200c:	4b1b      	ldr	r3, [pc, #108]	; (801207c <xPortStartScheduler+0xec>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	021b      	lsls	r3, r3, #8
 8012012:	4a1a      	ldr	r2, [pc, #104]	; (801207c <xPortStartScheduler+0xec>)
 8012014:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012016:	4b19      	ldr	r3, [pc, #100]	; (801207c <xPortStartScheduler+0xec>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801201e:	4a17      	ldr	r2, [pc, #92]	; (801207c <xPortStartScheduler+0xec>)
 8012020:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	b2da      	uxtb	r2, r3
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801202a:	4b15      	ldr	r3, [pc, #84]	; (8012080 <xPortStartScheduler+0xf0>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	4a14      	ldr	r2, [pc, #80]	; (8012080 <xPortStartScheduler+0xf0>)
 8012030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012034:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012036:	4b12      	ldr	r3, [pc, #72]	; (8012080 <xPortStartScheduler+0xf0>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4a11      	ldr	r2, [pc, #68]	; (8012080 <xPortStartScheduler+0xf0>)
 801203c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012040:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012042:	f000 f8dd 	bl	8012200 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012046:	4b0f      	ldr	r3, [pc, #60]	; (8012084 <xPortStartScheduler+0xf4>)
 8012048:	2200      	movs	r2, #0
 801204a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801204c:	f000 f8fc 	bl	8012248 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012050:	4b0d      	ldr	r3, [pc, #52]	; (8012088 <xPortStartScheduler+0xf8>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	4a0c      	ldr	r2, [pc, #48]	; (8012088 <xPortStartScheduler+0xf8>)
 8012056:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801205a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801205c:	f7ff ff84 	bl	8011f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012060:	f7ff fb8c 	bl	801177c <vTaskSwitchContext>
	prvTaskExitError();
 8012064:	f7ff ff3a 	bl	8011edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3710      	adds	r7, #16
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	e000e400 	.word	0xe000e400
 8012078:	20000ec8 	.word	0x20000ec8
 801207c:	20000ecc 	.word	0x20000ecc
 8012080:	e000ed20 	.word	0xe000ed20
 8012084:	2000002c 	.word	0x2000002c
 8012088:	e000ef34 	.word	0xe000ef34

0801208c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
	__asm volatile
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	b672      	cpsid	i
 8012098:	f383 8811 	msr	BASEPRI, r3
 801209c:	f3bf 8f6f 	isb	sy
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	b662      	cpsie	i
 80120a6:	607b      	str	r3, [r7, #4]
}
 80120a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80120aa:	4b10      	ldr	r3, [pc, #64]	; (80120ec <vPortEnterCritical+0x60>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	3301      	adds	r3, #1
 80120b0:	4a0e      	ldr	r2, [pc, #56]	; (80120ec <vPortEnterCritical+0x60>)
 80120b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80120b4:	4b0d      	ldr	r3, [pc, #52]	; (80120ec <vPortEnterCritical+0x60>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d111      	bne.n	80120e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80120bc:	4b0c      	ldr	r3, [pc, #48]	; (80120f0 <vPortEnterCritical+0x64>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d00c      	beq.n	80120e0 <vPortEnterCritical+0x54>
	__asm volatile
 80120c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ca:	b672      	cpsid	i
 80120cc:	f383 8811 	msr	BASEPRI, r3
 80120d0:	f3bf 8f6f 	isb	sy
 80120d4:	f3bf 8f4f 	dsb	sy
 80120d8:	b662      	cpsie	i
 80120da:	603b      	str	r3, [r7, #0]
}
 80120dc:	bf00      	nop
 80120de:	e7fe      	b.n	80120de <vPortEnterCritical+0x52>
	}
}
 80120e0:	bf00      	nop
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr
 80120ec:	2000002c 	.word	0x2000002c
 80120f0:	e000ed04 	.word	0xe000ed04

080120f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80120fa:	4b13      	ldr	r3, [pc, #76]	; (8012148 <vPortExitCritical+0x54>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10c      	bne.n	801211c <vPortExitCritical+0x28>
	__asm volatile
 8012102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012106:	b672      	cpsid	i
 8012108:	f383 8811 	msr	BASEPRI, r3
 801210c:	f3bf 8f6f 	isb	sy
 8012110:	f3bf 8f4f 	dsb	sy
 8012114:	b662      	cpsie	i
 8012116:	607b      	str	r3, [r7, #4]
}
 8012118:	bf00      	nop
 801211a:	e7fe      	b.n	801211a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801211c:	4b0a      	ldr	r3, [pc, #40]	; (8012148 <vPortExitCritical+0x54>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	3b01      	subs	r3, #1
 8012122:	4a09      	ldr	r2, [pc, #36]	; (8012148 <vPortExitCritical+0x54>)
 8012124:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012126:	4b08      	ldr	r3, [pc, #32]	; (8012148 <vPortExitCritical+0x54>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d105      	bne.n	801213a <vPortExitCritical+0x46>
 801212e:	2300      	movs	r3, #0
 8012130:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	f383 8811 	msr	BASEPRI, r3
}
 8012138:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801213a:	bf00      	nop
 801213c:	370c      	adds	r7, #12
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	2000002c 	.word	0x2000002c
 801214c:	00000000 	.word	0x00000000

08012150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012150:	f3ef 8009 	mrs	r0, PSP
 8012154:	f3bf 8f6f 	isb	sy
 8012158:	4b15      	ldr	r3, [pc, #84]	; (80121b0 <pxCurrentTCBConst>)
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	f01e 0f10 	tst.w	lr, #16
 8012160:	bf08      	it	eq
 8012162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216a:	6010      	str	r0, [r2, #0]
 801216c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012174:	b672      	cpsid	i
 8012176:	f380 8811 	msr	BASEPRI, r0
 801217a:	f3bf 8f4f 	dsb	sy
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	b662      	cpsie	i
 8012184:	f7ff fafa 	bl	801177c <vTaskSwitchContext>
 8012188:	f04f 0000 	mov.w	r0, #0
 801218c:	f380 8811 	msr	BASEPRI, r0
 8012190:	bc09      	pop	{r0, r3}
 8012192:	6819      	ldr	r1, [r3, #0]
 8012194:	6808      	ldr	r0, [r1, #0]
 8012196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219a:	f01e 0f10 	tst.w	lr, #16
 801219e:	bf08      	it	eq
 80121a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80121a4:	f380 8809 	msr	PSP, r0
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop

080121b0 <pxCurrentTCBConst>:
 80121b0:	20000d9c 	.word	0x20000d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80121b4:	bf00      	nop
 80121b6:	bf00      	nop

080121b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
	__asm volatile
 80121be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c2:	b672      	cpsid	i
 80121c4:	f383 8811 	msr	BASEPRI, r3
 80121c8:	f3bf 8f6f 	isb	sy
 80121cc:	f3bf 8f4f 	dsb	sy
 80121d0:	b662      	cpsie	i
 80121d2:	607b      	str	r3, [r7, #4]
}
 80121d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80121d6:	f7ff fa17 	bl	8011608 <xTaskIncrementTick>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d003      	beq.n	80121e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80121e0:	4b06      	ldr	r3, [pc, #24]	; (80121fc <SysTick_Handler+0x44>)
 80121e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	2300      	movs	r3, #0
 80121ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	f383 8811 	msr	BASEPRI, r3
}
 80121f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80121f4:	bf00      	nop
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	e000ed04 	.word	0xe000ed04

08012200 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012200:	b480      	push	{r7}
 8012202:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012204:	4b0b      	ldr	r3, [pc, #44]	; (8012234 <vPortSetupTimerInterrupt+0x34>)
 8012206:	2200      	movs	r2, #0
 8012208:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801220a:	4b0b      	ldr	r3, [pc, #44]	; (8012238 <vPortSetupTimerInterrupt+0x38>)
 801220c:	2200      	movs	r2, #0
 801220e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012210:	4b0a      	ldr	r3, [pc, #40]	; (801223c <vPortSetupTimerInterrupt+0x3c>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	4a0a      	ldr	r2, [pc, #40]	; (8012240 <vPortSetupTimerInterrupt+0x40>)
 8012216:	fba2 2303 	umull	r2, r3, r2, r3
 801221a:	099b      	lsrs	r3, r3, #6
 801221c:	4a09      	ldr	r2, [pc, #36]	; (8012244 <vPortSetupTimerInterrupt+0x44>)
 801221e:	3b01      	subs	r3, #1
 8012220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012222:	4b04      	ldr	r3, [pc, #16]	; (8012234 <vPortSetupTimerInterrupt+0x34>)
 8012224:	2207      	movs	r2, #7
 8012226:	601a      	str	r2, [r3, #0]
}
 8012228:	bf00      	nop
 801222a:	46bd      	mov	sp, r7
 801222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012230:	4770      	bx	lr
 8012232:	bf00      	nop
 8012234:	e000e010 	.word	0xe000e010
 8012238:	e000e018 	.word	0xe000e018
 801223c:	20000000 	.word	0x20000000
 8012240:	10624dd3 	.word	0x10624dd3
 8012244:	e000e014 	.word	0xe000e014

08012248 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012248:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012258 <vPortEnableVFP+0x10>
 801224c:	6801      	ldr	r1, [r0, #0]
 801224e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012252:	6001      	str	r1, [r0, #0]
 8012254:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012256:	bf00      	nop
 8012258:	e000ed88 	.word	0xe000ed88

0801225c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801225c:	b480      	push	{r7}
 801225e:	b085      	sub	sp, #20
 8012260:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012262:	f3ef 8305 	mrs	r3, IPSR
 8012266:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2b0f      	cmp	r3, #15
 801226c:	d916      	bls.n	801229c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801226e:	4a19      	ldr	r2, [pc, #100]	; (80122d4 <vPortValidateInterruptPriority+0x78>)
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	4413      	add	r3, r2
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012278:	4b17      	ldr	r3, [pc, #92]	; (80122d8 <vPortValidateInterruptPriority+0x7c>)
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	7afa      	ldrb	r2, [r7, #11]
 801227e:	429a      	cmp	r2, r3
 8012280:	d20c      	bcs.n	801229c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012286:	b672      	cpsid	i
 8012288:	f383 8811 	msr	BASEPRI, r3
 801228c:	f3bf 8f6f 	isb	sy
 8012290:	f3bf 8f4f 	dsb	sy
 8012294:	b662      	cpsie	i
 8012296:	607b      	str	r3, [r7, #4]
}
 8012298:	bf00      	nop
 801229a:	e7fe      	b.n	801229a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801229c:	4b0f      	ldr	r3, [pc, #60]	; (80122dc <vPortValidateInterruptPriority+0x80>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80122a4:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <vPortValidateInterruptPriority+0x84>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d90c      	bls.n	80122c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80122ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b0:	b672      	cpsid	i
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	b662      	cpsie	i
 80122c0:	603b      	str	r3, [r7, #0]
}
 80122c2:	bf00      	nop
 80122c4:	e7fe      	b.n	80122c4 <vPortValidateInterruptPriority+0x68>
	}
 80122c6:	bf00      	nop
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop
 80122d4:	e000e3f0 	.word	0xe000e3f0
 80122d8:	20000ec8 	.word	0x20000ec8
 80122dc:	e000ed0c 	.word	0xe000ed0c
 80122e0:	20000ecc 	.word	0x20000ecc

080122e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b08a      	sub	sp, #40	; 0x28
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80122ec:	2300      	movs	r3, #0
 80122ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80122f0:	f7ff f8bc 	bl	801146c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80122f4:	4b5e      	ldr	r3, [pc, #376]	; (8012470 <pvPortMalloc+0x18c>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d101      	bne.n	8012300 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80122fc:	f000 f920 	bl	8012540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012300:	4b5c      	ldr	r3, [pc, #368]	; (8012474 <pvPortMalloc+0x190>)
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	4013      	ands	r3, r2
 8012308:	2b00      	cmp	r3, #0
 801230a:	f040 8092 	bne.w	8012432 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d01f      	beq.n	8012354 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012314:	2208      	movs	r2, #8
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	4413      	add	r3, r2
 801231a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f003 0307 	and.w	r3, r3, #7
 8012322:	2b00      	cmp	r3, #0
 8012324:	d016      	beq.n	8012354 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f023 0307 	bic.w	r3, r3, #7
 801232c:	3308      	adds	r3, #8
 801232e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f003 0307 	and.w	r3, r3, #7
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00c      	beq.n	8012354 <pvPortMalloc+0x70>
	__asm volatile
 801233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233e:	b672      	cpsid	i
 8012340:	f383 8811 	msr	BASEPRI, r3
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	b662      	cpsie	i
 801234e:	617b      	str	r3, [r7, #20]
}
 8012350:	bf00      	nop
 8012352:	e7fe      	b.n	8012352 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d06b      	beq.n	8012432 <pvPortMalloc+0x14e>
 801235a:	4b47      	ldr	r3, [pc, #284]	; (8012478 <pvPortMalloc+0x194>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	429a      	cmp	r2, r3
 8012362:	d866      	bhi.n	8012432 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012364:	4b45      	ldr	r3, [pc, #276]	; (801247c <pvPortMalloc+0x198>)
 8012366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012368:	4b44      	ldr	r3, [pc, #272]	; (801247c <pvPortMalloc+0x198>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801236e:	e004      	b.n	801237a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	429a      	cmp	r2, r3
 8012382:	d903      	bls.n	801238c <pvPortMalloc+0xa8>
 8012384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d1f1      	bne.n	8012370 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801238c:	4b38      	ldr	r3, [pc, #224]	; (8012470 <pvPortMalloc+0x18c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012392:	429a      	cmp	r2, r3
 8012394:	d04d      	beq.n	8012432 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012396:	6a3b      	ldr	r3, [r7, #32]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2208      	movs	r2, #8
 801239c:	4413      	add	r3, r2
 801239e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80123a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	6a3b      	ldr	r3, [r7, #32]
 80123a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	1ad2      	subs	r2, r2, r3
 80123b0:	2308      	movs	r3, #8
 80123b2:	005b      	lsls	r3, r3, #1
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d921      	bls.n	80123fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80123b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	4413      	add	r3, r2
 80123be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123c0:	69bb      	ldr	r3, [r7, #24]
 80123c2:	f003 0307 	and.w	r3, r3, #7
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d00c      	beq.n	80123e4 <pvPortMalloc+0x100>
	__asm volatile
 80123ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ce:	b672      	cpsid	i
 80123d0:	f383 8811 	msr	BASEPRI, r3
 80123d4:	f3bf 8f6f 	isb	sy
 80123d8:	f3bf 8f4f 	dsb	sy
 80123dc:	b662      	cpsie	i
 80123de:	613b      	str	r3, [r7, #16]
}
 80123e0:	bf00      	nop
 80123e2:	e7fe      	b.n	80123e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80123e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e6:	685a      	ldr	r2, [r3, #4]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	1ad2      	subs	r2, r2, r3
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80123f6:	69b8      	ldr	r0, [r7, #24]
 80123f8:	f000 f904 	bl	8012604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80123fc:	4b1e      	ldr	r3, [pc, #120]	; (8012478 <pvPortMalloc+0x194>)
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	4a1c      	ldr	r2, [pc, #112]	; (8012478 <pvPortMalloc+0x194>)
 8012408:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801240a:	4b1b      	ldr	r3, [pc, #108]	; (8012478 <pvPortMalloc+0x194>)
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	4b1c      	ldr	r3, [pc, #112]	; (8012480 <pvPortMalloc+0x19c>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	429a      	cmp	r2, r3
 8012414:	d203      	bcs.n	801241e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012416:	4b18      	ldr	r3, [pc, #96]	; (8012478 <pvPortMalloc+0x194>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4a19      	ldr	r2, [pc, #100]	; (8012480 <pvPortMalloc+0x19c>)
 801241c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	4b14      	ldr	r3, [pc, #80]	; (8012474 <pvPortMalloc+0x190>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	431a      	orrs	r2, r3
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012432:	f7ff f829 	bl	8011488 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d101      	bne.n	8012440 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801243c:	f7ee f878 	bl	8000530 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	f003 0307 	and.w	r3, r3, #7
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00c      	beq.n	8012464 <pvPortMalloc+0x180>
	__asm volatile
 801244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801244e:	b672      	cpsid	i
 8012450:	f383 8811 	msr	BASEPRI, r3
 8012454:	f3bf 8f6f 	isb	sy
 8012458:	f3bf 8f4f 	dsb	sy
 801245c:	b662      	cpsie	i
 801245e:	60fb      	str	r3, [r7, #12]
}
 8012460:	bf00      	nop
 8012462:	e7fe      	b.n	8012462 <pvPortMalloc+0x17e>
	return pvReturn;
 8012464:	69fb      	ldr	r3, [r7, #28]
}
 8012466:	4618      	mov	r0, r3
 8012468:	3728      	adds	r7, #40	; 0x28
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	20008ed8 	.word	0x20008ed8
 8012474:	20008ee4 	.word	0x20008ee4
 8012478:	20008edc 	.word	0x20008edc
 801247c:	20008ed0 	.word	0x20008ed0
 8012480:	20008ee0 	.word	0x20008ee0

08012484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b086      	sub	sp, #24
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d04c      	beq.n	8012530 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012496:	2308      	movs	r3, #8
 8012498:	425b      	negs	r3, r3
 801249a:	697a      	ldr	r2, [r7, #20]
 801249c:	4413      	add	r3, r2
 801249e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	685a      	ldr	r2, [r3, #4]
 80124a8:	4b23      	ldr	r3, [pc, #140]	; (8012538 <vPortFree+0xb4>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4013      	ands	r3, r2
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d10c      	bne.n	80124cc <vPortFree+0x48>
	__asm volatile
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	b672      	cpsid	i
 80124b8:	f383 8811 	msr	BASEPRI, r3
 80124bc:	f3bf 8f6f 	isb	sy
 80124c0:	f3bf 8f4f 	dsb	sy
 80124c4:	b662      	cpsie	i
 80124c6:	60fb      	str	r3, [r7, #12]
}
 80124c8:	bf00      	nop
 80124ca:	e7fe      	b.n	80124ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00c      	beq.n	80124ee <vPortFree+0x6a>
	__asm volatile
 80124d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d8:	b672      	cpsid	i
 80124da:	f383 8811 	msr	BASEPRI, r3
 80124de:	f3bf 8f6f 	isb	sy
 80124e2:	f3bf 8f4f 	dsb	sy
 80124e6:	b662      	cpsie	i
 80124e8:	60bb      	str	r3, [r7, #8]
}
 80124ea:	bf00      	nop
 80124ec:	e7fe      	b.n	80124ec <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	685a      	ldr	r2, [r3, #4]
 80124f2:	4b11      	ldr	r3, [pc, #68]	; (8012538 <vPortFree+0xb4>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4013      	ands	r3, r2
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d019      	beq.n	8012530 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d115      	bne.n	8012530 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	4b0b      	ldr	r3, [pc, #44]	; (8012538 <vPortFree+0xb4>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	43db      	mvns	r3, r3
 801250e:	401a      	ands	r2, r3
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012514:	f7fe ffaa 	bl	801146c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	685a      	ldr	r2, [r3, #4]
 801251c:	4b07      	ldr	r3, [pc, #28]	; (801253c <vPortFree+0xb8>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4413      	add	r3, r2
 8012522:	4a06      	ldr	r2, [pc, #24]	; (801253c <vPortFree+0xb8>)
 8012524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012526:	6938      	ldr	r0, [r7, #16]
 8012528:	f000 f86c 	bl	8012604 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801252c:	f7fe ffac 	bl	8011488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012530:	bf00      	nop
 8012532:	3718      	adds	r7, #24
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	20008ee4 	.word	0x20008ee4
 801253c:	20008edc 	.word	0x20008edc

08012540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012540:	b480      	push	{r7}
 8012542:	b085      	sub	sp, #20
 8012544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801254a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801254c:	4b27      	ldr	r3, [pc, #156]	; (80125ec <prvHeapInit+0xac>)
 801254e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	f003 0307 	and.w	r3, r3, #7
 8012556:	2b00      	cmp	r3, #0
 8012558:	d00c      	beq.n	8012574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3307      	adds	r3, #7
 801255e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f023 0307 	bic.w	r3, r3, #7
 8012566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	4a1f      	ldr	r2, [pc, #124]	; (80125ec <prvHeapInit+0xac>)
 8012570:	4413      	add	r3, r2
 8012572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012578:	4a1d      	ldr	r2, [pc, #116]	; (80125f0 <prvHeapInit+0xb0>)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801257e:	4b1c      	ldr	r3, [pc, #112]	; (80125f0 <prvHeapInit+0xb0>)
 8012580:	2200      	movs	r2, #0
 8012582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	68ba      	ldr	r2, [r7, #8]
 8012588:	4413      	add	r3, r2
 801258a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801258c:	2208      	movs	r2, #8
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	1a9b      	subs	r3, r3, r2
 8012592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	f023 0307 	bic.w	r3, r3, #7
 801259a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	4a15      	ldr	r2, [pc, #84]	; (80125f4 <prvHeapInit+0xb4>)
 80125a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80125a2:	4b14      	ldr	r3, [pc, #80]	; (80125f4 <prvHeapInit+0xb4>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	2200      	movs	r2, #0
 80125a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80125aa:	4b12      	ldr	r3, [pc, #72]	; (80125f4 <prvHeapInit+0xb4>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	2200      	movs	r2, #0
 80125b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	68fa      	ldr	r2, [r7, #12]
 80125ba:	1ad2      	subs	r2, r2, r3
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80125c0:	4b0c      	ldr	r3, [pc, #48]	; (80125f4 <prvHeapInit+0xb4>)
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	4a0a      	ldr	r2, [pc, #40]	; (80125f8 <prvHeapInit+0xb8>)
 80125ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	4a09      	ldr	r2, [pc, #36]	; (80125fc <prvHeapInit+0xbc>)
 80125d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80125d8:	4b09      	ldr	r3, [pc, #36]	; (8012600 <prvHeapInit+0xc0>)
 80125da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80125de:	601a      	str	r2, [r3, #0]
}
 80125e0:	bf00      	nop
 80125e2:	3714      	adds	r7, #20
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr
 80125ec:	20000ed0 	.word	0x20000ed0
 80125f0:	20008ed0 	.word	0x20008ed0
 80125f4:	20008ed8 	.word	0x20008ed8
 80125f8:	20008ee0 	.word	0x20008ee0
 80125fc:	20008edc 	.word	0x20008edc
 8012600:	20008ee4 	.word	0x20008ee4

08012604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801260c:	4b28      	ldr	r3, [pc, #160]	; (80126b0 <prvInsertBlockIntoFreeList+0xac>)
 801260e:	60fb      	str	r3, [r7, #12]
 8012610:	e002      	b.n	8012618 <prvInsertBlockIntoFreeList+0x14>
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	429a      	cmp	r2, r3
 8012620:	d8f7      	bhi.n	8012612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	4413      	add	r3, r2
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	429a      	cmp	r2, r3
 8012632:	d108      	bne.n	8012646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	685a      	ldr	r2, [r3, #4]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	441a      	add	r2, r3
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	68ba      	ldr	r2, [r7, #8]
 8012650:	441a      	add	r2, r3
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	429a      	cmp	r2, r3
 8012658:	d118      	bne.n	801268c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	4b15      	ldr	r3, [pc, #84]	; (80126b4 <prvInsertBlockIntoFreeList+0xb0>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	429a      	cmp	r2, r3
 8012664:	d00d      	beq.n	8012682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	685a      	ldr	r2, [r3, #4]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	441a      	add	r2, r3
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	e008      	b.n	8012694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012682:	4b0c      	ldr	r3, [pc, #48]	; (80126b4 <prvInsertBlockIntoFreeList+0xb0>)
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	601a      	str	r2, [r3, #0]
 801268a:	e003      	b.n	8012694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	429a      	cmp	r2, r3
 801269a:	d002      	beq.n	80126a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80126a2:	bf00      	nop
 80126a4:	3714      	adds	r7, #20
 80126a6:	46bd      	mov	sp, r7
 80126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	20008ed0 	.word	0x20008ed0
 80126b4:	20008ed8 	.word	0x20008ed8

080126b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80126bc:	2201      	movs	r2, #1
 80126be:	490e      	ldr	r1, [pc, #56]	; (80126f8 <MX_USB_HOST_Init+0x40>)
 80126c0:	480e      	ldr	r0, [pc, #56]	; (80126fc <MX_USB_HOST_Init+0x44>)
 80126c2:	f7fb fe0b 	bl	800e2dc <USBH_Init>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d001      	beq.n	80126d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80126cc:	f7ef f9b2 	bl	8001a34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80126d0:	490b      	ldr	r1, [pc, #44]	; (8012700 <MX_USB_HOST_Init+0x48>)
 80126d2:	480a      	ldr	r0, [pc, #40]	; (80126fc <MX_USB_HOST_Init+0x44>)
 80126d4:	f7fb fed7 	bl	800e486 <USBH_RegisterClass>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d001      	beq.n	80126e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80126de:	f7ef f9a9 	bl	8001a34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80126e2:	4806      	ldr	r0, [pc, #24]	; (80126fc <MX_USB_HOST_Init+0x44>)
 80126e4:	f7fb ff5b 	bl	800e59e <USBH_Start>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d001      	beq.n	80126f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80126ee:	f7ef f9a1 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80126f2:	bf00      	nop
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	08012705 	.word	0x08012705
 80126fc:	20008ee8 	.word	0x20008ee8
 8012700:	2000000c 	.word	0x2000000c

08012704 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	460b      	mov	r3, r1
 801270e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012710:	78fb      	ldrb	r3, [r7, #3]
 8012712:	3b01      	subs	r3, #1
 8012714:	2b04      	cmp	r3, #4
 8012716:	d819      	bhi.n	801274c <USBH_UserProcess+0x48>
 8012718:	a201      	add	r2, pc, #4	; (adr r2, 8012720 <USBH_UserProcess+0x1c>)
 801271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801271e:	bf00      	nop
 8012720:	0801274d 	.word	0x0801274d
 8012724:	0801273d 	.word	0x0801273d
 8012728:	0801274d 	.word	0x0801274d
 801272c:	08012745 	.word	0x08012745
 8012730:	08012735 	.word	0x08012735
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012734:	4b09      	ldr	r3, [pc, #36]	; (801275c <USBH_UserProcess+0x58>)
 8012736:	2203      	movs	r2, #3
 8012738:	701a      	strb	r2, [r3, #0]
  break;
 801273a:	e008      	b.n	801274e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801273c:	4b07      	ldr	r3, [pc, #28]	; (801275c <USBH_UserProcess+0x58>)
 801273e:	2202      	movs	r2, #2
 8012740:	701a      	strb	r2, [r3, #0]
  break;
 8012742:	e004      	b.n	801274e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012744:	4b05      	ldr	r3, [pc, #20]	; (801275c <USBH_UserProcess+0x58>)
 8012746:	2201      	movs	r2, #1
 8012748:	701a      	strb	r2, [r3, #0]
  break;
 801274a:	e000      	b.n	801274e <USBH_UserProcess+0x4a>

  default:
  break;
 801274c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801274e:	bf00      	nop
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	200092cc 	.word	0x200092cc

08012760 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08a      	sub	sp, #40	; 0x28
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012768:	f107 0314 	add.w	r3, r7, #20
 801276c:	2200      	movs	r2, #0
 801276e:	601a      	str	r2, [r3, #0]
 8012770:	605a      	str	r2, [r3, #4]
 8012772:	609a      	str	r2, [r3, #8]
 8012774:	60da      	str	r2, [r3, #12]
 8012776:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012780:	d13c      	bne.n	80127fc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012782:	4b20      	ldr	r3, [pc, #128]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 8012784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012786:	4a1f      	ldr	r2, [pc, #124]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 8012788:	f043 0301 	orr.w	r3, r3, #1
 801278c:	6313      	str	r3, [r2, #48]	; 0x30
 801278e:	4b1d      	ldr	r3, [pc, #116]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 8012790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012792:	f003 0301 	and.w	r3, r3, #1
 8012796:	613b      	str	r3, [r7, #16]
 8012798:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801279a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127a0:	2302      	movs	r3, #2
 80127a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127a4:	2300      	movs	r3, #0
 80127a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127a8:	2303      	movs	r3, #3
 80127aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80127ac:	230a      	movs	r3, #10
 80127ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80127b0:	f107 0314 	add.w	r3, r7, #20
 80127b4:	4619      	mov	r1, r3
 80127b6:	4814      	ldr	r0, [pc, #80]	; (8012808 <HAL_HCD_MspInit+0xa8>)
 80127b8:	f7f1 fdde 	bl	8004378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80127bc:	4b11      	ldr	r3, [pc, #68]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 80127be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127c0:	4a10      	ldr	r2, [pc, #64]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 80127c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127c6:	6353      	str	r3, [r2, #52]	; 0x34
 80127c8:	4b0e      	ldr	r3, [pc, #56]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 80127ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127d0:	60fb      	str	r3, [r7, #12]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	4b0b      	ldr	r3, [pc, #44]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 80127d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127d8:	4a0a      	ldr	r2, [pc, #40]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 80127da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80127de:	6453      	str	r3, [r2, #68]	; 0x44
 80127e0:	4b08      	ldr	r3, [pc, #32]	; (8012804 <HAL_HCD_MspInit+0xa4>)
 80127e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127e8:	60bb      	str	r3, [r7, #8]
 80127ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80127ec:	2200      	movs	r2, #0
 80127ee:	2105      	movs	r1, #5
 80127f0:	2043      	movs	r0, #67	; 0x43
 80127f2:	f7f0 fe87 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80127f6:	2043      	movs	r0, #67	; 0x43
 80127f8:	f7f0 fea0 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80127fc:	bf00      	nop
 80127fe:	3728      	adds	r7, #40	; 0x28
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	40023800 	.word	0x40023800
 8012808:	40020000 	.word	0x40020000

0801280c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801281a:	4618      	mov	r0, r3
 801281c:	f7fc fb77 	bl	800ef0e <USBH_LL_IncTimer>
}
 8012820:	bf00      	nop
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012836:	4618      	mov	r0, r3
 8012838:	f7fc fbbb 	bl	800efb2 <USBH_LL_Connect>
}
 801283c:	bf00      	nop
 801283e:	3708      	adds	r7, #8
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012852:	4618      	mov	r0, r3
 8012854:	f7fc fbd0 	bl	800eff8 <USBH_LL_Disconnect>
}
 8012858:	bf00      	nop
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	460b      	mov	r3, r1
 801286a:	70fb      	strb	r3, [r7, #3]
 801286c:	4613      	mov	r3, r2
 801286e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012876:	4618      	mov	r0, r3
 8012878:	f7fc fc05 	bl	800f086 <USBH_LL_NotifyURBChange>
#endif
}
 801287c:	bf00      	nop
 801287e:	3708      	adds	r7, #8
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012892:	4618      	mov	r0, r3
 8012894:	f7fc fb65 	bl	800ef62 <USBH_LL_PortEnabled>
}
 8012898:	bf00      	nop
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fc fb71 	bl	800ef96 <USBH_LL_PortDisabled>
}
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d12a      	bne.n	8012924 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80128ce:	4a18      	ldr	r2, [pc, #96]	; (8012930 <USBH_LL_Init+0x74>)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	4a15      	ldr	r2, [pc, #84]	; (8012930 <USBH_LL_Init+0x74>)
 80128da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80128de:	4b14      	ldr	r3, [pc, #80]	; (8012930 <USBH_LL_Init+0x74>)
 80128e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80128e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80128e6:	4b12      	ldr	r3, [pc, #72]	; (8012930 <USBH_LL_Init+0x74>)
 80128e8:	2208      	movs	r2, #8
 80128ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80128ec:	4b10      	ldr	r3, [pc, #64]	; (8012930 <USBH_LL_Init+0x74>)
 80128ee:	2201      	movs	r2, #1
 80128f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80128f2:	4b0f      	ldr	r3, [pc, #60]	; (8012930 <USBH_LL_Init+0x74>)
 80128f4:	2200      	movs	r2, #0
 80128f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80128f8:	4b0d      	ldr	r3, [pc, #52]	; (8012930 <USBH_LL_Init+0x74>)
 80128fa:	2202      	movs	r2, #2
 80128fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80128fe:	4b0c      	ldr	r3, [pc, #48]	; (8012930 <USBH_LL_Init+0x74>)
 8012900:	2200      	movs	r2, #0
 8012902:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012904:	480a      	ldr	r0, [pc, #40]	; (8012930 <USBH_LL_Init+0x74>)
 8012906:	f7f1 ff14 	bl	8004732 <HAL_HCD_Init>
 801290a:	4603      	mov	r3, r0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d001      	beq.n	8012914 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012910:	f7ef f890 	bl	8001a34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012914:	4806      	ldr	r0, [pc, #24]	; (8012930 <USBH_LL_Init+0x74>)
 8012916:	f7f2 faf8 	bl	8004f0a <HAL_HCD_GetCurrentFrame>
 801291a:	4603      	mov	r3, r0
 801291c:	4619      	mov	r1, r3
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7fc fae6 	bl	800eef0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012924:	2300      	movs	r3, #0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3708      	adds	r7, #8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	200092d0 	.word	0x200092d0

08012934 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012940:	2300      	movs	r3, #0
 8012942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801294a:	4618      	mov	r0, r3
 801294c:	f7f2 fa67 	bl	8004e1e <HAL_HCD_Start>
 8012950:	4603      	mov	r3, r0
 8012952:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012954:	7bfb      	ldrb	r3, [r7, #15]
 8012956:	4618      	mov	r0, r3
 8012958:	f000 f95c 	bl	8012c14 <USBH_Get_USB_Status>
 801295c:	4603      	mov	r3, r0
 801295e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012960:	7bbb      	ldrb	r3, [r7, #14]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801296a:	b580      	push	{r7, lr}
 801296c:	b084      	sub	sp, #16
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012976:	2300      	movs	r3, #0
 8012978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012980:	4618      	mov	r0, r3
 8012982:	f7f2 fa6f 	bl	8004e64 <HAL_HCD_Stop>
 8012986:	4603      	mov	r3, r0
 8012988:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	4618      	mov	r0, r3
 801298e:	f000 f941 	bl	8012c14 <USBH_Get_USB_Status>
 8012992:	4603      	mov	r3, r0
 8012994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012996:	7bbb      	ldrb	r3, [r7, #14]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80129a8:	2301      	movs	r3, #1
 80129aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7f2 fab7 	bl	8004f26 <HAL_HCD_GetCurrentSpeed>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d00c      	beq.n	80129d8 <USBH_LL_GetSpeed+0x38>
 80129be:	2b02      	cmp	r3, #2
 80129c0:	d80d      	bhi.n	80129de <USBH_LL_GetSpeed+0x3e>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d002      	beq.n	80129cc <USBH_LL_GetSpeed+0x2c>
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d003      	beq.n	80129d2 <USBH_LL_GetSpeed+0x32>
 80129ca:	e008      	b.n	80129de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80129cc:	2300      	movs	r3, #0
 80129ce:	73fb      	strb	r3, [r7, #15]
    break;
 80129d0:	e008      	b.n	80129e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80129d2:	2301      	movs	r3, #1
 80129d4:	73fb      	strb	r3, [r7, #15]
    break;
 80129d6:	e005      	b.n	80129e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80129d8:	2302      	movs	r3, #2
 80129da:	73fb      	strb	r3, [r7, #15]
    break;
 80129dc:	e002      	b.n	80129e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80129de:	2301      	movs	r3, #1
 80129e0:	73fb      	strb	r3, [r7, #15]
    break;
 80129e2:	bf00      	nop
  }
  return  speed;
 80129e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b084      	sub	sp, #16
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129f6:	2300      	movs	r3, #0
 80129f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129fa:	2300      	movs	r3, #0
 80129fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f2 fa4a 	bl	8004e9e <HAL_HCD_ResetPort>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a0e:	7bfb      	ldrb	r3, [r7, #15]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f000 f8ff 	bl	8012c14 <USBH_Get_USB_Status>
 8012a16:	4603      	mov	r3, r0
 8012a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a36:	78fa      	ldrb	r2, [r7, #3]
 8012a38:	4611      	mov	r1, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f2 fa51 	bl	8004ee2 <HAL_HCD_HC_GetXferCount>
 8012a40:	4603      	mov	r3, r0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3708      	adds	r7, #8
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}

08012a4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012a4a:	b590      	push	{r4, r7, lr}
 8012a4c:	b089      	sub	sp, #36	; 0x24
 8012a4e:	af04      	add	r7, sp, #16
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	4608      	mov	r0, r1
 8012a54:	4611      	mov	r1, r2
 8012a56:	461a      	mov	r2, r3
 8012a58:	4603      	mov	r3, r0
 8012a5a:	70fb      	strb	r3, [r7, #3]
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	70bb      	strb	r3, [r7, #2]
 8012a60:	4613      	mov	r3, r2
 8012a62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a64:	2300      	movs	r3, #0
 8012a66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012a72:	787c      	ldrb	r4, [r7, #1]
 8012a74:	78ba      	ldrb	r2, [r7, #2]
 8012a76:	78f9      	ldrb	r1, [r7, #3]
 8012a78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012a7a:	9302      	str	r3, [sp, #8]
 8012a7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012a80:	9301      	str	r3, [sp, #4]
 8012a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	4623      	mov	r3, r4
 8012a8a:	f7f1 feb4 	bl	80047f6 <HAL_HCD_HC_Init>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a92:	7bfb      	ldrb	r3, [r7, #15]
 8012a94:	4618      	mov	r0, r3
 8012a96:	f000 f8bd 	bl	8012c14 <USBH_Get_USB_Status>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3714      	adds	r7, #20
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd90      	pop	{r4, r7, pc}

08012aa8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012ac2:	78fa      	ldrb	r2, [r7, #3]
 8012ac4:	4611      	mov	r1, r2
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7f1 ff24 	bl	8004914 <HAL_HCD_HC_Halt>
 8012acc:	4603      	mov	r3, r0
 8012ace:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ad0:	7bfb      	ldrb	r3, [r7, #15]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f000 f89e 	bl	8012c14 <USBH_Get_USB_Status>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3710      	adds	r7, #16
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012ae6:	b590      	push	{r4, r7, lr}
 8012ae8:	b089      	sub	sp, #36	; 0x24
 8012aea:	af04      	add	r7, sp, #16
 8012aec:	6078      	str	r0, [r7, #4]
 8012aee:	4608      	mov	r0, r1
 8012af0:	4611      	mov	r1, r2
 8012af2:	461a      	mov	r2, r3
 8012af4:	4603      	mov	r3, r0
 8012af6:	70fb      	strb	r3, [r7, #3]
 8012af8:	460b      	mov	r3, r1
 8012afa:	70bb      	strb	r3, [r7, #2]
 8012afc:	4613      	mov	r3, r2
 8012afe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b00:	2300      	movs	r3, #0
 8012b02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b04:	2300      	movs	r3, #0
 8012b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012b0e:	787c      	ldrb	r4, [r7, #1]
 8012b10:	78ba      	ldrb	r2, [r7, #2]
 8012b12:	78f9      	ldrb	r1, [r7, #3]
 8012b14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012b18:	9303      	str	r3, [sp, #12]
 8012b1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012b1c:	9302      	str	r3, [sp, #8]
 8012b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b20:	9301      	str	r3, [sp, #4]
 8012b22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b26:	9300      	str	r3, [sp, #0]
 8012b28:	4623      	mov	r3, r4
 8012b2a:	f7f1 ff17 	bl	800495c <HAL_HCD_HC_SubmitRequest>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012b32:	7bfb      	ldrb	r3, [r7, #15]
 8012b34:	4618      	mov	r0, r3
 8012b36:	f000 f86d 	bl	8012c14 <USBH_Get_USB_Status>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3714      	adds	r7, #20
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd90      	pop	{r4, r7, pc}

08012b48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	460b      	mov	r3, r1
 8012b52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012b5a:	78fa      	ldrb	r2, [r7, #3]
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7f2 f9ab 	bl	8004eba <HAL_HCD_HC_GetURBState>
 8012b64:	4603      	mov	r3, r0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012b6e:	b580      	push	{r7, lr}
 8012b70:	b082      	sub	sp, #8
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
 8012b76:	460b      	mov	r3, r1
 8012b78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d103      	bne.n	8012b8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012b84:	78fb      	ldrb	r3, [r7, #3]
 8012b86:	4618      	mov	r0, r3
 8012b88:	f000 f870 	bl	8012c6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012b8c:	20c8      	movs	r0, #200	; 0xc8
 8012b8e:	f7f0 f949 	bl	8002e24 <HAL_Delay>
  return USBH_OK;
 8012b92:	2300      	movs	r3, #0
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3708      	adds	r7, #8
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b085      	sub	sp, #20
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	70fb      	strb	r3, [r7, #3]
 8012ba8:	4613      	mov	r3, r2
 8012baa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012bb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012bb4:	78fb      	ldrb	r3, [r7, #3]
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	212c      	movs	r1, #44	; 0x2c
 8012bba:	fb01 f303 	mul.w	r3, r1, r3
 8012bbe:	4413      	add	r3, r2
 8012bc0:	333b      	adds	r3, #59	; 0x3b
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d009      	beq.n	8012bdc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012bc8:	78fb      	ldrb	r3, [r7, #3]
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	212c      	movs	r1, #44	; 0x2c
 8012bce:	fb01 f303 	mul.w	r3, r1, r3
 8012bd2:	4413      	add	r3, r2
 8012bd4:	3354      	adds	r3, #84	; 0x54
 8012bd6:	78ba      	ldrb	r2, [r7, #2]
 8012bd8:	701a      	strb	r2, [r3, #0]
 8012bda:	e008      	b.n	8012bee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012bdc:	78fb      	ldrb	r3, [r7, #3]
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	212c      	movs	r1, #44	; 0x2c
 8012be2:	fb01 f303 	mul.w	r3, r1, r3
 8012be6:	4413      	add	r3, r2
 8012be8:	3355      	adds	r3, #85	; 0x55
 8012bea:	78ba      	ldrb	r2, [r7, #2]
 8012bec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012bee:	2300      	movs	r3, #0
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3714      	adds	r7, #20
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr

08012bfc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7f0 f90d 	bl	8002e24 <HAL_Delay>
}
 8012c0a:	bf00      	nop
 8012c0c:	3708      	adds	r7, #8
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
	...

08012c14 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012c14:	b480      	push	{r7}
 8012c16:	b085      	sub	sp, #20
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012c22:	79fb      	ldrb	r3, [r7, #7]
 8012c24:	2b03      	cmp	r3, #3
 8012c26:	d817      	bhi.n	8012c58 <USBH_Get_USB_Status+0x44>
 8012c28:	a201      	add	r2, pc, #4	; (adr r2, 8012c30 <USBH_Get_USB_Status+0x1c>)
 8012c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c2e:	bf00      	nop
 8012c30:	08012c41 	.word	0x08012c41
 8012c34:	08012c47 	.word	0x08012c47
 8012c38:	08012c4d 	.word	0x08012c4d
 8012c3c:	08012c53 	.word	0x08012c53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012c40:	2300      	movs	r3, #0
 8012c42:	73fb      	strb	r3, [r7, #15]
    break;
 8012c44:	e00b      	b.n	8012c5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012c46:	2302      	movs	r3, #2
 8012c48:	73fb      	strb	r3, [r7, #15]
    break;
 8012c4a:	e008      	b.n	8012c5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8012c50:	e005      	b.n	8012c5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012c52:	2302      	movs	r3, #2
 8012c54:	73fb      	strb	r3, [r7, #15]
    break;
 8012c56:	e002      	b.n	8012c5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012c58:	2302      	movs	r3, #2
 8012c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8012c5c:	bf00      	nop
  }
  return usb_status;
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3714      	adds	r7, #20
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	4603      	mov	r3, r0
 8012c74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012c76:	79fb      	ldrb	r3, [r7, #7]
 8012c78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012c7a:	79fb      	ldrb	r3, [r7, #7]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012c80:	2300      	movs	r3, #0
 8012c82:	73fb      	strb	r3, [r7, #15]
 8012c84:	e001      	b.n	8012c8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8012c86:	2301      	movs	r3, #1
 8012c88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8012c8a:	7bfb      	ldrb	r3, [r7, #15]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	2120      	movs	r1, #32
 8012c90:	4803      	ldr	r0, [pc, #12]	; (8012ca0 <MX_DriverVbusFS+0x34>)
 8012c92:	f7f1 fd35 	bl	8004700 <HAL_GPIO_WritePin>
}
 8012c96:	bf00      	nop
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	40020c00 	.word	0x40020c00

08012ca4 <malloc>:
 8012ca4:	4b02      	ldr	r3, [pc, #8]	; (8012cb0 <malloc+0xc>)
 8012ca6:	4601      	mov	r1, r0
 8012ca8:	6818      	ldr	r0, [r3, #0]
 8012caa:	f000 b82b 	b.w	8012d04 <_malloc_r>
 8012cae:	bf00      	nop
 8012cb0:	2000007c 	.word	0x2000007c

08012cb4 <free>:
 8012cb4:	4b02      	ldr	r3, [pc, #8]	; (8012cc0 <free+0xc>)
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	6818      	ldr	r0, [r3, #0]
 8012cba:	f000 b901 	b.w	8012ec0 <_free_r>
 8012cbe:	bf00      	nop
 8012cc0:	2000007c 	.word	0x2000007c

08012cc4 <sbrk_aligned>:
 8012cc4:	b570      	push	{r4, r5, r6, lr}
 8012cc6:	4e0e      	ldr	r6, [pc, #56]	; (8012d00 <sbrk_aligned+0x3c>)
 8012cc8:	460c      	mov	r4, r1
 8012cca:	6831      	ldr	r1, [r6, #0]
 8012ccc:	4605      	mov	r5, r0
 8012cce:	b911      	cbnz	r1, 8012cd6 <sbrk_aligned+0x12>
 8012cd0:	f000 f8ac 	bl	8012e2c <_sbrk_r>
 8012cd4:	6030      	str	r0, [r6, #0]
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4628      	mov	r0, r5
 8012cda:	f000 f8a7 	bl	8012e2c <_sbrk_r>
 8012cde:	1c43      	adds	r3, r0, #1
 8012ce0:	d00a      	beq.n	8012cf8 <sbrk_aligned+0x34>
 8012ce2:	1cc4      	adds	r4, r0, #3
 8012ce4:	f024 0403 	bic.w	r4, r4, #3
 8012ce8:	42a0      	cmp	r0, r4
 8012cea:	d007      	beq.n	8012cfc <sbrk_aligned+0x38>
 8012cec:	1a21      	subs	r1, r4, r0
 8012cee:	4628      	mov	r0, r5
 8012cf0:	f000 f89c 	bl	8012e2c <_sbrk_r>
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d101      	bne.n	8012cfc <sbrk_aligned+0x38>
 8012cf8:	f04f 34ff 	mov.w	r4, #4294967295
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	200095d8 	.word	0x200095d8

08012d04 <_malloc_r>:
 8012d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d08:	1ccd      	adds	r5, r1, #3
 8012d0a:	f025 0503 	bic.w	r5, r5, #3
 8012d0e:	3508      	adds	r5, #8
 8012d10:	2d0c      	cmp	r5, #12
 8012d12:	bf38      	it	cc
 8012d14:	250c      	movcc	r5, #12
 8012d16:	2d00      	cmp	r5, #0
 8012d18:	4607      	mov	r7, r0
 8012d1a:	db01      	blt.n	8012d20 <_malloc_r+0x1c>
 8012d1c:	42a9      	cmp	r1, r5
 8012d1e:	d905      	bls.n	8012d2c <_malloc_r+0x28>
 8012d20:	230c      	movs	r3, #12
 8012d22:	603b      	str	r3, [r7, #0]
 8012d24:	2600      	movs	r6, #0
 8012d26:	4630      	mov	r0, r6
 8012d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012e00 <_malloc_r+0xfc>
 8012d30:	f000 f868 	bl	8012e04 <__malloc_lock>
 8012d34:	f8d8 3000 	ldr.w	r3, [r8]
 8012d38:	461c      	mov	r4, r3
 8012d3a:	bb5c      	cbnz	r4, 8012d94 <_malloc_r+0x90>
 8012d3c:	4629      	mov	r1, r5
 8012d3e:	4638      	mov	r0, r7
 8012d40:	f7ff ffc0 	bl	8012cc4 <sbrk_aligned>
 8012d44:	1c43      	adds	r3, r0, #1
 8012d46:	4604      	mov	r4, r0
 8012d48:	d155      	bne.n	8012df6 <_malloc_r+0xf2>
 8012d4a:	f8d8 4000 	ldr.w	r4, [r8]
 8012d4e:	4626      	mov	r6, r4
 8012d50:	2e00      	cmp	r6, #0
 8012d52:	d145      	bne.n	8012de0 <_malloc_r+0xdc>
 8012d54:	2c00      	cmp	r4, #0
 8012d56:	d048      	beq.n	8012dea <_malloc_r+0xe6>
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	4631      	mov	r1, r6
 8012d5c:	4638      	mov	r0, r7
 8012d5e:	eb04 0903 	add.w	r9, r4, r3
 8012d62:	f000 f863 	bl	8012e2c <_sbrk_r>
 8012d66:	4581      	cmp	r9, r0
 8012d68:	d13f      	bne.n	8012dea <_malloc_r+0xe6>
 8012d6a:	6821      	ldr	r1, [r4, #0]
 8012d6c:	1a6d      	subs	r5, r5, r1
 8012d6e:	4629      	mov	r1, r5
 8012d70:	4638      	mov	r0, r7
 8012d72:	f7ff ffa7 	bl	8012cc4 <sbrk_aligned>
 8012d76:	3001      	adds	r0, #1
 8012d78:	d037      	beq.n	8012dea <_malloc_r+0xe6>
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	442b      	add	r3, r5
 8012d7e:	6023      	str	r3, [r4, #0]
 8012d80:	f8d8 3000 	ldr.w	r3, [r8]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d038      	beq.n	8012dfa <_malloc_r+0xf6>
 8012d88:	685a      	ldr	r2, [r3, #4]
 8012d8a:	42a2      	cmp	r2, r4
 8012d8c:	d12b      	bne.n	8012de6 <_malloc_r+0xe2>
 8012d8e:	2200      	movs	r2, #0
 8012d90:	605a      	str	r2, [r3, #4]
 8012d92:	e00f      	b.n	8012db4 <_malloc_r+0xb0>
 8012d94:	6822      	ldr	r2, [r4, #0]
 8012d96:	1b52      	subs	r2, r2, r5
 8012d98:	d41f      	bmi.n	8012dda <_malloc_r+0xd6>
 8012d9a:	2a0b      	cmp	r2, #11
 8012d9c:	d917      	bls.n	8012dce <_malloc_r+0xca>
 8012d9e:	1961      	adds	r1, r4, r5
 8012da0:	42a3      	cmp	r3, r4
 8012da2:	6025      	str	r5, [r4, #0]
 8012da4:	bf18      	it	ne
 8012da6:	6059      	strne	r1, [r3, #4]
 8012da8:	6863      	ldr	r3, [r4, #4]
 8012daa:	bf08      	it	eq
 8012dac:	f8c8 1000 	streq.w	r1, [r8]
 8012db0:	5162      	str	r2, [r4, r5]
 8012db2:	604b      	str	r3, [r1, #4]
 8012db4:	4638      	mov	r0, r7
 8012db6:	f104 060b 	add.w	r6, r4, #11
 8012dba:	f000 f829 	bl	8012e10 <__malloc_unlock>
 8012dbe:	f026 0607 	bic.w	r6, r6, #7
 8012dc2:	1d23      	adds	r3, r4, #4
 8012dc4:	1af2      	subs	r2, r6, r3
 8012dc6:	d0ae      	beq.n	8012d26 <_malloc_r+0x22>
 8012dc8:	1b9b      	subs	r3, r3, r6
 8012dca:	50a3      	str	r3, [r4, r2]
 8012dcc:	e7ab      	b.n	8012d26 <_malloc_r+0x22>
 8012dce:	42a3      	cmp	r3, r4
 8012dd0:	6862      	ldr	r2, [r4, #4]
 8012dd2:	d1dd      	bne.n	8012d90 <_malloc_r+0x8c>
 8012dd4:	f8c8 2000 	str.w	r2, [r8]
 8012dd8:	e7ec      	b.n	8012db4 <_malloc_r+0xb0>
 8012dda:	4623      	mov	r3, r4
 8012ddc:	6864      	ldr	r4, [r4, #4]
 8012dde:	e7ac      	b.n	8012d3a <_malloc_r+0x36>
 8012de0:	4634      	mov	r4, r6
 8012de2:	6876      	ldr	r6, [r6, #4]
 8012de4:	e7b4      	b.n	8012d50 <_malloc_r+0x4c>
 8012de6:	4613      	mov	r3, r2
 8012de8:	e7cc      	b.n	8012d84 <_malloc_r+0x80>
 8012dea:	230c      	movs	r3, #12
 8012dec:	603b      	str	r3, [r7, #0]
 8012dee:	4638      	mov	r0, r7
 8012df0:	f000 f80e 	bl	8012e10 <__malloc_unlock>
 8012df4:	e797      	b.n	8012d26 <_malloc_r+0x22>
 8012df6:	6025      	str	r5, [r4, #0]
 8012df8:	e7dc      	b.n	8012db4 <_malloc_r+0xb0>
 8012dfa:	605b      	str	r3, [r3, #4]
 8012dfc:	deff      	udf	#255	; 0xff
 8012dfe:	bf00      	nop
 8012e00:	200095d4 	.word	0x200095d4

08012e04 <__malloc_lock>:
 8012e04:	4801      	ldr	r0, [pc, #4]	; (8012e0c <__malloc_lock+0x8>)
 8012e06:	f000 b84b 	b.w	8012ea0 <__retarget_lock_acquire_recursive>
 8012e0a:	bf00      	nop
 8012e0c:	20009718 	.word	0x20009718

08012e10 <__malloc_unlock>:
 8012e10:	4801      	ldr	r0, [pc, #4]	; (8012e18 <__malloc_unlock+0x8>)
 8012e12:	f000 b846 	b.w	8012ea2 <__retarget_lock_release_recursive>
 8012e16:	bf00      	nop
 8012e18:	20009718 	.word	0x20009718

08012e1c <memset>:
 8012e1c:	4402      	add	r2, r0
 8012e1e:	4603      	mov	r3, r0
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d100      	bne.n	8012e26 <memset+0xa>
 8012e24:	4770      	bx	lr
 8012e26:	f803 1b01 	strb.w	r1, [r3], #1
 8012e2a:	e7f9      	b.n	8012e20 <memset+0x4>

08012e2c <_sbrk_r>:
 8012e2c:	b538      	push	{r3, r4, r5, lr}
 8012e2e:	4d06      	ldr	r5, [pc, #24]	; (8012e48 <_sbrk_r+0x1c>)
 8012e30:	2300      	movs	r3, #0
 8012e32:	4604      	mov	r4, r0
 8012e34:	4608      	mov	r0, r1
 8012e36:	602b      	str	r3, [r5, #0]
 8012e38:	f7ef ff56 	bl	8002ce8 <_sbrk>
 8012e3c:	1c43      	adds	r3, r0, #1
 8012e3e:	d102      	bne.n	8012e46 <_sbrk_r+0x1a>
 8012e40:	682b      	ldr	r3, [r5, #0]
 8012e42:	b103      	cbz	r3, 8012e46 <_sbrk_r+0x1a>
 8012e44:	6023      	str	r3, [r4, #0]
 8012e46:	bd38      	pop	{r3, r4, r5, pc}
 8012e48:	20009714 	.word	0x20009714

08012e4c <__errno>:
 8012e4c:	4b01      	ldr	r3, [pc, #4]	; (8012e54 <__errno+0x8>)
 8012e4e:	6818      	ldr	r0, [r3, #0]
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	2000007c 	.word	0x2000007c

08012e58 <__libc_init_array>:
 8012e58:	b570      	push	{r4, r5, r6, lr}
 8012e5a:	4d0d      	ldr	r5, [pc, #52]	; (8012e90 <__libc_init_array+0x38>)
 8012e5c:	4c0d      	ldr	r4, [pc, #52]	; (8012e94 <__libc_init_array+0x3c>)
 8012e5e:	1b64      	subs	r4, r4, r5
 8012e60:	10a4      	asrs	r4, r4, #2
 8012e62:	2600      	movs	r6, #0
 8012e64:	42a6      	cmp	r6, r4
 8012e66:	d109      	bne.n	8012e7c <__libc_init_array+0x24>
 8012e68:	4d0b      	ldr	r5, [pc, #44]	; (8012e98 <__libc_init_array+0x40>)
 8012e6a:	4c0c      	ldr	r4, [pc, #48]	; (8012e9c <__libc_init_array+0x44>)
 8012e6c:	f000 f874 	bl	8012f58 <_init>
 8012e70:	1b64      	subs	r4, r4, r5
 8012e72:	10a4      	asrs	r4, r4, #2
 8012e74:	2600      	movs	r6, #0
 8012e76:	42a6      	cmp	r6, r4
 8012e78:	d105      	bne.n	8012e86 <__libc_init_array+0x2e>
 8012e7a:	bd70      	pop	{r4, r5, r6, pc}
 8012e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e80:	4798      	blx	r3
 8012e82:	3601      	adds	r6, #1
 8012e84:	e7ee      	b.n	8012e64 <__libc_init_array+0xc>
 8012e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e8a:	4798      	blx	r3
 8012e8c:	3601      	adds	r6, #1
 8012e8e:	e7f2      	b.n	8012e76 <__libc_init_array+0x1e>
 8012e90:	08013020 	.word	0x08013020
 8012e94:	08013020 	.word	0x08013020
 8012e98:	08013020 	.word	0x08013020
 8012e9c:	08013024 	.word	0x08013024

08012ea0 <__retarget_lock_acquire_recursive>:
 8012ea0:	4770      	bx	lr

08012ea2 <__retarget_lock_release_recursive>:
 8012ea2:	4770      	bx	lr

08012ea4 <memcpy>:
 8012ea4:	440a      	add	r2, r1
 8012ea6:	4291      	cmp	r1, r2
 8012ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012eac:	d100      	bne.n	8012eb0 <memcpy+0xc>
 8012eae:	4770      	bx	lr
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eba:	4291      	cmp	r1, r2
 8012ebc:	d1f9      	bne.n	8012eb2 <memcpy+0xe>
 8012ebe:	bd10      	pop	{r4, pc}

08012ec0 <_free_r>:
 8012ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ec2:	2900      	cmp	r1, #0
 8012ec4:	d044      	beq.n	8012f50 <_free_r+0x90>
 8012ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012eca:	9001      	str	r0, [sp, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f1a1 0404 	sub.w	r4, r1, #4
 8012ed2:	bfb8      	it	lt
 8012ed4:	18e4      	addlt	r4, r4, r3
 8012ed6:	f7ff ff95 	bl	8012e04 <__malloc_lock>
 8012eda:	4a1e      	ldr	r2, [pc, #120]	; (8012f54 <_free_r+0x94>)
 8012edc:	9801      	ldr	r0, [sp, #4]
 8012ede:	6813      	ldr	r3, [r2, #0]
 8012ee0:	b933      	cbnz	r3, 8012ef0 <_free_r+0x30>
 8012ee2:	6063      	str	r3, [r4, #4]
 8012ee4:	6014      	str	r4, [r2, #0]
 8012ee6:	b003      	add	sp, #12
 8012ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012eec:	f7ff bf90 	b.w	8012e10 <__malloc_unlock>
 8012ef0:	42a3      	cmp	r3, r4
 8012ef2:	d908      	bls.n	8012f06 <_free_r+0x46>
 8012ef4:	6825      	ldr	r5, [r4, #0]
 8012ef6:	1961      	adds	r1, r4, r5
 8012ef8:	428b      	cmp	r3, r1
 8012efa:	bf01      	itttt	eq
 8012efc:	6819      	ldreq	r1, [r3, #0]
 8012efe:	685b      	ldreq	r3, [r3, #4]
 8012f00:	1949      	addeq	r1, r1, r5
 8012f02:	6021      	streq	r1, [r4, #0]
 8012f04:	e7ed      	b.n	8012ee2 <_free_r+0x22>
 8012f06:	461a      	mov	r2, r3
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	b10b      	cbz	r3, 8012f10 <_free_r+0x50>
 8012f0c:	42a3      	cmp	r3, r4
 8012f0e:	d9fa      	bls.n	8012f06 <_free_r+0x46>
 8012f10:	6811      	ldr	r1, [r2, #0]
 8012f12:	1855      	adds	r5, r2, r1
 8012f14:	42a5      	cmp	r5, r4
 8012f16:	d10b      	bne.n	8012f30 <_free_r+0x70>
 8012f18:	6824      	ldr	r4, [r4, #0]
 8012f1a:	4421      	add	r1, r4
 8012f1c:	1854      	adds	r4, r2, r1
 8012f1e:	42a3      	cmp	r3, r4
 8012f20:	6011      	str	r1, [r2, #0]
 8012f22:	d1e0      	bne.n	8012ee6 <_free_r+0x26>
 8012f24:	681c      	ldr	r4, [r3, #0]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	6053      	str	r3, [r2, #4]
 8012f2a:	440c      	add	r4, r1
 8012f2c:	6014      	str	r4, [r2, #0]
 8012f2e:	e7da      	b.n	8012ee6 <_free_r+0x26>
 8012f30:	d902      	bls.n	8012f38 <_free_r+0x78>
 8012f32:	230c      	movs	r3, #12
 8012f34:	6003      	str	r3, [r0, #0]
 8012f36:	e7d6      	b.n	8012ee6 <_free_r+0x26>
 8012f38:	6825      	ldr	r5, [r4, #0]
 8012f3a:	1961      	adds	r1, r4, r5
 8012f3c:	428b      	cmp	r3, r1
 8012f3e:	bf04      	itt	eq
 8012f40:	6819      	ldreq	r1, [r3, #0]
 8012f42:	685b      	ldreq	r3, [r3, #4]
 8012f44:	6063      	str	r3, [r4, #4]
 8012f46:	bf04      	itt	eq
 8012f48:	1949      	addeq	r1, r1, r5
 8012f4a:	6021      	streq	r1, [r4, #0]
 8012f4c:	6054      	str	r4, [r2, #4]
 8012f4e:	e7ca      	b.n	8012ee6 <_free_r+0x26>
 8012f50:	b003      	add	sp, #12
 8012f52:	bd30      	pop	{r4, r5, pc}
 8012f54:	200095d4 	.word	0x200095d4

08012f58 <_init>:
 8012f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5a:	bf00      	nop
 8012f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f5e:	bc08      	pop	{r3}
 8012f60:	469e      	mov	lr, r3
 8012f62:	4770      	bx	lr

08012f64 <_fini>:
 8012f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f66:	bf00      	nop
 8012f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f6a:	bc08      	pop	{r3}
 8012f6c:	469e      	mov	lr, r3
 8012f6e:	4770      	bx	lr
